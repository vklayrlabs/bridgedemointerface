{"ast":null,"code":"var _jsxFileName = \"/Users/vyasartix/workspace/AceLayrBridgeDemo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport logo from \"./layrswap.png\";\nimport { fromHex } from \"./core\";\nimport \"./App.css\";\nimport Web3 from 'web3';\nimport { abi, L2BRIDGE_ADDR } from './abi/BridgeERC20_Factory.json';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { Tab, Tabs, Container, Col, Row, InputGroup, FormControl, DropdownButton, Dropdown, Button, ButtonGroup } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst toHex = bytes => Buffer.from(bytes).toString(\"hex\"); // policy ID of RAMANUJAM token on Cardano\n\n\nconst RAMANUJAM_POLICY_ID = \"0c8f4228d02dfaa4e2dcc33a87e25db30f34d238268f6ad57709db1c\"; // policy ID of HOPPER token on Cardano\n\nconst HOPPER_POLICY_ID = \"a53096f46350b8555bb9d36b403875805029180a56bd667b6c08d0fb\"; // fee to be paid\n\nconst FEE = \"1000000\"; // address of bridge contract to AceLayr at Cardano\n\nconst BRIDGE_TO_ACELAYR_CONTRACT_ADDR = \"addr_test1wz5ce5hlekf822efjt4w3j24fgx89e3umldrq93hjvuqxssjt4ss8\"; // address of HOPPER token at L2\n\nconst HOPPER_CONTRACT_ADDR = \"0xF73d1653B96c69fCC5eb12a00De9551D29DDE68c\"; // address of RAMANUJAM token at L2\n\nconst RAMANUJAM_CONTRACT_ADDR = \"0x3dCB75C0529F3B19501BD0a3b27D129660bb0b95\";\n\nfunction App() {\n  _s();\n\n  const [wasm, setWasm] = useState(null);\n  const [address, setAddress] = useState(\"\");\n  const [utxos, setUtxos] = useState([]);\n  const [bridgeHopper, setBridgeHopperAmount] = useState(\"\");\n  const [bridgeRamanujam, setBridgeRamanujamAmount] = useState(\"\");\n  const [bridgeAda, setBridgeAdaAmount] = useState(\"\");\n  const [addrAL, setAddrAceLayr] = useState(\"0x\");\n  const [networkParams, setNetworkParam] = useState(\"\");\n  const [web3, setWeb3] = useState(null);\n  const [l2BridgeContract, setL2BridgeContract] = useState(\"\");\n  const [l2SenderAddress, setL2SenderAddress] = useState(\"\");\n  const [cardanoReceiverAddress, setCardanoReceiverAddress] = useState(\"0x\");\n  const [withdrawalTokenName, setWithdrawalTokenName] = useState(\"\");\n  const [withdrawalTokenAmt, setWithdrawalTokenAmt] = useState(\"\");\n  const [deposit, setDeposit] = useState(true);\n  const [bridgeToken, setBridgeToken] = useState(0);\n  window.addEventListener('load', function () {\n    if (typeof window.ethereum == 'undefined') {\n      console.log(\"Please install Metamask\");\n    } else {\n      var newWeb3 = new Web3(window.ethereum);\n      setWeb3(newWeb3);\n      setL2BridgeContract(new newWeb3.eth.Contract(abi, L2BRIDGE_ADDR));\n    }\n  });\n  useEffect(() => {\n    async function start() {\n      const tempNetworkParams = await (await fetch(\"https://cardano-testnet.blockfrost.io/api/v0/epochs/latest/parameters\", {\n        headers: {\n          project_id: \"testnetJrXN1L1NZfh5ktWDsJIRTAu8DyeqDJ7v\"\n        }\n      })).json();\n      setNetworkParam(tempNetworkParams);\n      const tempWasm = await import('@emurgo/cardano-serialization-lib-browser');\n      setWasm(tempWasm);\n\n      try {\n        try {\n          await window.cardano.enable();\n          var serializedAddress = (await window.cardano.getUsedAddresses())[0];\n          const walletAddress = tempWasm.BaseAddress.from_address(tempWasm.Address.from_bytes(fromHex(serializedAddress)));\n          setAddress(walletAddress);\n        } catch (e) {\n          alert(e.toString());\n        }\n      } catch (e) {\n        console.log(\"please connect\");\n      }\n    }\n\n    start();\n  }, []); // @info connects with the Nami wallet\n\n  async function connectnami() {\n    try {\n      await window.cardano.enable();\n      var serializedAddress = (await window.cardano.getUsedAddresses())[0];\n      const walletAddress = wasm.BaseAddress.from_address(wasm.Address.from_bytes(fromHex(serializedAddress)));\n      setAddress(walletAddress);\n    } catch (e) {\n      alert(e.toString());\n    }\n  } // @info for bridging tokens specified by the user in the UI\n\n\n  async function bridgeTokens() {\n    try {\n      await window.cardano.enable();\n      var serializedUtxoList = await window.cardano.getUtxos();\n      const tempUtxos = serializedUtxoList.map(utxo => wasm.TransactionUnspentOutput.from_bytes(fromHex(utxo)));\n      setUtxos(tempUtxos); // collecting all UTXOs at the wallet containing RAMANUJAM and HOPPER\n\n      var multiAssetUtxoInput = tempUtxos.filter(e => {\n        if (e.output().amount().multiasset() == undefined) return false;\n        var scripthash = e.output().amount().multiasset().keys().get(0);\n        var decoder = new TextDecoder();\n        var tokenname = decoder.decode(e.output().amount().multiasset().get(scripthash).keys().get(0).name());\n        return tokenname == 'RAMANUJAM' || tokenname == 'HOPPER';\n      }); // collecting all UTXOs at the wallet containing ADA\n\n      var adaUtxoInput = tempUtxos.filter(e => {\n        if (e.output().amount().multiasset() == undefined) return true;\n      }); // creating and sending transaction\n\n      createTx(multiAssetUtxoInput, adaUtxoInput);\n    } catch (e) {\n      alert(e.toString());\n    }\n  } // @info for constructing and sending transaction\n  // @params multiAssetUtxoInput - UTXOs containing assets other than ADA\n  // @params adaUtxoInput - UTXOs containing ADA \n\n\n  async function createTx(multiAssetUtxoInput, adaUtxoInput) {\n    // @todo hardcoded the numbers, some issue with blockfrost API\n    //       need to update it to use the API later \n    const txBuilder = wasm.TransactionBuilder.new(wasm.LinearFee.new(wasm.BigNum.from_str('44'), wasm.BigNum.from_str('155381')), wasm.BigNum.from_str('34482'), wasm.BigNum.from_str('500000000'), wasm.BigNum.from_str('2000000'), 5000, 16384, 0.0577, 0.0000721); // constructing the input UTXOs\n    // getting total input ADA\n\n    var inputAda = wasm.BigNum.from_str(\"0\");\n    multiAssetUtxoInput.forEach(e => inputAda = inputAda.checked_add(wasm.BigNum.from_str(e.output().amount().coin().to_str())));\n    adaUtxoInput.forEach(e => inputAda = inputAda.checked_add(wasm.BigNum.from_str(e.output().amount().coin().to_str()))); // getting total for each of the multiassets other than ADA\n\n    var inputRamanujam = wasm.BigNum.from_str(\"0\");\n    var inputHopper = wasm.BigNum.from_str(\"0\");\n    multiAssetUtxoInput.forEach(e => {\n      for (let i = 0; i < e.output().amount().multiasset().keys().len(); i++) {\n        var policy = e.output().amount().multiasset().keys().get(i);\n        var tokenname = e.output().amount().multiasset().get(policy).keys().get(0);\n        var decoder = new TextDecoder(); // getting total Ramanujam\n\n        if (equal(policy.to_bytes(), wasm.ScriptHash.from_bytes(Buffer.from(RAMANUJAM_POLICY_ID, \"hex\")).to_bytes()) == true && decoder.decode(tokenname.name()) == 'RAMANUJAM') {\n          inputRamanujam = inputRamanujam.checked_add(wasm.BigNum.from_str(e.output().amount().multiasset().get(policy).get(tokenname).to_str()));\n        } // getting total Hopper\n\n\n        if (equal(policy.to_bytes(), wasm.ScriptHash.from_bytes(Buffer.from(HOPPER_POLICY_ID, \"hex\")).to_bytes()) == true && decoder.decode(tokenname.name()) == 'HOPPER') {\n          inputHopper = inputHopper.checked_add(wasm.BigNum.from_str(e.output().amount().multiasset().get(policy).get(tokenname).to_str()));\n        }\n      }\n    }); // adding input UTXOs containing ADA\n\n    adaUtxoInput.forEach(utxo => {\n      txBuilder.add_input(utxo.output().address(), utxo.input(), utxo.output().amount());\n    }); // adding input UTXOs containing assets other than ADA\n\n    multiAssetUtxoInput.forEach(utxo => {\n      txBuilder.add_input(utxo.output().address(), utxo.input(), utxo.output().amount());\n    }); // constructing the output UTXOs\n\n    const outputs = wasm.TransactionOutputs.new(); // check bridged ADA + fee is less than input ADA\n    // check bridged RAMANUJAM is less than input RAMANUJAM\n    // check bridged HOPPER is less than inout HOPPER\n\n    if (inputAda < wasm.BigNum.from_str(bridgeAda).checked_add(wasm.BigNum.from_str(FEE)) && inputRamanujam < wasm.BigNum.from_str(bridgeRamanujam) && inputHopper < wasm.BigNum.from_str(bridgeHopper)) {\n      return;\n    } // determining remaining ADA\n\n\n    const outputAda = inputAda.checked_sub(wasm.BigNum.from_str(bridgeAda).checked_add(wasm.BigNum.from_str(FEE))); // determining remaining RAMANUJAM\n\n    const remainingRamanujam = inputRamanujam.checked_sub(wasm.BigNum.from_str(bridgeRamanujam)); // determining remaining HOPPER\n\n    const remainingHopper = inputHopper.checked_sub(wasm.BigNum.from_str(bridgeHopper)); // creating assets for sending to the bridge contract on Cardano\n\n    var assetToBridge;\n\n    if (wasm.BigNum.from_str(bridgeRamanujam) == wasm.BigNum.from_str(\"0\") && wasm.BigNum.from_str(bridgeHopper) == wasm.BigNum.from_str(\"0\")) {\n      // bridge only ADA   \n      assetToBridge = [{\n        unit: \"lovelace\",\n        quantity: bridgeAda\n      }];\n    } else if (wasm.BigNum.from_str(bridgeRamanujam) == wasm.BigNum.from_str(\"0\")) {\n      // bridge only ADA and HOPPER\n      assetToBridge = [{\n        unit: \"lovelace\",\n        quantity: bridgeAda\n      }, {\n        unit: HOPPER_POLICY_ID + \"HOPPER\",\n        quantity: bridgeHopper\n      }];\n    } else if (wasm.BigNum.from_str(bridgeHopper) == wasm.BigNum.from_str(\"0\")) {\n      // bridge only ADA and RAMANUJAM\n      assetToBridge = [{\n        unit: \"lovelace\",\n        quantity: bridgeAda\n      }, {\n        unit: RAMANUJAM_POLICY_ID + \"RAMANUJAM\",\n        quantity: bridgeRamanujam\n      }];\n    } else {\n      // bridge ADA, RAMANUJAM and HOPPER\n      assetToBridge = [{\n        unit: \"lovelace\",\n        quantity: bridgeAda\n      }, {\n        unit: RAMANUJAM_POLICY_ID + \"RAMANUJAM\",\n        quantity: bridgeRamanujam\n      }, {\n        unit: HOPPER_POLICY_ID + \"HOPPER\",\n        quantity: bridgeHopper\n      }];\n    } // create output UTXOs to bridge contract\n\n\n    const output = wasm.TransactionOutput.new(wasm.Address.from_bech32(BRIDGE_TO_ACELAYR_CONTRACT_ADDR), assetsToValue(assetToBridge));\n    output.set_data_hash(wasm.DataHash.from_bytes(Buffer.from(\"923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec\", \"hex\")));\n    outputs.add(output); // create output UTXOs for sending the remaining Ada, Ramanujam and Hopper to self\n\n    outputs.add(wasm.TransactionOutput.new(address.to_address(), assetsToValue([{\n      unit: \"lovelace\",\n      quantity: outputAda.to_str()\n    }, {\n      unit: RAMANUJAM_POLICY_ID + \"RAMANUJAM\",\n      quantity: remainingRamanujam.to_str()\n    }, {\n      unit: HOPPER_POLICY_ID + \"HOPPER\",\n      quantity: remainingHopper.to_str()\n    }]))); // adding the output UTXOs to the transaction\n\n    for (let i = 0; i < outputs.len(); i++) {\n      txBuilder.add_output(outputs.get(i));\n    } // setting fee for the transaction\n\n\n    txBuilder.set_fee(wasm.BigNum.from_str(FEE)); // adding metadata to the transaction\n\n    let aux_data;\n    const metadata = {\n      \"1000\": {\n        \"address\": addrAL\n      }\n    };\n    aux_data = wasm.AuxiliaryData.new();\n    const generalMetadata = wasm.GeneralTransactionMetadata.new();\n    Object.keys(metadata).forEach(label => {\n      generalMetadata.insert(wasm.BigNum.from_str(label), wasm.encode_json_str_to_metadatum(JSON.stringify(metadata[label]), 1));\n    });\n    aux_data.set_metadata(generalMetadata);\n    txBuilder.set_auxiliary_data(aux_data); // building tx body without witness\n\n    const txBody = txBuilder.build(); // getting witnesses\n\n    const transactionWitnessSet = wasm.TransactionWitnessSet.new();\n    const tx = wasm.Transaction.new(txBody, wasm.TransactionWitnessSet.from_bytes(transactionWitnessSet.to_bytes()), aux_data);\n    let txVkeyWitnesses = await window.cardano.signTx(toHex(tx.to_bytes()), true);\n    txVkeyWitnesses = wasm.TransactionWitnessSet.from_bytes(fromHex(txVkeyWitnesses));\n    transactionWitnessSet.set_vkeys(txVkeyWitnesses.vkeys()); // signing transaction\n\n    const signedTx = wasm.Transaction.new(tx.body(), transactionWitnessSet, tx.auxiliary_data()); // submitting transaction\n\n    await window.cardano.submitTx(toHex(signedTx.to_bytes()));\n  } // @info converting asset to value format specified by Cardano\n  // @params assets - specifies the policy ID of the token and the quantity of tokens for each of the asset to be sent\n\n\n  function assetsToValue(assets) {\n    const multiAsset = wasm.MultiAsset.new();\n    const lovelace = assets.find(asset => asset.unit === \"lovelace\");\n    const policies = [...new Set(assets.filter(asset => asset.unit !== \"lovelace\").map(asset => asset.unit.slice(0, 56)))];\n    policies.forEach(policy => {\n      const policyAssets = assets.filter(asset => asset.unit.slice(0, 56) === policy);\n      const assetsValue = wasm.Assets.new();\n      policyAssets.forEach(asset => {\n        assetsValue.insert(wasm.AssetName.new(Buffer.from(asset.unit.slice(56))), wasm.BigNum.from_str(asset.quantity));\n      });\n      multiAsset.insert(wasm.ScriptHash.from_bytes(Buffer.from(policy, \"hex\")), assetsValue);\n    });\n    const value = wasm.Value.new(wasm.BigNum.from_str(lovelace ? lovelace.quantity : \"0\"));\n    if (assets.length > 1 || !lovelace) value.set_multiasset(multiAsset);\n    return value;\n  } // @info checking the equality between two uint8array\n  // @params (buf1, buf2) - pair of uint8array to be compared\n\n\n  function equal(buf1, buf2) {\n    if (buf1.byteLength != buf2.byteLength) return false;\n    var dv1 = new Int8Array(buf1);\n    var dv2 = new Int8Array(buf2);\n\n    for (var i = 0; i != buf1.byteLength; i++) {\n      if (dv1[i] != dv2[i]) return false;\n    }\n\n    return true;\n  }\n\n  const bridgeTokenText = () => {\n    if (bridgeToken === 0) {\n      return \"Which Token?\";\n    } else if (bridgeToken === 1) {\n      return \"Ramanujam\";\n    }\n\n    return \"Hopper\";\n  }; // @info connects with the Metamask\n\n\n  async function connectmetamask() {\n    if (window.ethereum) {\n      try {\n        const accounts = (await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        }))[0];\n        console.log(accounts);\n        setL2SenderAddress(accounts);\n      } catch (e) {\n        alert(e.toString());\n      }\n    }\n  } // @info for withdrawing tokens specified by the user in the UI  from L2 to Cardano\n\n\n  async function withdrawtokens() {\n    try {\n      console.log(\"Enter more code here!\");\n      console.log(withdrawalTokenName);\n      console.log(withdrawalTokenAmt);\n      console.log(cardanoReceiverAddress); // determining which token contract address to use\n\n      var tokenContractAddr;\n\n      if (withdrawalTokenName == 'HOPPER') {\n        tokenContractAddr = HOPPER_CONTRACT_ADDR;\n      } else if (withdrawalTokenName == 'RAMANUJAM') {\n        tokenContractAddr = RAMANUJAM_CONTRACT_ADDR;\n      } else {\n        console.log(\"Please enter something legit!\");\n      } // estimating gas\n\n\n      const gasEstimate = await l2BridgeContract.methods.withdrawal(tokenContractAddr, withdrawalTokenAmt, cardanoReceiverAddress).estimateGas({\n        from: l2SenderAddress,\n        to: L2BRIDGE_ADDR\n      });\n      console.log(gasEstimate); // constructing transaction\n\n      const tx = {\n        'from': l2SenderAddress,\n        'to': L2BRIDGE_ADDR,\n        'gas': \"0x\" + gasEstimate.toString(16),\n        'data': l2BridgeContract.methods.withdrawal(tokenContractAddr, withdrawalTokenAmt, cardanoReceiverAddress).encodeABI(),\n        'chainId': '0x420'\n      };\n      console.log(l2SenderAddress);\n      console.log(tx); // sending transaction\n\n      const transactionHash = await window.ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [tx]\n      });\n      console.log(transactionHash);\n    } catch (e) {\n      alert(e.toString());\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Dropdown button\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          href: \"#/action-1\",\n          button: true,\n          onclick: connectnami,\n          children: \"NamiWallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          href: \"#/action-2\",\n          button: true,\n          onClick: connectmetamask,\n          children: \"Metamask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(ButtonGroup, {\n              \"aria-label\": \"Basic example\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"secondary\",\n                onClick: () => setDeposit(true),\n                children: \"Deposit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"secondary\",\n                onClick: () => setDeposit(false),\n                children: \"Withdraw\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                height: 25\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 15\n            }, this), deposit ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                  id: \"basic-addon1\",\n                  children: \"Amount of Ramanujam\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 520,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  value: bridgeRamanujam,\n                  onChange: ev => {\n                    if (/^[0-9]{0,40}$/.test(ev.target.value)) {\n                      setBridgeRamanujamAmount(ev.target.value);\n                    }\n                  },\n                  placeholder: \"Amount\",\n                  \"aria-label\": \"Username\",\n                  \"aria-describedby\": \"basic-addon1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 521,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 519,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                  id: \"basic-addon1\",\n                  children: \"Amount of Hopper\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 534,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  value: bridgeHopper,\n                  onChange: ev => {\n                    if (/^[0-9]{0,40}$/.test(ev.target.value)) {\n                      setBridgeHopperAmount(ev.target.value);\n                    }\n                  },\n                  placeholder: \"Amount\",\n                  \"aria-label\": \"Username\",\n                  \"aria-describedby\": \"basic-addon1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 535,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                  id: \"basic-addon1\",\n                  children: \"Amount of Ada\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 548,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  value: bridgeAda,\n                  onChange: ev => {\n                    // console.log(ev.target.value, /^[1-9]{0,40}$/.test(ev.target.value))\n                    if (/^[0-9]{0,40}$/.test(ev.target.value)) {\n                      setBridgeAdaAmount(ev.target.value);\n                    }\n                  },\n                  placeholder: \"Amount\",\n                  \"aria-label\": \"Username\",\n                  \"aria-describedby\": \"basic-addon1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 549,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 547,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                  id: \"basic-addon1\",\n                  children: \"AceLayr Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 562,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  value: addrAL,\n                  onChange: ev => {\n                    if (/^0x[a-fA-F0-9]{0,40}$/.test(ev.target.value)) {\n                      setAddrAceLayr(ev.target.value);\n                    }\n                  },\n                  placeholder: \"Address\",\n                  \"aria-label\": \"Username\",\n                  \"aria-describedby\": \"basic-addon1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 563,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 561,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: bridgeTokens,\n                children: \"Bridge Tokens\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n                children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n                  variant: \"success\",\n                  id: \"Which-Token\",\n                  children: bridgeTokenText()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 579,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n                  title: \"Which Token?\",\n                  children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                    href: \"#/action-1\",\n                    onClick: () => setBridgeToken(1),\n                    children: \"Ramanujam\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 586,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                    href: \"#/action-2\",\n                    onClick: () => setBridgeToken(2),\n                    children: \"Hopper\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 587,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 584,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  height: 25\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 591,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                  id: \"basic-addon1\",\n                  children: \"Amount of Token\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 610,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  value: withdrawalTokenAmt,\n                  onChange: ev => {\n                    if (/^[0-9]{0,40}$/.test(ev.target.value)) {\n                      setWithdrawalTokenAmt(ev.target.value);\n                    }\n                  },\n                  placeholder: \"Amount\",\n                  \"aria-label\": \"Username\",\n                  \"aria-describedby\": \"basic-addon1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 611,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 609,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                  id: \"basic-addon1\",\n                  children: \"Cardano Rx Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 626,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  value: cardanoReceiverAddress,\n                  onChange: ev => {\n                    if (/^0x[a-fA-F0-9]{0,40}$/.test(ev.target.value)) {\n                      setCardanoReceiverAddress(ev.target.value);\n                    }\n                  },\n                  placeholder: \"Amount\",\n                  \"aria-label\": \"Username\",\n                  \"aria-describedby\": \"basic-addon1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 627,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 625,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: withdrawtokens,\n                children: \"Withdraw Tokens\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 21\n              }, this), \";\"]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactj.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: l2SenderAddress.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 485,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"oTydcXXcXRbD1IHvuTQ8cJExLj8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vyasartix/workspace/AceLayrBridgeDemo/src/App.js"],"names":["useState","useEffect","logo","fromHex","Web3","abi","L2BRIDGE_ADDR","detectEthereumProvider","Tab","Tabs","Container","Col","Row","InputGroup","FormControl","DropdownButton","Dropdown","Button","ButtonGroup","$","toHex","bytes","Buffer","from","toString","RAMANUJAM_POLICY_ID","HOPPER_POLICY_ID","FEE","BRIDGE_TO_ACELAYR_CONTRACT_ADDR","HOPPER_CONTRACT_ADDR","RAMANUJAM_CONTRACT_ADDR","App","wasm","setWasm","address","setAddress","utxos","setUtxos","bridgeHopper","setBridgeHopperAmount","bridgeRamanujam","setBridgeRamanujamAmount","bridgeAda","setBridgeAdaAmount","addrAL","setAddrAceLayr","networkParams","setNetworkParam","web3","setWeb3","l2BridgeContract","setL2BridgeContract","l2SenderAddress","setL2SenderAddress","cardanoReceiverAddress","setCardanoReceiverAddress","withdrawalTokenName","setWithdrawalTokenName","withdrawalTokenAmt","setWithdrawalTokenAmt","deposit","setDeposit","bridgeToken","setBridgeToken","window","addEventListener","ethereum","console","log","newWeb3","eth","Contract","start","tempNetworkParams","fetch","headers","project_id","json","tempWasm","cardano","enable","serializedAddress","getUsedAddresses","walletAddress","BaseAddress","from_address","Address","from_bytes","e","alert","connectnami","bridgeTokens","serializedUtxoList","getUtxos","tempUtxos","map","utxo","TransactionUnspentOutput","multiAssetUtxoInput","filter","output","amount","multiasset","undefined","scripthash","keys","get","decoder","TextDecoder","tokenname","decode","name","adaUtxoInput","createTx","txBuilder","TransactionBuilder","new","LinearFee","BigNum","from_str","inputAda","forEach","checked_add","coin","to_str","inputRamanujam","inputHopper","i","len","policy","equal","to_bytes","ScriptHash","add_input","input","outputs","TransactionOutputs","outputAda","checked_sub","remainingRamanujam","remainingHopper","assetToBridge","unit","quantity","TransactionOutput","from_bech32","assetsToValue","set_data_hash","DataHash","add","to_address","add_output","set_fee","aux_data","metadata","AuxiliaryData","generalMetadata","GeneralTransactionMetadata","Object","label","insert","encode_json_str_to_metadatum","JSON","stringify","set_metadata","set_auxiliary_data","txBody","build","transactionWitnessSet","TransactionWitnessSet","tx","Transaction","txVkeyWitnesses","signTx","set_vkeys","vkeys","signedTx","body","auxiliary_data","submitTx","assets","multiAsset","MultiAsset","lovelace","find","asset","policies","Set","slice","policyAssets","assetsValue","Assets","AssetName","value","Value","length","set_multiasset","buf1","buf2","byteLength","dv1","Int8Array","dv2","bridgeTokenText","connectmetamask","accounts","request","method","withdrawtokens","tokenContractAddr","gasEstimate","methods","withdrawal","estimateGas","to","encodeABI","transactionHash","params","height","ev","test","target"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport logo from \"./layrswap.png\";\nimport { fromHex } from \"./core\";\nimport \"./App.css\";\nimport Web3 from 'web3';\nimport { abi, L2BRIDGE_ADDR } from './abi/BridgeERC20_Factory.json'\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { Tab, Tabs, Container, Col, Row, InputGroup, FormControl, DropdownButton, Dropdown, Button, ButtonGroup } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nconst toHex = (bytes) => Buffer.from(bytes).toString(\"hex\");\n\n// policy ID of RAMANUJAM token on Cardano\nconst RAMANUJAM_POLICY_ID = \"0c8f4228d02dfaa4e2dcc33a87e25db30f34d238268f6ad57709db1c\"\n// policy ID of HOPPER token on Cardano\nconst HOPPER_POLICY_ID = \"a53096f46350b8555bb9d36b403875805029180a56bd667b6c08d0fb\"\n// fee to be paid\nconst FEE = \"1000000\"\n// address of bridge contract to AceLayr at Cardano\nconst BRIDGE_TO_ACELAYR_CONTRACT_ADDR = \"addr_test1wz5ce5hlekf822efjt4w3j24fgx89e3umldrq93hjvuqxssjt4ss8\"\n// address of HOPPER token at L2\nconst HOPPER_CONTRACT_ADDR = \"0xF73d1653B96c69fCC5eb12a00De9551D29DDE68c\"\n// address of RAMANUJAM token at L2\nconst RAMANUJAM_CONTRACT_ADDR = \"0x3dCB75C0529F3B19501BD0a3b27D129660bb0b95\"\n\nfunction App() {\n  const [wasm, setWasm] = useState(null);\n  const [address, setAddress] = useState(\"\");\n  const [utxos, setUtxos] = useState([]);\n  const [bridgeHopper, setBridgeHopperAmount] = useState(\"\");\n  const [bridgeRamanujam, setBridgeRamanujamAmount] = useState(\"\");\n  const [bridgeAda, setBridgeAdaAmount] = useState(\"\");\n  const [addrAL, setAddrAceLayr] = useState(\"0x\");\n  const [networkParams, setNetworkParam] = useState(\"\");\n\n\n  const [web3, setWeb3] = useState(null);\n  const [l2BridgeContract, setL2BridgeContract] = useState(\"\");\n  const [l2SenderAddress, setL2SenderAddress] = useState(\"\");\n  const [cardanoReceiverAddress, setCardanoReceiverAddress] = useState(\"0x\");\n  const [withdrawalTokenName, setWithdrawalTokenName] = useState(\"\");\n  const [withdrawalTokenAmt, setWithdrawalTokenAmt] = useState(\"\");\n\n  const [deposit, setDeposit] = useState(true)\n  const [bridgeToken, setBridgeToken] = useState(0)\n\n  window.addEventListener('load', function () {\n    if (typeof window.ethereum == 'undefined') {\n      console.log(\"Please install Metamask\");\n    } else {\n      var newWeb3 = new Web3(window.ethereum)\n      setWeb3(newWeb3);\n      setL2BridgeContract(new newWeb3.eth.Contract(abi, L2BRIDGE_ADDR));\n    }\n  });\n\n\n  useEffect(() => {\n    async function start() {\n      const tempNetworkParams = await (\n        await fetch(\"https://cardano-testnet.blockfrost.io/api/v0/epochs/latest/parameters\", { headers: { project_id: \"testnetJrXN1L1NZfh5ktWDsJIRTAu8DyeqDJ7v\" } }\n        )).json()\n      setNetworkParam(tempNetworkParams)\n\n      const tempWasm = await import('@emurgo/cardano-serialization-lib-browser')\n      setWasm(tempWasm);\n      try {\n        try {\n          await window.cardano.enable();\n          var serializedAddress = (await window.cardano.getUsedAddresses())[0];\n          const walletAddress = tempWasm.BaseAddress.from_address(\n            tempWasm.Address.from_bytes(fromHex(serializedAddress))\n          );\n          setAddress(walletAddress)\n        } catch (e) {\n          alert(e.toString());\n        }\n      } catch (e) {\n        console.log(\"please connect\")\n      }\n    }\n    start();\n  }, []);\n\n\n\n\n\n  // @info connects with the Nami wallet\n  async function connectnami() {\n    try {\n      await window.cardano.enable();\n      var serializedAddress = (await window.cardano.getUsedAddresses())[0];\n      const walletAddress = wasm.BaseAddress.from_address(\n        wasm.Address.from_bytes(fromHex(serializedAddress))\n      );\n      setAddress(walletAddress)\n    } catch (e) {\n      alert(e.toString());\n    }\n  }\n\n\n\n\n  // @info for bridging tokens specified by the user in the UI\n  async function bridgeTokens() {\n    try {\n      await window.cardano.enable();\n      var serializedUtxoList = (await window.cardano.getUtxos());\n      const tempUtxos = serializedUtxoList.map((utxo) =>\n        wasm.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n      );\n      setUtxos(tempUtxos)\n\n\n      // collecting all UTXOs at the wallet containing RAMANUJAM and HOPPER\n      var multiAssetUtxoInput = tempUtxos.filter(e => {\n        if (e.output().amount().multiasset() == undefined) return false\n        var scripthash = e.output().amount().multiasset().keys().get(0)\n        var decoder = new TextDecoder()\n        var tokenname = decoder.decode(e.output().amount().multiasset().get(scripthash).keys().get(0).name())\n        return (tokenname == 'RAMANUJAM' || tokenname == 'HOPPER')\n      })\n\n      // collecting all UTXOs at the wallet containing ADA\n      var adaUtxoInput = tempUtxos.filter(e => {\n        if (e.output().amount().multiasset() == undefined) return true\n      })\n\n\n      // creating and sending transaction\n      createTx(multiAssetUtxoInput, adaUtxoInput)\n\n    } catch (e) {\n      alert(e.toString());\n    }\n  }\n\n\n  // @info for constructing and sending transaction\n  // @params multiAssetUtxoInput - UTXOs containing assets other than ADA\n  // @params adaUtxoInput - UTXOs containing ADA \n  async function createTx(multiAssetUtxoInput, adaUtxoInput) {\n\n    // @todo hardcoded the numbers, some issue with blockfrost API\n    //       need to update it to use the API later \n    const txBuilder = wasm.TransactionBuilder.new(\n      wasm.LinearFee.new(\n        wasm.BigNum.from_str('44'),\n        wasm.BigNum.from_str('155381')\n      ),\n      wasm.BigNum.from_str('34482'),\n      wasm.BigNum.from_str('500000000'),\n      wasm.BigNum.from_str('2000000'),\n      5000,\n      16384,\n      0.0577,\n      0.0000721\n    );\n\n\n\n    // constructing the input UTXOs\n    // getting total input ADA\n    var inputAda = wasm.BigNum.from_str(\"0\")\n    multiAssetUtxoInput.forEach(e =>\n      inputAda = inputAda.checked_add(wasm.BigNum.from_str(e.output().amount().coin().to_str()))\n    );\n    adaUtxoInput.forEach(e =>\n      inputAda = inputAda.checked_add(wasm.BigNum.from_str(e.output().amount().coin().to_str()))\n    );\n\n    // getting total for each of the multiassets other than ADA\n    var inputRamanujam = wasm.BigNum.from_str(\"0\")\n    var inputHopper = wasm.BigNum.from_str(\"0\")\n    multiAssetUtxoInput.forEach(e => {\n      for (let i = 0; i < e.output().amount().multiasset().keys().len(); i++) {\n        var policy = e.output().amount().multiasset().keys().get(i)\n        var tokenname = e.output().amount().multiasset().get(policy).keys().get(0)\n        var decoder = new TextDecoder()\n\n        // getting total Ramanujam\n        if ((equal(policy.to_bytes(), wasm.ScriptHash.from_bytes(Buffer.from(RAMANUJAM_POLICY_ID, \"hex\")).to_bytes()) == true) &&\n          (decoder.decode(tokenname.name()) == 'RAMANUJAM')\n        ) {\n          inputRamanujam = inputRamanujam.checked_add(wasm.BigNum.from_str(e.output().amount().multiasset().get(policy).get(tokenname).to_str()))\n        }\n\n        // getting total Hopper\n        if ((equal(policy.to_bytes(), wasm.ScriptHash.from_bytes(Buffer.from(HOPPER_POLICY_ID, \"hex\")).to_bytes()) == true) &&\n          (decoder.decode(tokenname.name()) == 'HOPPER')\n        ) {\n          inputHopper = inputHopper.checked_add(wasm.BigNum.from_str(e.output().amount().multiasset().get(policy).get(tokenname).to_str()))\n        }\n      }\n    });\n\n    // adding input UTXOs containing ADA\n    adaUtxoInput.forEach((utxo) => {\n      txBuilder.add_input(\n        utxo.output().address(),\n        utxo.input(),\n        utxo.output().amount()\n      );\n    });\n    // adding input UTXOs containing assets other than ADA\n    multiAssetUtxoInput.forEach((utxo) => {\n      txBuilder.add_input(\n        utxo.output().address(),\n        utxo.input(),\n        utxo.output().amount()\n      );\n    });\n\n\n\n    // constructing the output UTXOs\n    const outputs = wasm.TransactionOutputs.new()\n    // check bridged ADA + fee is less than input ADA\n    // check bridged RAMANUJAM is less than input RAMANUJAM\n    // check bridged HOPPER is less than inout HOPPER\n    if (\n      inputAda < wasm.BigNum.from_str(bridgeAda).checked_add(wasm.BigNum.from_str(FEE)) &&\n      inputRamanujam < wasm.BigNum.from_str(bridgeRamanujam) &&\n      inputHopper < wasm.BigNum.from_str(bridgeHopper)\n    ) {\n      return\n    }\n\n\n\n    // determining remaining ADA\n    const outputAda = inputAda.checked_sub(wasm.BigNum.from_str(bridgeAda).checked_add(wasm.BigNum.from_str(FEE)))\n    // determining remaining RAMANUJAM\n    const remainingRamanujam = inputRamanujam.checked_sub(wasm.BigNum.from_str(bridgeRamanujam))\n    // determining remaining HOPPER\n    const remainingHopper = inputHopper.checked_sub(wasm.BigNum.from_str(bridgeHopper))\n\n\n\n    // creating assets for sending to the bridge contract on Cardano\n    var assetToBridge;\n    if ((wasm.BigNum.from_str(bridgeRamanujam) == wasm.BigNum.from_str(\"0\")) &&\n      (wasm.BigNum.from_str(bridgeHopper) == wasm.BigNum.from_str(\"0\"))) {\n      // bridge only ADA   \n      assetToBridge = [\n        { unit: \"lovelace\", quantity: bridgeAda }\n      ]\n    } else if (wasm.BigNum.from_str(bridgeRamanujam) == wasm.BigNum.from_str(\"0\")) {\n      // bridge only ADA and HOPPER\n      assetToBridge = [\n        { unit: \"lovelace\", quantity: bridgeAda },\n        { unit: HOPPER_POLICY_ID + \"HOPPER\", quantity: bridgeHopper }\n      ]\n    } else if (wasm.BigNum.from_str(bridgeHopper) == wasm.BigNum.from_str(\"0\")) {\n      // bridge only ADA and RAMANUJAM\n      assetToBridge = [\n        { unit: \"lovelace\", quantity: bridgeAda },\n        { unit: RAMANUJAM_POLICY_ID + \"RAMANUJAM\", quantity: bridgeRamanujam }\n      ]\n    } else {\n      // bridge ADA, RAMANUJAM and HOPPER\n      assetToBridge = [\n        { unit: \"lovelace\", quantity: bridgeAda },\n        { unit: RAMANUJAM_POLICY_ID + \"RAMANUJAM\", quantity: bridgeRamanujam },\n        { unit: HOPPER_POLICY_ID + \"HOPPER\", quantity: bridgeHopper },\n      ]\n    }\n    // create output UTXOs to bridge contract\n    const output = wasm.TransactionOutput.new(wasm.Address.from_bech32(BRIDGE_TO_ACELAYR_CONTRACT_ADDR), assetsToValue(assetToBridge));\n    output.set_data_hash(wasm.DataHash.from_bytes(Buffer.from(\"923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec\", \"hex\")))\n    outputs.add(output);\n\n\n\n\n\n    // create output UTXOs for sending the remaining Ada, Ramanujam and Hopper to self\n    outputs.add(\n      wasm.TransactionOutput.new(\n        address.to_address(),\n        assetsToValue([\n          { unit: \"lovelace\", quantity: outputAda.to_str() },\n          { unit: RAMANUJAM_POLICY_ID + \"RAMANUJAM\", quantity: remainingRamanujam.to_str() },\n          { unit: HOPPER_POLICY_ID + \"HOPPER\", quantity: remainingHopper.to_str() },\n        ])\n      )\n    )\n    // adding the output UTXOs to the transaction\n    for (let i = 0; i < outputs.len(); i++) {\n      txBuilder.add_output(outputs.get(i));\n    }\n\n\n\n    // setting fee for the transaction\n    txBuilder.set_fee(wasm.BigNum.from_str(FEE))\n\n\n    // adding metadata to the transaction\n    let aux_data;\n    const metadata = { \"1000\": { \"address\": addrAL } }\n    aux_data = wasm.AuxiliaryData.new();\n    const generalMetadata = wasm.GeneralTransactionMetadata.new();\n    Object.keys(metadata).forEach((label) => {\n      generalMetadata.insert(\n        wasm.BigNum.from_str(label),\n        wasm.encode_json_str_to_metadatum(\n          JSON.stringify(metadata[label]),\n          1\n        )\n      );\n    });\n    aux_data.set_metadata(generalMetadata);\n    txBuilder.set_auxiliary_data(aux_data);\n\n\n\n\n\n\n\n\n    // building tx body without witness\n    const txBody = txBuilder.build();\n\n\n    // getting witnesses\n    const transactionWitnessSet = wasm.TransactionWitnessSet.new();\n    const tx = wasm.Transaction.new(\n      txBody,\n      wasm.TransactionWitnessSet.from_bytes(\n        transactionWitnessSet.to_bytes()\n      ),\n      aux_data\n    );\n    let txVkeyWitnesses = await window.cardano.signTx(\n      toHex(tx.to_bytes()),\n      true\n    );\n    txVkeyWitnesses = wasm.TransactionWitnessSet.from_bytes(\n      fromHex(txVkeyWitnesses)\n    );\n    transactionWitnessSet.set_vkeys(txVkeyWitnesses.vkeys());\n\n\n    // signing transaction\n    const signedTx = wasm.Transaction.new(\n      tx.body(),\n      transactionWitnessSet,\n      tx.auxiliary_data()\n    );\n\n    // submitting transaction\n    await window.cardano.submitTx(toHex(signedTx.to_bytes()));\n\n\n  }\n\n\n  // @info converting asset to value format specified by Cardano\n  // @params assets - specifies the policy ID of the token and the quantity of tokens for each of the asset to be sent\n  function assetsToValue(assets) {\n    const multiAsset = wasm.MultiAsset.new();\n    const lovelace = assets.find((asset) => asset.unit === \"lovelace\");\n    const policies = [\n      ...new Set(\n        assets\n          .filter((asset) => asset.unit !== \"lovelace\")\n          .map((asset) => asset.unit.slice(0, 56))\n      ),\n    ];\n    policies.forEach((policy) => {\n      const policyAssets = assets.filter(\n        (asset) => asset.unit.slice(0, 56) === policy\n      );\n      const assetsValue = wasm.Assets.new();\n      policyAssets.forEach((asset) => {\n        assetsValue.insert(\n          wasm.AssetName.new(Buffer.from(asset.unit.slice(56))),\n          wasm.BigNum.from_str(asset.quantity)\n        );\n      });\n      multiAsset.insert(\n        wasm.ScriptHash.from_bytes(Buffer.from(policy, \"hex\")),\n        assetsValue\n      );\n    });\n    const value = wasm.Value.new(\n      wasm.BigNum.from_str(lovelace ? lovelace.quantity : \"0\")\n    );\n    if (assets.length > 1 || !lovelace) value.set_multiasset(multiAsset);\n    return value;\n  }\n\n  // @info checking the equality between two uint8array\n  // @params (buf1, buf2) - pair of uint8array to be compared\n  function equal(buf1, buf2) {\n    if (buf1.byteLength != buf2.byteLength) return false;\n    var dv1 = new Int8Array(buf1);\n    var dv2 = new Int8Array(buf2);\n    for (var i = 0; i != buf1.byteLength; i++) {\n      if (dv1[i] != dv2[i]) return false;\n    }\n    return true;\n  }\n\n  const bridgeTokenText = () => {\n    if (bridgeToken === 0) {\n      return \"Which Token?\"\n    } else if (bridgeToken === 1) {\n      return \"Ramanujam\"\n    }\n    return \"Hopper\"\n\n  }\n\n\n\n\n  // @info connects with the Metamask\n  async function connectmetamask() {\n    if (window.ethereum) {\n      try {\n        const accounts = (await window.ethereum.request({ method: 'eth_requestAccounts' }))[0];\n        console.log(accounts)\n        setL2SenderAddress(accounts);\n      } catch (e) {\n        alert(e.toString());\n      }\n    }\n  }\n\n\n  // @info for withdrawing tokens specified by the user in the UI  from L2 to Cardano\n  async function withdrawtokens() {\n    try {\n      console.log(\"Enter more code here!\")\n      console.log(withdrawalTokenName)\n      console.log(withdrawalTokenAmt)\n      console.log(cardanoReceiverAddress)\n\n      // determining which token contract address to use\n      var tokenContractAddr;\n      if (withdrawalTokenName == 'HOPPER') {\n        tokenContractAddr = HOPPER_CONTRACT_ADDR\n      } else if (withdrawalTokenName == 'RAMANUJAM') {\n        tokenContractAddr = RAMANUJAM_CONTRACT_ADDR\n      } else {\n        console.log(\"Please enter something legit!\")\n      }\n\n      // estimating gas\n      const gasEstimate = await l2BridgeContract.methods.withdrawal(tokenContractAddr, withdrawalTokenAmt, cardanoReceiverAddress).estimateGas({ from: l2SenderAddress, to: L2BRIDGE_ADDR })\n      console.log(gasEstimate)\n\n      // constructing transaction\n      const tx = {\n        'from': l2SenderAddress,\n        'to': L2BRIDGE_ADDR,\n        'gas': \"0x\" + gasEstimate.toString(16),\n        'data': l2BridgeContract.methods.withdrawal(tokenContractAddr, withdrawalTokenAmt, cardanoReceiverAddress).encodeABI(),\n        'chainId': '0x420'\n      };\n\n      console.log(l2SenderAddress)\n      console.log(tx)\n      // sending transaction\n      const transactionHash = await window.ethereum.request({ method: 'eth_sendTransaction', params: [tx], });\n\n      console.log(transactionHash);\n\n\n    } catch (e) {\n      alert(e.toString());\n    }\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <DropdownButton id=\"dropdown-basic-button\" title=\"Dropdown button\" >\n          <Dropdown.Item href=\"#/action-1\" button onclick={connectnami}>NamiWallet</Dropdown.Item>\n          <Dropdown.Item href=\"#/action-2\" button onClick={connectmetamask} >Metamask</Dropdown.Item>\n        </DropdownButton>\n\n\n\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {/* <p> \n          Edit <code>src/App.js</code> and save to reload.\n        </p> */}\n        <Container>\n          <Row>\n            <Col></Col>\n            <Col xs={6}>\n\n\n\n              <ButtonGroup aria-label=\"Basic example\">\n                <Button variant=\"secondary\" onClick={() => setDeposit(true)}>Deposit</Button>\n                <Button variant=\"secondary\" onClick={() => setDeposit(false)}>Withdraw</Button>\n\n              </ButtonGroup>\n\n              <div style={{ height: 25 }}></div>\n\n\n\n              {\n                deposit ?\n                  <>\n                    <InputGroup className=\"mb-3\" >\n                      <InputGroup.Text id=\"basic-addon1\">Amount of Ramanujam</InputGroup.Text>\n                      <FormControl\n                        value={bridgeRamanujam}\n                        onChange={(ev) => {\n                          if (/^[0-9]{0,40}$/.test(ev.target.value)) {\n                            setBridgeRamanujamAmount(ev.target.value)\n                          }\n                        }}\n                        placeholder=\"Amount\"\n                        aria-label=\"Username\"\n                        aria-describedby=\"basic-addon1\"\n                      />\n                    </InputGroup>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text id=\"basic-addon1\">Amount of Hopper</InputGroup.Text>\n                      <FormControl\n                        value={bridgeHopper}\n                        onChange={(ev) => {\n                          if (/^[0-9]{0,40}$/.test(ev.target.value)) {\n                            setBridgeHopperAmount(ev.target.value)\n                          }\n                        }}\n                        placeholder=\"Amount\"\n                        aria-label=\"Username\"\n                        aria-describedby=\"basic-addon1\"\n                      />\n                    </InputGroup>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text id=\"basic-addon1\">Amount of Ada</InputGroup.Text>\n                      <FormControl\n                        value={bridgeAda} onChange={(ev) => {\n                          // console.log(ev.target.value, /^[1-9]{0,40}$/.test(ev.target.value))\n                          if (/^[0-9]{0,40}$/.test(ev.target.value)) {\n                            setBridgeAdaAmount(ev.target.value)\n                          }\n                        }}\n                        placeholder=\"Amount\"\n                        aria-label=\"Username\"\n                        aria-describedby=\"basic-addon1\"\n                      />\n                    </InputGroup>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text id=\"basic-addon1\">AceLayr Address</InputGroup.Text>\n                      <FormControl\n                        value={addrAL} onChange={(ev) => {\n                          if (/^0x[a-fA-F0-9]{0,40}$/.test(ev.target.value)) {\n                            setAddrAceLayr(ev.target.value)\n                          }\n                        }}\n                        placeholder=\"Address\"\n                        aria-label=\"Username\"\n                        aria-describedby=\"basic-addon1\"\n                      />\n                    </InputGroup>\n\n                    <button onClick={bridgeTokens} >Bridge Tokens</button>\n                  </>\n                  : <>\n                    <Dropdown>\n                      <Dropdown.Toggle variant=\"success\" id=\"Which-Token\">\n\n                      {bridgeTokenText()}\n                      </Dropdown.Toggle>\n\n                      <Dropdown.Menu title=\"Which Token?\">\n\n                        <Dropdown.Item href=\"#/action-1\" onClick={() => setBridgeToken(1)}>Ramanujam</Dropdown.Item>\n                        <Dropdown.Item href=\"#/action-2\" onClick={() => setBridgeToken(2)}>Hopper</Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n\n                    <div style={{ height: 25 }}></div>\n\n\n                    {/* <InputGroup className=\"mb-3\">\n                      <InputGroup.Text id=\"basic-addon1\">Which Token?</InputGroup.Text>\n                      <FormControl\n                        value={withdrawalTokenName}\n                        onChange={(ev) => {\n                          if (/^[a-zA-Z]{0,40}$/.test(ev.target.value)) {\n                            setWithdrawalTokenName(ev.target.value)\n                          }\n                        }}\n                        placeholder=\"Name\"\n                        aria-label=\"Username\"\n                        aria-describedby=\"basic-addon1\"\n                      />\n                    </InputGroup> */}\n\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text id=\"basic-addon1\">Amount of Token</InputGroup.Text>\n                      <FormControl\n                        value={withdrawalTokenAmt}\n                        onChange={(ev) => {\n                          if (/^[0-9]{0,40}$/.test(ev.target.value)) {\n                            setWithdrawalTokenAmt(ev.target.value)\n                          }\n                        }}\n                        placeholder=\"Amount\"\n                        aria-label=\"Username\"\n                        aria-describedby=\"basic-addon1\"\n                      />\n                    </InputGroup>\n\n\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text id=\"basic-addon1\">Cardano Rx Address</InputGroup.Text>\n                      <FormControl\n                        value={cardanoReceiverAddress}\n                        onChange={(ev) => {\n                          if (/^0x[a-fA-F0-9]{0,40}$/.test(ev.target.value)) {\n                            setCardanoReceiverAddress(ev.target.value)\n                          }\n                        }}\n                        placeholder=\"Amount\"\n                        aria-label=\"Username\"\n                        aria-describedby=\"basic-addon1\"\n                      />\n                    </InputGroup>\n\n                    {/* for withdrawing from L2 */}\n                    <button onClick={withdrawtokens} >Withdraw Tokens</button>;\n\n                  </>\n              }\n\n\n              {/* Withdrawal Fields */}\n\n\n            </Col>\n            <Col></Col>\n          </Row>\n        </Container>\n\n\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactj.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {l2SenderAddress.toString()}\n        </a>\n      </header>\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}