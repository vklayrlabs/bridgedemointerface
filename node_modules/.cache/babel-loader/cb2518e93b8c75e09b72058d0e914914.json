{"ast":null,"code":"import * as wasm from './cardano_serialization_lib_bg.wasm';\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) {\n  return heap[idx];\n}\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\n\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\nlet cachedTextEncoder = new TextEncoder('utf-8');\nconst encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  const buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === undefined) {\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = malloc(buf.length);\n    getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n  }\n\n  let len = arg.length;\n  let ptr = malloc(len);\n  const mem = getUint8Memory0();\n  let offset = 0;\n\n  for (; offset < len; offset++) {\n    const code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    const ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\n\nfunction isLikeNone(x) {\n  return x === undefined || x === null;\n}\n\nlet cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory0;\n}\n\nfunction debugString(val) {\n  // primitive types\n  const type = typeof val;\n\n  if (type == 'number' || type == 'boolean' || val == null) {\n    return `${val}`;\n  }\n\n  if (type == 'string') {\n    return `\"${val}\"`;\n  }\n\n  if (type == 'symbol') {\n    const description = val.description;\n\n    if (description == null) {\n      return 'Symbol';\n    } else {\n      return `Symbol(${description})`;\n    }\n  }\n\n  if (type == 'function') {\n    const name = val.name;\n\n    if (typeof name == 'string' && name.length > 0) {\n      return `Function(${name})`;\n    } else {\n      return 'Function';\n    }\n  } // objects\n\n\n  if (Array.isArray(val)) {\n    const length = val.length;\n    let debug = '[';\n\n    if (length > 0) {\n      debug += debugString(val[0]);\n    }\n\n    for (let i = 1; i < length; i++) {\n      debug += ', ' + debugString(val[i]);\n    }\n\n    debug += ']';\n    return debug;\n  } // Test for built-in\n\n\n  const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n  let className;\n\n  if (builtInMatches.length > 1) {\n    className = builtInMatches[1];\n  } else {\n    // Failed to match the standard '[object ClassName]'\n    return toString.call(val);\n  }\n\n  if (className == 'Object') {\n    // we're a user defined class or Object\n    // JSON.stringify avoids problems with cycles, and is generally much\n    // easier than looping through ownProperties of `val`.\n    try {\n      return 'Object(' + JSON.stringify(val) + ')';\n    } catch (_) {\n      return 'Object';\n    }\n  } // errors\n\n\n  if (val instanceof Error) {\n    return `${val.name}: ${val.message}\\n${val.stack}`;\n  } // TODO we could test for more things here, like `Set`s and `Map`s.\n\n\n  return className;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n  return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n  const ptr = malloc(arg.length * 1);\n  getUint8Memory0().set(arg, ptr / 1);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n  if (!(instance instanceof klass)) {\n    throw new Error(`expected instance of ${klass.name}`);\n  }\n\n  return instance.ptr;\n}\n\nlet cachegetUint32Memory0 = null;\n\nfunction getUint32Memory0() {\n  if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n  return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n  const ptr = malloc(arg.length * 4);\n  getUint32Memory0().set(arg, ptr / 4);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n/**\n* @param {Uint8Array} bytes\n* @returns {TransactionMetadatum}\n*/\n\n\nexport function encode_arbitrary_bytes_as_metadatum(bytes) {\n  var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n  var len0 = WASM_VECTOR_LEN;\n  var ret = wasm.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\n  return TransactionMetadatum.__wrap(ret);\n}\n/**\n* @param {TransactionMetadatum} metadata\n* @returns {Uint8Array}\n*/\n\nexport function decode_arbitrary_bytes_from_metadatum(metadata) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    _assertClass(metadata, TransactionMetadatum);\n\n    wasm.decode_arbitrary_bytes_from_metadatum(retptr, metadata.ptr);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\n/**\n* @param {string} json\n* @param {number} schema\n* @returns {TransactionMetadatum}\n*/\n\nexport function encode_json_str_to_metadatum(json, schema) {\n  var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  var ret = wasm.encode_json_str_to_metadatum(ptr0, len0, schema);\n  return TransactionMetadatum.__wrap(ret);\n}\n/**\n* @param {TransactionMetadatum} metadatum\n* @param {number} schema\n* @returns {string}\n*/\n\nexport function decode_metadatum_to_json_str(metadatum, schema) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    _assertClass(metadatum, TransactionMetadatum);\n\n    wasm.decode_metadatum_to_json_str(retptr, metadatum.ptr, schema);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}\n/**\n* @param {string} password\n* @param {string} salt\n* @param {string} nonce\n* @param {string} data\n* @returns {string}\n*/\n\nexport function encrypt_with_password(password, salt, nonce, data) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len3 = WASM_VECTOR_LEN;\n    wasm.encrypt_with_password(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}\n/**\n* @param {string} password\n* @param {string} data\n* @returns {string}\n*/\n\nexport function decrypt_with_password(password, data) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.decrypt_with_password(retptr, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}\n/**\n* @param {Transaction} tx\n* @param {LinearFee} linear_fee\n* @returns {BigNum}\n*/\n\nexport function min_fee(tx, linear_fee) {\n  _assertClass(tx, Transaction);\n\n  _assertClass(linear_fee, LinearFee);\n\n  var ret = wasm.min_fee(tx.ptr, linear_fee.ptr);\n  return BigNum.__wrap(ret);\n}\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {LegacyDaedalusPrivateKey} key\n* @returns {BootstrapWitness}\n*/\n\nexport function make_daedalus_bootstrap_witness(tx_body_hash, addr, key) {\n  _assertClass(tx_body_hash, TransactionHash);\n\n  _assertClass(addr, ByronAddress);\n\n  _assertClass(key, LegacyDaedalusPrivateKey);\n\n  var ret = wasm.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n  return BootstrapWitness.__wrap(ret);\n}\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {Bip32PrivateKey} key\n* @returns {BootstrapWitness}\n*/\n\nexport function make_icarus_bootstrap_witness(tx_body_hash, addr, key) {\n  _assertClass(tx_body_hash, TransactionHash);\n\n  _assertClass(addr, ByronAddress);\n\n  _assertClass(key, Bip32PrivateKey);\n\n  var ret = wasm.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n  return BootstrapWitness.__wrap(ret);\n}\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {PrivateKey} sk\n* @returns {Vkeywitness}\n*/\n\nexport function make_vkey_witness(tx_body_hash, sk) {\n  _assertClass(tx_body_hash, TransactionHash);\n\n  _assertClass(sk, PrivateKey);\n\n  var ret = wasm.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\n  return Vkeywitness.__wrap(ret);\n}\n/**\n* @param {AuxiliaryData} auxiliary_data\n* @returns {AuxiliaryDataHash}\n*/\n\nexport function hash_auxiliary_data(auxiliary_data) {\n  _assertClass(auxiliary_data, AuxiliaryData);\n\n  var ret = wasm.hash_auxiliary_data(auxiliary_data.ptr);\n  return AuxiliaryDataHash.__wrap(ret);\n}\n/**\n* @param {TransactionBody} tx_body\n* @returns {TransactionHash}\n*/\n\nexport function hash_transaction(tx_body) {\n  _assertClass(tx_body, TransactionBody);\n\n  var ret = wasm.hash_transaction(tx_body.ptr);\n  return TransactionHash.__wrap(ret);\n}\n/**\n* @param {PlutusData} plutus_data\n* @returns {DataHash}\n*/\n\nexport function hash_plutus_data(plutus_data) {\n  _assertClass(plutus_data, PlutusData);\n\n  var ret = wasm.hash_plutus_data(plutus_data.ptr);\n  return DataHash.__wrap(ret);\n}\n/**\n* @param {Redeemers} redeemers\n* @param {Costmdls} cost_models\n* @param {PlutusList | undefined} datums\n* @returns {ScriptDataHash}\n*/\n\nexport function hash_script_data(redeemers, cost_models, datums) {\n  _assertClass(redeemers, Redeemers);\n\n  _assertClass(cost_models, Costmdls);\n\n  let ptr0 = 0;\n\n  if (!isLikeNone(datums)) {\n    _assertClass(datums, PlutusList);\n\n    ptr0 = datums.ptr;\n    datums.ptr = 0;\n  }\n\n  var ret = wasm.hash_script_data(redeemers.ptr, cost_models.ptr, ptr0);\n  return ScriptDataHash.__wrap(ret);\n}\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {Value}\n*/\n\nexport function get_implicit_input(txbody, pool_deposit, key_deposit) {\n  _assertClass(txbody, TransactionBody);\n\n  _assertClass(pool_deposit, BigNum);\n\n  _assertClass(key_deposit, BigNum);\n\n  var ret = wasm.get_implicit_input(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n  return Value.__wrap(ret);\n}\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {BigNum}\n*/\n\nexport function get_deposit(txbody, pool_deposit, key_deposit) {\n  _assertClass(txbody, TransactionBody);\n\n  _assertClass(pool_deposit, BigNum);\n\n  _assertClass(key_deposit, BigNum);\n\n  var ret = wasm.get_deposit(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n  return BigNum.__wrap(ret);\n}\n/**\n* @param {Value} assets\n* @param {BigNum} minimum_utxo_val\n* @returns {BigNum}\n*/\n\nexport function min_ada_required(assets, minimum_utxo_val) {\n  _assertClass(assets, Value);\n\n  _assertClass(minimum_utxo_val, BigNum);\n\n  var ret = wasm.min_ada_required(assets.ptr, minimum_utxo_val.ptr);\n  return BigNum.__wrap(ret);\n}\n/**\n*/\n\nexport const CertificateKind = Object.freeze({\n  StakeRegistration: 0,\n  \"0\": \"StakeRegistration\",\n  StakeDeregistration: 1,\n  \"1\": \"StakeDeregistration\",\n  StakeDelegation: 2,\n  \"2\": \"StakeDelegation\",\n  PoolRegistration: 3,\n  \"3\": \"PoolRegistration\",\n  PoolRetirement: 4,\n  \"4\": \"PoolRetirement\",\n  GenesisKeyDelegation: 5,\n  \"5\": \"GenesisKeyDelegation\",\n  MoveInstantaneousRewardsCert: 6,\n  \"6\": \"MoveInstantaneousRewardsCert\"\n});\n/**\n*/\n\nexport const MIRPot = Object.freeze({\n  Reserves: 0,\n  \"0\": \"Reserves\",\n  Treasury: 1,\n  \"1\": \"Treasury\"\n});\n/**\n*/\n\nexport const MIRKind = Object.freeze({\n  ToOtherPot: 0,\n  \"0\": \"ToOtherPot\",\n  ToStakeCredentials: 1,\n  \"1\": \"ToStakeCredentials\"\n});\n/**\n*/\n\nexport const RelayKind = Object.freeze({\n  SingleHostAddr: 0,\n  \"0\": \"SingleHostAddr\",\n  SingleHostName: 1,\n  \"1\": \"SingleHostName\",\n  MultiHostName: 2,\n  \"2\": \"MultiHostName\"\n});\n/**\n*/\n\nexport const NativeScriptKind = Object.freeze({\n  ScriptPubkey: 0,\n  \"0\": \"ScriptPubkey\",\n  ScriptAll: 1,\n  \"1\": \"ScriptAll\",\n  ScriptAny: 2,\n  \"2\": \"ScriptAny\",\n  ScriptNOfK: 3,\n  \"3\": \"ScriptNOfK\",\n  TimelockStart: 4,\n  \"4\": \"TimelockStart\",\n  TimelockExpiry: 5,\n  \"5\": \"TimelockExpiry\"\n});\n/**\n* Each new language uses a different namespace for hashing its script\n* This is because you could have a language where the same bytes have different semantics\n* So this avoids scripts in different languages mapping to the same hash\n* Note that the enum value here is different than the enum value for deciding the cost model of a script\n*/\n\nexport const ScriptHashNamespace = Object.freeze({\n  NativeScript: 0,\n  \"0\": \"NativeScript\"\n});\n/**\n*/\n\nexport const NetworkIdKind = Object.freeze({\n  Testnet: 0,\n  \"0\": \"Testnet\",\n  Mainnet: 1,\n  \"1\": \"Mainnet\"\n});\n/**\n*/\n\nexport const TransactionMetadatumKind = Object.freeze({\n  MetadataMap: 0,\n  \"0\": \"MetadataMap\",\n  MetadataList: 1,\n  \"1\": \"MetadataList\",\n  Int: 2,\n  \"2\": \"Int\",\n  Bytes: 3,\n  \"3\": \"Bytes\",\n  Text: 4,\n  \"4\": \"Text\"\n});\n/**\n*/\n\nexport const MetadataJsonSchema = Object.freeze({\n  NoConversions: 0,\n  \"0\": \"NoConversions\",\n  BasicConversions: 1,\n  \"1\": \"BasicConversions\",\n  DetailedSchema: 2,\n  \"2\": \"DetailedSchema\"\n});\n/**\n*/\n\nexport const LanguageKind = Object.freeze({\n  PlutusV1: 0,\n  \"0\": \"PlutusV1\"\n});\n/**\n*/\n\nexport const PlutusDataKind = Object.freeze({\n  ConstrPlutusData: 0,\n  \"0\": \"ConstrPlutusData\",\n  Map: 1,\n  \"1\": \"Map\",\n  List: 2,\n  \"2\": \"List\",\n  Integer: 3,\n  \"3\": \"Integer\",\n  Bytes: 4,\n  \"4\": \"Bytes\"\n});\n/**\n*/\n\nexport const RedeemerTagKind = Object.freeze({\n  Spend: 0,\n  \"0\": \"Spend\",\n  Mint: 1,\n  \"1\": \"Mint\",\n  Cert: 2,\n  \"2\": \"Cert\",\n  Reward: 3,\n  \"3\": \"Reward\"\n});\n/**\n*/\n\nexport class Address {\n  static __wrap(ptr) {\n    const obj = Object.create(Address.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_address_free(ptr);\n  }\n  /**\n  * @param {Uint8Array} data\n  * @returns {Address}\n  */\n\n\n  static from_bytes(data) {\n    var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.address_from_bytes(ptr0, len0);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.address_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string | undefined} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.address_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {Address}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.address_from_bech32(ptr0, len0);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  network_id() {\n    var ret = wasm.address_network_id(this.ptr);\n    return ret;\n  }\n\n}\n/**\n*/\n\nexport class AssetName {\n  static __wrap(ptr) {\n    const obj = Object.create(AssetName.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_assetname_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.assetname_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {AssetName}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.assetname_from_bytes(ptr0, len0);\n    return AssetName.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} name\n  * @returns {AssetName}\n  */\n\n\n  static new(name) {\n    var ptr0 = passArray8ToWasm0(name, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.assetname_new(ptr0, len0);\n    return AssetName.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  name() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.assetname_name(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n\n}\n/**\n*/\n\nexport class AssetNames {\n  static __wrap(ptr) {\n    const obj = Object.create(AssetNames.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_assetnames_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.assetnames_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {AssetNames}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.assetnames_from_bytes(ptr0, len0);\n    return AssetNames.__wrap(ret);\n  }\n  /**\n  * @returns {AssetNames}\n  */\n\n\n  static new() {\n    var ret = wasm.assetnames_new();\n    return AssetNames.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.assetnames_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {AssetName}\n  */\n\n\n  get(index) {\n    var ret = wasm.assetnames_get(this.ptr, index);\n    return AssetName.__wrap(ret);\n  }\n  /**\n  * @param {AssetName} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, AssetName);\n\n    wasm.assetnames_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class Assets {\n  static __wrap(ptr) {\n    const obj = Object.create(Assets.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_assets_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.assets_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Assets}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.assets_from_bytes(ptr0, len0);\n    return Assets.__wrap(ret);\n  }\n  /**\n  * @returns {Assets}\n  */\n\n\n  static new() {\n    var ret = wasm.assets_new();\n    return Assets.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.assets_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {AssetName} key\n  * @param {BigNum} value\n  * @returns {BigNum | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, AssetName);\n\n    _assertClass(value, BigNum);\n\n    var ret = wasm.assets_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {AssetName} key\n  * @returns {BigNum | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, AssetName);\n\n    var ret = wasm.assets_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {AssetNames}\n  */\n\n\n  keys() {\n    var ret = wasm.assets_keys(this.ptr);\n    return AssetNames.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class AuxiliaryData {\n  static __wrap(ptr) {\n    const obj = Object.create(AuxiliaryData.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_auxiliarydata_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.auxiliarydata_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {AuxiliaryData}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.auxiliarydata_from_bytes(ptr0, len0);\n    return AuxiliaryData.__wrap(ret);\n  }\n  /**\n  * @returns {AuxiliaryData}\n  */\n\n\n  static new() {\n    var ret = wasm.auxiliarydata_new();\n    return AuxiliaryData.__wrap(ret);\n  }\n  /**\n  * @returns {GeneralTransactionMetadata | undefined}\n  */\n\n\n  metadata() {\n    var ret = wasm.auxiliarydata_metadata(this.ptr);\n    return ret === 0 ? undefined : GeneralTransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @param {GeneralTransactionMetadata} metadata\n  */\n\n\n  set_metadata(metadata) {\n    _assertClass(metadata, GeneralTransactionMetadata);\n\n    wasm.auxiliarydata_set_metadata(this.ptr, metadata.ptr);\n  }\n  /**\n  * @returns {NativeScripts | undefined}\n  */\n\n\n  native_scripts() {\n    var ret = wasm.auxiliarydata_native_scripts(this.ptr);\n    return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n  }\n  /**\n  * @param {NativeScripts} native_scripts\n  */\n\n\n  set_native_scripts(native_scripts) {\n    _assertClass(native_scripts, NativeScripts);\n\n    wasm.auxiliarydata_set_native_scripts(this.ptr, native_scripts.ptr);\n  }\n  /**\n  * @returns {PlutusScripts | undefined}\n  */\n\n\n  plutus_scripts() {\n    var ret = wasm.auxiliarydata_plutus_scripts(this.ptr);\n    return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n  }\n  /**\n  * @param {PlutusScripts} plutus_scripts\n  */\n\n\n  set_plutus_scripts(plutus_scripts) {\n    _assertClass(plutus_scripts, PlutusScripts);\n\n    wasm.auxiliarydata_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n  }\n\n}\n/**\n*/\n\nexport class AuxiliaryDataHash {\n  static __wrap(ptr) {\n    const obj = Object.create(AuxiliaryDataHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_auxiliarydatahash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {AuxiliaryDataHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.auxiliarydatahash_from_bech32(ptr0, len0);\n    return AuxiliaryDataHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {AuxiliaryDataHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.auxiliarydatahash_from_bytes(ptr0, len0);\n    return AuxiliaryDataHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class AuxiliaryDataSet {\n  static __wrap(ptr) {\n    const obj = Object.create(AuxiliaryDataSet.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_auxiliarydataset_free(ptr);\n  }\n  /**\n  * @returns {AuxiliaryDataSet}\n  */\n\n\n  static new() {\n    var ret = wasm.auxiliarydataset_new();\n    return AuxiliaryDataSet.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.auxiliarydataset_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} tx_index\n  * @param {AuxiliaryData} data\n  * @returns {AuxiliaryData | undefined}\n  */\n\n\n  insert(tx_index, data) {\n    _assertClass(data, AuxiliaryData);\n\n    var ret = wasm.auxiliarydataset_insert(this.ptr, tx_index, data.ptr);\n    return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n  }\n  /**\n  * @param {number} tx_index\n  * @returns {AuxiliaryData | undefined}\n  */\n\n\n  get(tx_index) {\n    var ret = wasm.auxiliarydataset_get(this.ptr, tx_index);\n    return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n  }\n  /**\n  * @returns {Uint32Array}\n  */\n\n\n  indices() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.auxiliarydataset_indices(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU32FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 4);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n\n}\n/**\n*/\n\nexport class BaseAddress {\n  static __wrap(ptr) {\n    const obj = Object.create(BaseAddress.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_baseaddress_free(ptr);\n  }\n  /**\n  * @param {number} network\n  * @param {StakeCredential} payment\n  * @param {StakeCredential} stake\n  * @returns {BaseAddress}\n  */\n\n\n  static new(network, payment, stake) {\n    _assertClass(payment, StakeCredential);\n\n    _assertClass(stake, StakeCredential);\n\n    var ret = wasm.baseaddress_new(network, payment.ptr, stake.ptr);\n    return BaseAddress.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  payment_cred() {\n    var ret = wasm.baseaddress_payment_cred(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  stake_cred() {\n    var ret = wasm.baseaddress_stake_cred(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  to_address() {\n    var ret = wasm.baseaddress_to_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @param {Address} addr\n  * @returns {BaseAddress | undefined}\n  */\n\n\n  static from_address(addr) {\n    _assertClass(addr, Address);\n\n    var ret = wasm.baseaddress_from_address(addr.ptr);\n    return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class BigInt {\n  static __wrap(ptr) {\n    const obj = Object.create(BigInt.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_bigint_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bigint_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {BigInt}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bigint_from_bytes(ptr0, len0);\n    return BigInt.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  as_u64() {\n    var ret = wasm.bigint_as_u64(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {string} text\n  * @returns {BigInt}\n  */\n\n\n  static from_str(text) {\n    var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bigint_from_str(ptr0, len0);\n    return BigInt.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_str() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bigint_to_str(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n\n}\n/**\n*/\n\nexport class BigNum {\n  static __wrap(ptr) {\n    const obj = Object.create(BigNum.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_bignum_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bignum_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {BigNum}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bignum_from_bytes(ptr0, len0);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {string} string\n  * @returns {BigNum}\n  */\n\n\n  static from_str(string) {\n    var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bignum_from_str(ptr0, len0);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_str() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bignum_to_str(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  static zero() {\n    var ret = wasm.bignum_zero();\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} other\n  * @returns {BigNum}\n  */\n\n\n  checked_mul(other) {\n    _assertClass(other, BigNum);\n\n    var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} other\n  * @returns {BigNum}\n  */\n\n\n  checked_add(other) {\n    _assertClass(other, BigNum);\n\n    var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} other\n  * @returns {BigNum}\n  */\n\n\n  checked_sub(other) {\n    _assertClass(other, BigNum);\n\n    var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * returns 0 if it would otherwise underflow\n  * @param {BigNum} other\n  * @returns {BigNum}\n  */\n\n\n  clamped_sub(other) {\n    _assertClass(other, BigNum);\n\n    var ret = wasm.bignum_clamped_sub(this.ptr, other.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} rhs_value\n  * @returns {number}\n  */\n\n\n  compare(rhs_value) {\n    _assertClass(rhs_value, BigNum);\n\n    var ret = wasm.bignum_compare(this.ptr, rhs_value.ptr);\n    return ret;\n  }\n\n}\n/**\n*/\n\nexport class Bip32PrivateKey {\n  static __wrap(ptr) {\n    const obj = Object.create(Bip32PrivateKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_bip32privatekey_free(ptr);\n  }\n  /**\n  * derive this private key with the given index.\n  *\n  * # Security considerations\n  *\n  * * hard derivation index cannot be soft derived with the public key\n  *\n  * # Hard derivation vs Soft derivation\n  *\n  * If you pass an index below 0x80000000 then it is a soft derivation.\n  * The advantage of soft derivation is that it is possible to derive the\n  * public key too. I.e. derivation the private key with a soft derivation\n  * index and then retrieving the associated public key is equivalent to\n  * deriving the public key associated to the parent private key.\n  *\n  * Hard derivation index does not allow public key derivation.\n  *\n  * This is why deriving the private key should not fail while deriving\n  * the public key may fail (if the derivation index is invalid).\n  * @param {number} index\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  derive(index) {\n    var ret = wasm.bip32privatekey_derive(this.ptr, index);\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * 128-byte xprv a key format in Cardano that some software still uses or requires\n  * the traditional 96-byte xprv is simply encoded as\n  * prv | chaincode\n  * however, because some software may not know how to compute a public key from a private key,\n  * the 128-byte inlines the public key in the following format\n  * prv | pub | chaincode\n  * so be careful if you see the term \"xprv\" as it could refer to either one\n  * our library does not require the pub (instead we compute the pub key when needed)\n  * @param {Uint8Array} bytes\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  static from_128_xprv(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32privatekey_from_128_xprv(ptr0, len0);\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * see from_128_xprv\n  * @returns {Uint8Array}\n  */\n\n\n  to_128_xprv() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bip32privatekey_to_128_xprv(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  static generate_ed25519_bip32() {\n    var ret = wasm.bip32privatekey_generate_ed25519_bip32();\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {PrivateKey}\n  */\n\n\n  to_raw_key() {\n    var ret = wasm.bip32privatekey_to_raw_key(this.ptr);\n    return PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {Bip32PublicKey}\n  */\n\n\n  to_public() {\n    var ret = wasm.bip32privatekey_to_public(this.ptr);\n    return Bip32PublicKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32privatekey_from_bytes(ptr0, len0);\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bip32privatekey_as_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} bech32_str\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  static from_bech32(bech32_str) {\n    var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32privatekey_from_bech32(ptr0, len0);\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_bech32() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bip32privatekey_to_bech32(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {Uint8Array} entropy\n  * @param {Uint8Array} password\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  static from_bip39_entropy(entropy, password) {\n    var ptr0 = passArray8ToWasm0(entropy, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(password, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  chaincode() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bip32privatekey_chaincode(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n\n}\n/**\n*/\n\nexport class Bip32PublicKey {\n  static __wrap(ptr) {\n    const obj = Object.create(Bip32PublicKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_bip32publickey_free(ptr);\n  }\n  /**\n  * derive this public key with the given index.\n  *\n  * # Errors\n  *\n  * If the index is not a soft derivation index (< 0x80000000) then\n  * calling this method will fail.\n  *\n  * # Security considerations\n  *\n  * * hard derivation index cannot be soft derived with the public key\n  *\n  * # Hard derivation vs Soft derivation\n  *\n  * If you pass an index below 0x80000000 then it is a soft derivation.\n  * The advantage of soft derivation is that it is possible to derive the\n  * public key too. I.e. derivation the private key with a soft derivation\n  * index and then retrieving the associated public key is equivalent to\n  * deriving the public key associated to the parent private key.\n  *\n  * Hard derivation index does not allow public key derivation.\n  *\n  * This is why deriving the private key should not fail while deriving\n  * the public key may fail (if the derivation index is invalid).\n  * @param {number} index\n  * @returns {Bip32PublicKey}\n  */\n\n\n  derive(index) {\n    var ret = wasm.bip32publickey_derive(this.ptr, index);\n    return Bip32PublicKey.__wrap(ret);\n  }\n  /**\n  * @returns {PublicKey}\n  */\n\n\n  to_raw_key() {\n    var ret = wasm.bip32publickey_to_raw_key(this.ptr);\n    return PublicKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Bip32PublicKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32publickey_from_bytes(ptr0, len0);\n    return Bip32PublicKey.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bip32publickey_as_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} bech32_str\n  * @returns {Bip32PublicKey}\n  */\n\n\n  static from_bech32(bech32_str) {\n    var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32publickey_from_bech32(ptr0, len0);\n    return Bip32PublicKey.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_bech32() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bip32publickey_to_bech32(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  chaincode() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bip32publickey_chaincode(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n\n}\n/**\n*/\n\nexport class Block {\n  static __wrap(ptr) {\n    const obj = Object.create(Block.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_block_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.block_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Block}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.block_from_bytes(ptr0, len0);\n    return Block.__wrap(ret);\n  }\n  /**\n  * @returns {Header}\n  */\n\n\n  header() {\n    var ret = wasm.block_header(this.ptr);\n    return Header.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionBodies}\n  */\n\n\n  transaction_bodies() {\n    var ret = wasm.block_transaction_bodies(this.ptr);\n    return TransactionBodies.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionWitnessSets}\n  */\n\n\n  transaction_witness_sets() {\n    var ret = wasm.block_transaction_witness_sets(this.ptr);\n    return TransactionWitnessSets.__wrap(ret);\n  }\n  /**\n  * @returns {AuxiliaryDataSet}\n  */\n\n\n  auxiliary_data_set() {\n    var ret = wasm.block_auxiliary_data_set(this.ptr);\n    return AuxiliaryDataSet.__wrap(ret);\n  }\n  /**\n  * @returns {Uint32Array}\n  */\n\n\n  invalid_transactions() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.block_invalid_transactions(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU32FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 4);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Header} header\n  * @param {TransactionBodies} transaction_bodies\n  * @param {TransactionWitnessSets} transaction_witness_sets\n  * @param {AuxiliaryDataSet} auxiliary_data_set\n  * @param {Uint32Array} invalid_transactions\n  * @returns {Block}\n  */\n\n\n  static new(header, transaction_bodies, transaction_witness_sets, auxiliary_data_set, invalid_transactions) {\n    _assertClass(header, Header);\n\n    _assertClass(transaction_bodies, TransactionBodies);\n\n    _assertClass(transaction_witness_sets, TransactionWitnessSets);\n\n    _assertClass(auxiliary_data_set, AuxiliaryDataSet);\n\n    var ptr0 = passArray32ToWasm0(invalid_transactions, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, auxiliary_data_set.ptr, ptr0, len0);\n    return Block.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class BlockHash {\n  static __wrap(ptr) {\n    const obj = Object.create(BlockHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_blockhash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.blockhash_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.blockhash_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {BlockHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.blockhash_from_bech32(ptr0, len0);\n    return BlockHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {BlockHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.blockhash_from_bytes(ptr0, len0);\n    return BlockHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class BootstrapWitness {\n  static __wrap(ptr) {\n    const obj = Object.create(BootstrapWitness.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_bootstrapwitness_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bootstrapwitness_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {BootstrapWitness}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bootstrapwitness_from_bytes(ptr0, len0);\n    return BootstrapWitness.__wrap(ret);\n  }\n  /**\n  * @returns {Vkey}\n  */\n\n\n  vkey() {\n    var ret = wasm.bootstrapwitness_vkey(this.ptr);\n    return Vkey.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519Signature}\n  */\n\n\n  signature() {\n    var ret = wasm.bootstrapwitness_signature(this.ptr);\n    return Ed25519Signature.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  chain_code() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  attributes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.bootstrapwitness_attributes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Vkey} vkey\n  * @param {Ed25519Signature} signature\n  * @param {Uint8Array} chain_code\n  * @param {Uint8Array} attributes\n  * @returns {BootstrapWitness}\n  */\n\n\n  static new(vkey, signature, chain_code, attributes) {\n    _assertClass(vkey, Vkey);\n\n    _assertClass(signature, Ed25519Signature);\n\n    var ptr0 = passArray8ToWasm0(chain_code, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(attributes, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\n    return BootstrapWitness.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class BootstrapWitnesses {\n  static __wrap(ptr) {\n    const obj = Object.create(BootstrapWitnesses.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_bootstrapwitnesses_free(ptr);\n  }\n  /**\n  * @returns {BootstrapWitnesses}\n  */\n\n\n  static new() {\n    var ret = wasm.bootstrapwitnesses_new();\n    return BootstrapWitnesses.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.bootstrapwitnesses_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {BootstrapWitness}\n  */\n\n\n  get(index) {\n    var ret = wasm.bootstrapwitnesses_get(this.ptr, index);\n    return BootstrapWitness.__wrap(ret);\n  }\n  /**\n  * @param {BootstrapWitness} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, BootstrapWitness);\n\n    wasm.bootstrapwitnesses_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class ByronAddress {\n  static __wrap(ptr) {\n    const obj = Object.create(ByronAddress.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_byronaddress_free(ptr);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_base58() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.byronaddress_to_base58(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.byronaddress_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ByronAddress}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.byronaddress_from_bytes(ptr0, len0);\n    return ByronAddress.__wrap(ret);\n  }\n  /**\n  * returns the byron protocol magic embedded in the address, or mainnet id if none is present\n  * note: for bech32 addresses, you need to use network_id instead\n  * @returns {number}\n  */\n\n\n  byron_protocol_magic() {\n    var ret = wasm.byronaddress_byron_protocol_magic(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  attributes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.byronaddress_attributes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  network_id() {\n    var ret = wasm.byronaddress_network_id(this.ptr);\n    return ret;\n  }\n  /**\n  * @param {string} s\n  * @returns {ByronAddress}\n  */\n\n\n  static from_base58(s) {\n    var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.byronaddress_from_base58(ptr0, len0);\n    return ByronAddress.__wrap(ret);\n  }\n  /**\n  * @param {Bip32PublicKey} key\n  * @param {number} protocol_magic\n  * @returns {ByronAddress}\n  */\n\n\n  static icarus_from_key(key, protocol_magic) {\n    _assertClass(key, Bip32PublicKey);\n\n    var ret = wasm.byronaddress_icarus_from_key(key.ptr, protocol_magic);\n    return ByronAddress.__wrap(ret);\n  }\n  /**\n  * @param {string} s\n  * @returns {boolean}\n  */\n\n\n  static is_valid(s) {\n    var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.byronaddress_is_valid(ptr0, len0);\n    return ret !== 0;\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  to_address() {\n    var ret = wasm.byronaddress_to_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @param {Address} addr\n  * @returns {ByronAddress | undefined}\n  */\n\n\n  static from_address(addr) {\n    _assertClass(addr, Address);\n\n    var ret = wasm.byronaddress_from_address(addr.ptr);\n    return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Certificate {\n  static __wrap(ptr) {\n    const obj = Object.create(Certificate.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_certificate_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.certificate_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Certificate}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.certificate_from_bytes(ptr0, len0);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {StakeRegistration} stake_registration\n  * @returns {Certificate}\n  */\n\n\n  static new_stake_registration(stake_registration) {\n    _assertClass(stake_registration, StakeRegistration);\n\n    var ret = wasm.certificate_new_stake_registration(stake_registration.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {StakeDeregistration} stake_deregistration\n  * @returns {Certificate}\n  */\n\n\n  static new_stake_deregistration(stake_deregistration) {\n    _assertClass(stake_deregistration, StakeDeregistration);\n\n    var ret = wasm.certificate_new_stake_deregistration(stake_deregistration.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {StakeDelegation} stake_delegation\n  * @returns {Certificate}\n  */\n\n\n  static new_stake_delegation(stake_delegation) {\n    _assertClass(stake_delegation, StakeDelegation);\n\n    var ret = wasm.certificate_new_stake_delegation(stake_delegation.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {PoolRegistration} pool_registration\n  * @returns {Certificate}\n  */\n\n\n  static new_pool_registration(pool_registration) {\n    _assertClass(pool_registration, PoolRegistration);\n\n    var ret = wasm.certificate_new_pool_registration(pool_registration.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {PoolRetirement} pool_retirement\n  * @returns {Certificate}\n  */\n\n\n  static new_pool_retirement(pool_retirement) {\n    _assertClass(pool_retirement, PoolRetirement);\n\n    var ret = wasm.certificate_new_pool_retirement(pool_retirement.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {GenesisKeyDelegation} genesis_key_delegation\n  * @returns {Certificate}\n  */\n\n\n  static new_genesis_key_delegation(genesis_key_delegation) {\n    _assertClass(genesis_key_delegation, GenesisKeyDelegation);\n\n    var ret = wasm.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\n  * @returns {Certificate}\n  */\n\n\n  static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\n    _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\n\n    var ret = wasm.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.certificate_kind(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {StakeRegistration | undefined}\n  */\n\n\n  as_stake_registration() {\n    var ret = wasm.certificate_as_stake_registration(this.ptr);\n    return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\n  }\n  /**\n  * @returns {StakeDeregistration | undefined}\n  */\n\n\n  as_stake_deregistration() {\n    var ret = wasm.certificate_as_stake_deregistration(this.ptr);\n    return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\n  }\n  /**\n  * @returns {StakeDelegation | undefined}\n  */\n\n\n  as_stake_delegation() {\n    var ret = wasm.certificate_as_stake_delegation(this.ptr);\n    return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\n  }\n  /**\n  * @returns {PoolRegistration | undefined}\n  */\n\n\n  as_pool_registration() {\n    var ret = wasm.certificate_as_pool_registration(this.ptr);\n    return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\n  }\n  /**\n  * @returns {PoolRetirement | undefined}\n  */\n\n\n  as_pool_retirement() {\n    var ret = wasm.certificate_as_pool_retirement(this.ptr);\n    return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\n  }\n  /**\n  * @returns {GenesisKeyDelegation | undefined}\n  */\n\n\n  as_genesis_key_delegation() {\n    var ret = wasm.certificate_as_genesis_key_delegation(this.ptr);\n    return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\n  }\n  /**\n  * @returns {MoveInstantaneousRewardsCert | undefined}\n  */\n\n\n  as_move_instantaneous_rewards_cert() {\n    var ret = wasm.certificate_as_move_instantaneous_rewards_cert(this.ptr);\n    return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Certificates {\n  static __wrap(ptr) {\n    const obj = Object.create(Certificates.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_certificates_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.certificates_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Certificates}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.certificates_from_bytes(ptr0, len0);\n    return Certificates.__wrap(ret);\n  }\n  /**\n  * @returns {Certificates}\n  */\n\n\n  static new() {\n    var ret = wasm.certificates_new();\n    return Certificates.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.certificates_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {Certificate}\n  */\n\n\n  get(index) {\n    var ret = wasm.certificates_get(this.ptr, index);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {Certificate} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, Certificate);\n\n    wasm.certificates_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class ConstrPlutusData {\n  static __wrap(ptr) {\n    const obj = Object.create(ConstrPlutusData.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_constrplutusdata_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.constrplutusdata_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ConstrPlutusData}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.constrplutusdata_from_bytes(ptr0, len0);\n    return ConstrPlutusData.__wrap(ret);\n  }\n  /**\n  * @returns {Int}\n  */\n\n\n  tag() {\n    var ret = wasm.constrplutusdata_tag(this.ptr);\n    return Int.__wrap(ret);\n  }\n  /**\n  * @returns {PlutusList}\n  */\n\n\n  data() {\n    var ret = wasm.constrplutusdata_data(this.ptr);\n    return PlutusList.__wrap(ret);\n  }\n  /**\n  * @param {Int} tag\n  * @param {PlutusList} data\n  * @returns {ConstrPlutusData}\n  */\n\n\n  static new(tag, data) {\n    _assertClass(tag, Int);\n\n    var ptr0 = tag.ptr;\n    tag.ptr = 0;\n\n    _assertClass(data, PlutusList);\n\n    var ret = wasm.constrplutusdata_new(ptr0, data.ptr);\n    return ConstrPlutusData.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class CostModel {\n  static __wrap(ptr) {\n    const obj = Object.create(CostModel.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_costmodel_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.costmodel_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {CostModel}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.costmodel_from_bytes(ptr0, len0);\n    return CostModel.__wrap(ret);\n  }\n  /**\n  * @returns {CostModel}\n  */\n\n\n  static new() {\n    var ret = wasm.costmodel_new();\n    return CostModel.__wrap(ret);\n  }\n  /**\n  * @param {number} operation\n  * @param {Int} cost\n  * @returns {Int}\n  */\n\n\n  set(operation, cost) {\n    _assertClass(cost, Int);\n\n    var ret = wasm.costmodel_set(this.ptr, operation, cost.ptr);\n    return Int.__wrap(ret);\n  }\n  /**\n  * @param {number} operation\n  * @returns {Int}\n  */\n\n\n  get(operation) {\n    var ret = wasm.costmodel_get(this.ptr, operation);\n    return Int.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Costmdls {\n  static __wrap(ptr) {\n    const obj = Object.create(Costmdls.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_costmdls_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.costmdls_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Costmdls}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.costmdls_from_bytes(ptr0, len0);\n    return Costmdls.__wrap(ret);\n  }\n  /**\n  * @returns {Costmdls}\n  */\n\n\n  static new() {\n    var ret = wasm.costmdls_new();\n    return Costmdls.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.costmdls_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {Language} key\n  * @param {CostModel} value\n  * @returns {CostModel | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, Language);\n\n    _assertClass(value, CostModel);\n\n    var ret = wasm.costmdls_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : CostModel.__wrap(ret);\n  }\n  /**\n  * @param {Language} key\n  * @returns {CostModel | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, Language);\n\n    var ret = wasm.costmdls_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : CostModel.__wrap(ret);\n  }\n  /**\n  * @returns {Languages}\n  */\n\n\n  keys() {\n    var ret = wasm.costmdls_keys(this.ptr);\n    return Languages.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class DNSRecordAorAAAA {\n  static __wrap(ptr) {\n    const obj = Object.create(DNSRecordAorAAAA.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_dnsrecordaoraaaa_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.dnsrecordaoraaaa_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {DNSRecordAorAAAA}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.dnsrecordaoraaaa_from_bytes(ptr0, len0);\n    return DNSRecordAorAAAA.__wrap(ret);\n  }\n  /**\n  * @param {string} dns_name\n  * @returns {DNSRecordAorAAAA}\n  */\n\n\n  static new(dns_name) {\n    var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.dnsrecordaoraaaa_new(ptr0, len0);\n    return DNSRecordAorAAAA.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  record() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.dnsrecordaoraaaa_record(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n\n}\n/**\n*/\n\nexport class DNSRecordSRV {\n  static __wrap(ptr) {\n    const obj = Object.create(DNSRecordSRV.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_dnsrecordsrv_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.dnsrecordsrv_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {DNSRecordSRV}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.dnsrecordsrv_from_bytes(ptr0, len0);\n    return DNSRecordSRV.__wrap(ret);\n  }\n  /**\n  * @param {string} dns_name\n  * @returns {DNSRecordSRV}\n  */\n\n\n  static new(dns_name) {\n    var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.dnsrecordsrv_new(ptr0, len0);\n    return DNSRecordSRV.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  record() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.dnsrecordsrv_record(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n\n}\n/**\n*/\n\nexport class DataHash {\n  static __wrap(ptr) {\n    const obj = Object.create(DataHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_datahash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.datahash_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.datahash_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {DataHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.datahash_from_bech32(ptr0, len0);\n    return DataHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {DataHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.datahash_from_bytes(ptr0, len0);\n    return DataHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Ed25519KeyHash {\n  static __wrap(ptr) {\n    const obj = Object.create(Ed25519KeyHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_ed25519keyhash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519keyhash_from_bech32(ptr0, len0);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519keyhash_from_bytes(ptr0, len0);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Ed25519KeyHashes {\n  static __wrap(ptr) {\n    const obj = Object.create(Ed25519KeyHashes.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_ed25519keyhashes_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.ed25519keyhashes_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Ed25519KeyHashes}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519keyhashes_from_bytes(ptr0, len0);\n    return Ed25519KeyHashes.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHashes}\n  */\n\n\n  static new() {\n    var ret = wasm.ed25519keyhashes_new();\n    return Ed25519KeyHashes.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.ed25519keyhashes_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  get(index) {\n    var ret = wasm.ed25519keyhashes_get(this.ptr, index);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @param {Ed25519KeyHash} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, Ed25519KeyHash);\n\n    wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class Ed25519Signature {\n  static __wrap(ptr) {\n    const obj = Object.create(Ed25519Signature.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_ed25519signature_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.ed25519signature_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_bech32() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.ed25519signature_to_bech32(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_hex() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.ed25519signature_to_hex(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech32_str\n  * @returns {Ed25519Signature}\n  */\n\n\n  static from_bech32(bech32_str) {\n    var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519signature_from_bech32(ptr0, len0);\n    return Ed25519Signature.__wrap(ret);\n  }\n  /**\n  * @param {string} input\n  * @returns {Ed25519Signature}\n  */\n\n\n  static from_hex(input) {\n    var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519signature_from_hex(ptr0, len0);\n    return Ed25519Signature.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Ed25519Signature}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519signature_from_bytes(ptr0, len0);\n    return Ed25519Signature.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class EnterpriseAddress {\n  static __wrap(ptr) {\n    const obj = Object.create(EnterpriseAddress.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_enterpriseaddress_free(ptr);\n  }\n  /**\n  * @param {number} network\n  * @param {StakeCredential} payment\n  * @returns {EnterpriseAddress}\n  */\n\n\n  static new(network, payment) {\n    _assertClass(payment, StakeCredential);\n\n    var ret = wasm.enterpriseaddress_new(network, payment.ptr);\n    return EnterpriseAddress.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  payment_cred() {\n    var ret = wasm.enterpriseaddress_payment_cred(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  to_address() {\n    var ret = wasm.enterpriseaddress_to_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @param {Address} addr\n  * @returns {EnterpriseAddress | undefined}\n  */\n\n\n  static from_address(addr) {\n    _assertClass(addr, Address);\n\n    var ret = wasm.enterpriseaddress_from_address(addr.ptr);\n    return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class ExUnitPrices {\n  static __wrap(ptr) {\n    const obj = Object.create(ExUnitPrices.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_exunitprices_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.exunitprices_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ExUnitPrices}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.exunitprices_from_bytes(ptr0, len0);\n    return ExUnitPrices.__wrap(ret);\n  }\n  /**\n  * @returns {UnitInterval}\n  */\n\n\n  mem_price() {\n    var ret = wasm.exunitprices_mem_price(this.ptr);\n    return UnitInterval.__wrap(ret);\n  }\n  /**\n  * @returns {UnitInterval}\n  */\n\n\n  step_price() {\n    var ret = wasm.exunitprices_step_price(this.ptr);\n    return UnitInterval.__wrap(ret);\n  }\n  /**\n  * @param {UnitInterval} mem_price\n  * @param {UnitInterval} step_price\n  * @returns {ExUnitPrices}\n  */\n\n\n  static new(mem_price, step_price) {\n    _assertClass(mem_price, UnitInterval);\n\n    _assertClass(step_price, UnitInterval);\n\n    var ret = wasm.exunitprices_new(mem_price.ptr, step_price.ptr);\n    return ExUnitPrices.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class ExUnits {\n  static __wrap(ptr) {\n    const obj = Object.create(ExUnits.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_exunits_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.exunits_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ExUnits}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.exunits_from_bytes(ptr0, len0);\n    return ExUnits.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  mem() {\n    var ret = wasm.exunits_mem(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  steps() {\n    var ret = wasm.exunits_steps(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} mem\n  * @param {BigNum} steps\n  * @returns {ExUnits}\n  */\n\n\n  static new(mem, steps) {\n    _assertClass(mem, BigNum);\n\n    _assertClass(steps, BigNum);\n\n    var ret = wasm.exunits_new(mem.ptr, steps.ptr);\n    return ExUnits.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class GeneralTransactionMetadata {\n  static __wrap(ptr) {\n    const obj = Object.create(GeneralTransactionMetadata.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_generaltransactionmetadata_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.generaltransactionmetadata_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {GeneralTransactionMetadata}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.generaltransactionmetadata_from_bytes(ptr0, len0);\n    return GeneralTransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @returns {GeneralTransactionMetadata}\n  */\n\n\n  static new() {\n    var ret = wasm.generaltransactionmetadata_new();\n    return GeneralTransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.generaltransactionmetadata_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {BigNum} key\n  * @param {TransactionMetadatum} value\n  * @returns {TransactionMetadatum | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, BigNum);\n\n    _assertClass(value, TransactionMetadatum);\n\n    var ret = wasm.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} key\n  * @returns {TransactionMetadatum | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, BigNum);\n\n    var ret = wasm.generaltransactionmetadata_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionMetadatumLabels}\n  */\n\n\n  keys() {\n    var ret = wasm.generaltransactionmetadata_keys(this.ptr);\n    return TransactionMetadatumLabels.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class GenesisDelegateHash {\n  static __wrap(ptr) {\n    const obj = Object.create(GenesisDelegateHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_genesisdelegatehash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.genesisdelegatehash_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.genesisdelegatehash_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {GenesisDelegateHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesisdelegatehash_from_bech32(ptr0, len0);\n    return GenesisDelegateHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {GenesisDelegateHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesisdelegatehash_from_bytes(ptr0, len0);\n    return GenesisDelegateHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class GenesisHash {\n  static __wrap(ptr) {\n    const obj = Object.create(GenesisHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_genesishash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.genesishash_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.genesishash_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {GenesisHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesishash_from_bech32(ptr0, len0);\n    return GenesisHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {GenesisHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesishash_from_bytes(ptr0, len0);\n    return GenesisHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class GenesisHashes {\n  static __wrap(ptr) {\n    const obj = Object.create(GenesisHashes.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_genesishashes_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.genesishashes_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {GenesisHashes}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesishashes_from_bytes(ptr0, len0);\n    return GenesisHashes.__wrap(ret);\n  }\n  /**\n  * @returns {GenesisHashes}\n  */\n\n\n  static new() {\n    var ret = wasm.genesishashes_new();\n    return GenesisHashes.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.genesishashes_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {GenesisHash}\n  */\n\n\n  get(index) {\n    var ret = wasm.genesishashes_get(this.ptr, index);\n    return GenesisHash.__wrap(ret);\n  }\n  /**\n  * @param {GenesisHash} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, GenesisHash);\n\n    wasm.genesishashes_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class GenesisKeyDelegation {\n  static __wrap(ptr) {\n    const obj = Object.create(GenesisKeyDelegation.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_genesiskeydelegation_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.genesiskeydelegation_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {GenesisKeyDelegation}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesiskeydelegation_from_bytes(ptr0, len0);\n    return GenesisKeyDelegation.__wrap(ret);\n  }\n  /**\n  * @returns {GenesisHash}\n  */\n\n\n  genesishash() {\n    var ret = wasm.genesiskeydelegation_genesishash(this.ptr);\n    return GenesisHash.__wrap(ret);\n  }\n  /**\n  * @returns {GenesisDelegateHash}\n  */\n\n\n  genesis_delegate_hash() {\n    var ret = wasm.genesiskeydelegation_genesis_delegate_hash(this.ptr);\n    return GenesisDelegateHash.__wrap(ret);\n  }\n  /**\n  * @returns {VRFKeyHash}\n  */\n\n\n  vrf_keyhash() {\n    var ret = wasm.genesiskeydelegation_vrf_keyhash(this.ptr);\n    return VRFKeyHash.__wrap(ret);\n  }\n  /**\n  * @param {GenesisHash} genesishash\n  * @param {GenesisDelegateHash} genesis_delegate_hash\n  * @param {VRFKeyHash} vrf_keyhash\n  * @returns {GenesisKeyDelegation}\n  */\n\n\n  static new(genesishash, genesis_delegate_hash, vrf_keyhash) {\n    _assertClass(genesishash, GenesisHash);\n\n    _assertClass(genesis_delegate_hash, GenesisDelegateHash);\n\n    _assertClass(vrf_keyhash, VRFKeyHash);\n\n    var ret = wasm.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\n    return GenesisKeyDelegation.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Header {\n  static __wrap(ptr) {\n    const obj = Object.create(Header.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_header_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.header_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Header}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.header_from_bytes(ptr0, len0);\n    return Header.__wrap(ret);\n  }\n  /**\n  * @returns {HeaderBody}\n  */\n\n\n  header_body() {\n    var ret = wasm.header_header_body(this.ptr);\n    return HeaderBody.__wrap(ret);\n  }\n  /**\n  * @returns {KESSignature}\n  */\n\n\n  body_signature() {\n    var ret = wasm.header_body_signature(this.ptr);\n    return KESSignature.__wrap(ret);\n  }\n  /**\n  * @param {HeaderBody} header_body\n  * @param {KESSignature} body_signature\n  * @returns {Header}\n  */\n\n\n  static new(header_body, body_signature) {\n    _assertClass(header_body, HeaderBody);\n\n    _assertClass(body_signature, KESSignature);\n\n    var ret = wasm.header_new(header_body.ptr, body_signature.ptr);\n    return Header.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class HeaderBody {\n  static __wrap(ptr) {\n    const obj = Object.create(HeaderBody.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_headerbody_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.headerbody_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {HeaderBody}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.headerbody_from_bytes(ptr0, len0);\n    return HeaderBody.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  block_number() {\n    var ret = wasm.headerbody_block_number(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  slot() {\n    var ret = wasm.headerbody_slot(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {BlockHash | undefined}\n  */\n\n\n  prev_hash() {\n    var ret = wasm.headerbody_prev_hash(this.ptr);\n    return ret === 0 ? undefined : BlockHash.__wrap(ret);\n  }\n  /**\n  * @returns {Vkey}\n  */\n\n\n  issuer_vkey() {\n    var ret = wasm.headerbody_issuer_vkey(this.ptr);\n    return Vkey.__wrap(ret);\n  }\n  /**\n  * @returns {VRFVKey}\n  */\n\n\n  vrf_vkey() {\n    var ret = wasm.headerbody_vrf_vkey(this.ptr);\n    return VRFVKey.__wrap(ret);\n  }\n  /**\n  * @returns {VRFCert}\n  */\n\n\n  nonce_vrf() {\n    var ret = wasm.headerbody_nonce_vrf(this.ptr);\n    return VRFCert.__wrap(ret);\n  }\n  /**\n  * @returns {VRFCert}\n  */\n\n\n  leader_vrf() {\n    var ret = wasm.headerbody_leader_vrf(this.ptr);\n    return VRFCert.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  block_body_size() {\n    var ret = wasm.headerbody_block_body_size(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {BlockHash}\n  */\n\n\n  block_body_hash() {\n    var ret = wasm.headerbody_block_body_hash(this.ptr);\n    return BlockHash.__wrap(ret);\n  }\n  /**\n  * @returns {OperationalCert}\n  */\n\n\n  operational_cert() {\n    var ret = wasm.headerbody_operational_cert(this.ptr);\n    return OperationalCert.__wrap(ret);\n  }\n  /**\n  * @returns {ProtocolVersion}\n  */\n\n\n  protocol_version() {\n    var ret = wasm.headerbody_protocol_version(this.ptr);\n    return ProtocolVersion.__wrap(ret);\n  }\n  /**\n  * @param {number} block_number\n  * @param {number} slot\n  * @param {BlockHash | undefined} prev_hash\n  * @param {Vkey} issuer_vkey\n  * @param {VRFVKey} vrf_vkey\n  * @param {VRFCert} nonce_vrf\n  * @param {VRFCert} leader_vrf\n  * @param {number} block_body_size\n  * @param {BlockHash} block_body_hash\n  * @param {OperationalCert} operational_cert\n  * @param {ProtocolVersion} protocol_version\n  * @returns {HeaderBody}\n  */\n\n\n  static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, nonce_vrf, leader_vrf, block_body_size, block_body_hash, operational_cert, protocol_version) {\n    let ptr0 = 0;\n\n    if (!isLikeNone(prev_hash)) {\n      _assertClass(prev_hash, BlockHash);\n\n      ptr0 = prev_hash.ptr;\n      prev_hash.ptr = 0;\n    }\n\n    _assertClass(issuer_vkey, Vkey);\n\n    _assertClass(vrf_vkey, VRFVKey);\n\n    _assertClass(nonce_vrf, VRFCert);\n\n    _assertClass(leader_vrf, VRFCert);\n\n    _assertClass(block_body_hash, BlockHash);\n\n    _assertClass(operational_cert, OperationalCert);\n\n    _assertClass(protocol_version, ProtocolVersion);\n\n    var ret = wasm.headerbody_new(block_number, slot, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, nonce_vrf.ptr, leader_vrf.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n    return HeaderBody.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Int {\n  static __wrap(ptr) {\n    const obj = Object.create(Int.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_int_free(ptr);\n  }\n  /**\n  * @param {BigNum} x\n  * @returns {Int}\n  */\n\n\n  static new(x) {\n    _assertClass(x, BigNum);\n\n    var ret = wasm.int_new(x.ptr);\n    return Int.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} x\n  * @returns {Int}\n  */\n\n\n  static new_negative(x) {\n    _assertClass(x, BigNum);\n\n    var ret = wasm.int_new_negative(x.ptr);\n    return Int.__wrap(ret);\n  }\n  /**\n  * @param {number} x\n  * @returns {Int}\n  */\n\n\n  static new_i32(x) {\n    var ret = wasm.int_new_i32(x);\n    return Int.__wrap(ret);\n  }\n  /**\n  * @returns {boolean}\n  */\n\n\n  is_positive() {\n    var ret = wasm.int_is_positive(this.ptr);\n    return ret !== 0;\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  as_positive() {\n    var ret = wasm.int_as_positive(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  as_negative() {\n    var ret = wasm.int_as_negative(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  as_i32() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.int_as_i32(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return r0 === 0 ? undefined : r1;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n\n}\n/**\n*/\n\nexport class Ipv4 {\n  static __wrap(ptr) {\n    const obj = Object.create(Ipv4.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_ipv4_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.ipv4_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Ipv4}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ipv4_from_bytes(ptr0, len0);\n    return Ipv4.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} data\n  * @returns {Ipv4}\n  */\n\n\n  static new(data) {\n    var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ipv4_new(ptr0, len0);\n    return Ipv4.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  ip() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.ipv4_ip(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n\n}\n/**\n*/\n\nexport class Ipv6 {\n  static __wrap(ptr) {\n    const obj = Object.create(Ipv6.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_ipv6_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.ipv6_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Ipv6}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ipv6_from_bytes(ptr0, len0);\n    return Ipv6.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} data\n  * @returns {Ipv6}\n  */\n\n\n  static new(data) {\n    var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ipv6_new(ptr0, len0);\n    return Ipv6.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  ip() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.ipv6_ip(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n\n}\n/**\n*/\n\nexport class KESSignature {\n  static __wrap(ptr) {\n    const obj = Object.create(KESSignature.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_kessignature_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.kessignature_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {KESSignature}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.kessignature_from_bytes(ptr0, len0);\n    return KESSignature.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class KESVKey {\n  static __wrap(ptr) {\n    const obj = Object.create(KESVKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_kesvkey_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.kesvkey_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.kesvkey_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {KESVKey}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.kesvkey_from_bech32(ptr0, len0);\n    return KESVKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {KESVKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.kesvkey_from_bytes(ptr0, len0);\n    return KESVKey.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Language {\n  static __wrap(ptr) {\n    const obj = Object.create(Language.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_language_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.language_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Language}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.language_from_bytes(ptr0, len0);\n    return Language.__wrap(ret);\n  }\n  /**\n  * @returns {Language}\n  */\n\n\n  static new_plutus_v1() {\n    var ret = wasm.language_new_plutus_v1();\n    return Language.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.language_kind(this.ptr);\n    return ret >>> 0;\n  }\n\n}\n/**\n*/\n\nexport class Languages {\n  static __wrap(ptr) {\n    const obj = Object.create(Languages.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_languages_free(ptr);\n  }\n  /**\n  * @returns {Languages}\n  */\n\n\n  static new() {\n    var ret = wasm.languages_new();\n    return Languages.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.languages_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {Language}\n  */\n\n\n  get(index) {\n    var ret = wasm.languages_get(this.ptr, index);\n    return Language.__wrap(ret);\n  }\n  /**\n  * @param {Language} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, Language);\n\n    var ptr0 = elem.ptr;\n    elem.ptr = 0;\n    wasm.languages_add(this.ptr, ptr0);\n  }\n\n}\n/**\n*/\n\nexport class LegacyDaedalusPrivateKey {\n  static __wrap(ptr) {\n    const obj = Object.create(LegacyDaedalusPrivateKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_legacydaedalusprivatekey_free(ptr);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {LegacyDaedalusPrivateKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.legacydaedalusprivatekey_from_bytes(ptr0, len0);\n    return LegacyDaedalusPrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.legacydaedalusprivatekey_as_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  chaincode() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.legacydaedalusprivatekey_chaincode(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n\n}\n/**\n*/\n\nexport class LinearFee {\n  static __wrap(ptr) {\n    const obj = Object.create(LinearFee.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_linearfee_free(ptr);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  constant() {\n    var ret = wasm.linearfee_constant(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  coefficient() {\n    var ret = wasm.linearfee_coefficient(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} coefficient\n  * @param {BigNum} constant\n  * @returns {LinearFee}\n  */\n\n\n  static new(coefficient, constant) {\n    _assertClass(coefficient, BigNum);\n\n    _assertClass(constant, BigNum);\n\n    var ret = wasm.linearfee_new(coefficient.ptr, constant.ptr);\n    return LinearFee.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class MIRToStakeCredentials {\n  static __wrap(ptr) {\n    const obj = Object.create(MIRToStakeCredentials.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_mirtostakecredentials_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.mirtostakecredentials_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MIRToStakeCredentials}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.mirtostakecredentials_from_bytes(ptr0, len0);\n    return MIRToStakeCredentials.__wrap(ret);\n  }\n  /**\n  * @returns {MIRToStakeCredentials}\n  */\n\n\n  static new() {\n    var ret = wasm.mirtostakecredentials_new();\n    return MIRToStakeCredentials.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.mirtostakecredentials_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {StakeCredential} cred\n  * @param {Int} delta\n  * @returns {Int | undefined}\n  */\n\n\n  insert(cred, delta) {\n    _assertClass(cred, StakeCredential);\n\n    _assertClass(delta, Int);\n\n    var ret = wasm.mirtostakecredentials_insert(this.ptr, cred.ptr, delta.ptr);\n    return ret === 0 ? undefined : Int.__wrap(ret);\n  }\n  /**\n  * @param {StakeCredential} cred\n  * @returns {Int | undefined}\n  */\n\n\n  get(cred) {\n    _assertClass(cred, StakeCredential);\n\n    var ret = wasm.mirtostakecredentials_get(this.ptr, cred.ptr);\n    return ret === 0 ? undefined : Int.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredentials}\n  */\n\n\n  keys() {\n    var ret = wasm.mirtostakecredentials_keys(this.ptr);\n    return StakeCredentials.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class MetadataList {\n  static __wrap(ptr) {\n    const obj = Object.create(MetadataList.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_metadatalist_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.metadatalist_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MetadataList}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.metadatalist_from_bytes(ptr0, len0);\n    return MetadataList.__wrap(ret);\n  }\n  /**\n  * @returns {MetadataList}\n  */\n\n\n  static new() {\n    var ret = wasm.metadatalist_new();\n    return MetadataList.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.metadatalist_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {TransactionMetadatum}\n  */\n\n\n  get(index) {\n    var ret = wasm.metadatalist_get(this.ptr, index);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {TransactionMetadatum} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, TransactionMetadatum);\n\n    wasm.metadatalist_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class MetadataMap {\n  static __wrap(ptr) {\n    const obj = Object.create(MetadataMap.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_metadatamap_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.metadatamap_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MetadataMap}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.metadatamap_from_bytes(ptr0, len0);\n    return MetadataMap.__wrap(ret);\n  }\n  /**\n  * @returns {MetadataMap}\n  */\n\n\n  static new() {\n    var ret = wasm.metadatamap_new();\n    return MetadataMap.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.metadatamap_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {TransactionMetadatum} key\n  * @param {TransactionMetadatum} value\n  * @returns {TransactionMetadatum | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, TransactionMetadatum);\n\n    _assertClass(value, TransactionMetadatum);\n\n    var ret = wasm.metadatamap_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {string} key\n  * @param {TransactionMetadatum} value\n  * @returns {TransactionMetadatum | undefined}\n  */\n\n\n  insert_str(key, value) {\n    var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n\n    _assertClass(value, TransactionMetadatum);\n\n    var ret = wasm.metadatamap_insert_str(this.ptr, ptr0, len0, value.ptr);\n    return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {number} key\n  * @param {TransactionMetadatum} value\n  * @returns {TransactionMetadatum | undefined}\n  */\n\n\n  insert_i32(key, value) {\n    _assertClass(value, TransactionMetadatum);\n\n    var ret = wasm.metadatamap_insert_i32(this.ptr, key, value.ptr);\n    return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {TransactionMetadatum} key\n  * @returns {TransactionMetadatum}\n  */\n\n\n  get(key) {\n    _assertClass(key, TransactionMetadatum);\n\n    var ret = wasm.metadatamap_get(this.ptr, key.ptr);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {string} key\n  * @returns {TransactionMetadatum}\n  */\n\n\n  get_str(key) {\n    var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.metadatamap_get_str(this.ptr, ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {number} key\n  * @returns {TransactionMetadatum}\n  */\n\n\n  get_i32(key) {\n    var ret = wasm.metadatamap_get_i32(this.ptr, key);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {TransactionMetadatum} key\n  * @returns {boolean}\n  */\n\n\n  has(key) {\n    _assertClass(key, TransactionMetadatum);\n\n    var ret = wasm.metadatamap_has(this.ptr, key.ptr);\n    return ret !== 0;\n  }\n  /**\n  * @returns {MetadataList}\n  */\n\n\n  keys() {\n    var ret = wasm.metadatamap_keys(this.ptr);\n    return MetadataList.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Mint {\n  static __wrap(ptr) {\n    const obj = Object.create(Mint.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_mint_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.mint_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Mint}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.mint_from_bytes(ptr0, len0);\n    return Mint.__wrap(ret);\n  }\n  /**\n  * @returns {Mint}\n  */\n\n\n  static new() {\n    var ret = wasm.mint_new();\n    return Mint.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.mint_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {ScriptHash} key\n  * @param {MintAssets} value\n  * @returns {MintAssets | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, ScriptHash);\n\n    _assertClass(value, MintAssets);\n\n    var ret = wasm.mint_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : MintAssets.__wrap(ret);\n  }\n  /**\n  * @param {ScriptHash} key\n  * @returns {MintAssets | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, ScriptHash);\n\n    var ret = wasm.mint_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : MintAssets.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptHashes}\n  */\n\n\n  keys() {\n    var ret = wasm.mint_keys(this.ptr);\n    return ScriptHashes.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class MintAssets {\n  static __wrap(ptr) {\n    const obj = Object.create(MintAssets.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_mintassets_free(ptr);\n  }\n  /**\n  * @returns {MintAssets}\n  */\n\n\n  static new() {\n    var ret = wasm.mintassets_new();\n    return MintAssets.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.mintassets_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {AssetName} key\n  * @param {Int} value\n  * @returns {Int | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, AssetName);\n\n    _assertClass(value, Int);\n\n    var ptr0 = value.ptr;\n    value.ptr = 0;\n    var ret = wasm.mintassets_insert(this.ptr, key.ptr, ptr0);\n    return ret === 0 ? undefined : Int.__wrap(ret);\n  }\n  /**\n  * @param {AssetName} key\n  * @returns {Int | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, AssetName);\n\n    var ret = wasm.mintassets_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : Int.__wrap(ret);\n  }\n  /**\n  * @returns {AssetNames}\n  */\n\n\n  keys() {\n    var ret = wasm.mintassets_keys(this.ptr);\n    return AssetNames.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class MoveInstantaneousReward {\n  static __wrap(ptr) {\n    const obj = Object.create(MoveInstantaneousReward.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_moveinstantaneousreward_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.moveinstantaneousreward_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MoveInstantaneousReward}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.moveinstantaneousreward_from_bytes(ptr0, len0);\n    return MoveInstantaneousReward.__wrap(ret);\n  }\n  /**\n  * @param {number} pot\n  * @param {BigNum} amount\n  * @returns {MoveInstantaneousReward}\n  */\n\n\n  static new_to_other_pot(pot, amount) {\n    _assertClass(amount, BigNum);\n\n    var ret = wasm.moveinstantaneousreward_new_to_other_pot(pot, amount.ptr);\n    return MoveInstantaneousReward.__wrap(ret);\n  }\n  /**\n  * @param {number} pot\n  * @param {MIRToStakeCredentials} amounts\n  * @returns {MoveInstantaneousReward}\n  */\n\n\n  static new_to_stake_creds(pot, amounts) {\n    _assertClass(amounts, MIRToStakeCredentials);\n\n    var ret = wasm.moveinstantaneousreward_new_to_stake_creds(pot, amounts.ptr);\n    return MoveInstantaneousReward.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  pot() {\n    var ret = wasm.moveinstantaneousreward_pot(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.moveinstantaneousreward_kind(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  as_to_other_pot() {\n    var ret = wasm.moveinstantaneousreward_as_to_other_pot(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {MIRToStakeCredentials | undefined}\n  */\n\n\n  as_to_stake_creds() {\n    var ret = wasm.moveinstantaneousreward_as_to_stake_creds(this.ptr);\n    return ret === 0 ? undefined : MIRToStakeCredentials.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class MoveInstantaneousRewardsCert {\n  static __wrap(ptr) {\n    const obj = Object.create(MoveInstantaneousRewardsCert.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_moveinstantaneousrewardscert_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.moveinstantaneousrewardscert_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MoveInstantaneousRewardsCert}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.moveinstantaneousrewardscert_from_bytes(ptr0, len0);\n    return MoveInstantaneousRewardsCert.__wrap(ret);\n  }\n  /**\n  * @returns {MoveInstantaneousReward}\n  */\n\n\n  move_instantaneous_reward() {\n    var ret = wasm.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\n    return MoveInstantaneousReward.__wrap(ret);\n  }\n  /**\n  * @param {MoveInstantaneousReward} move_instantaneous_reward\n  * @returns {MoveInstantaneousRewardsCert}\n  */\n\n\n  static new(move_instantaneous_reward) {\n    _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\n\n    var ret = wasm.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\n    return MoveInstantaneousRewardsCert.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class MultiAsset {\n  static __wrap(ptr) {\n    const obj = Object.create(MultiAsset.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_multiasset_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.multiasset_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MultiAsset}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.multiasset_from_bytes(ptr0, len0);\n    return MultiAsset.__wrap(ret);\n  }\n  /**\n  * @returns {MultiAsset}\n  */\n\n\n  static new() {\n    var ret = wasm.multiasset_new();\n    return MultiAsset.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.multiasset_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {ScriptHash} key\n  * @param {Assets} value\n  * @returns {Assets | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, ScriptHash);\n\n    _assertClass(value, Assets);\n\n    var ret = wasm.multiasset_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : Assets.__wrap(ret);\n  }\n  /**\n  * @param {ScriptHash} key\n  * @returns {Assets | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, ScriptHash);\n\n    var ret = wasm.multiasset_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : Assets.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptHashes}\n  */\n\n\n  keys() {\n    var ret = wasm.multiasset_keys(this.ptr);\n    return ScriptHashes.__wrap(ret);\n  }\n  /**\n  * removes an asset from the list if the result is 0 or less\n  * @param {MultiAsset} rhs_ma\n  * @returns {MultiAsset}\n  */\n\n\n  sub(rhs_ma) {\n    _assertClass(rhs_ma, MultiAsset);\n\n    var ret = wasm.multiasset_sub(this.ptr, rhs_ma.ptr);\n    return MultiAsset.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class MultiHostName {\n  static __wrap(ptr) {\n    const obj = Object.create(MultiHostName.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_multihostname_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.multihostname_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MultiHostName}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.multihostname_from_bytes(ptr0, len0);\n    return MultiHostName.__wrap(ret);\n  }\n  /**\n  * @returns {DNSRecordSRV}\n  */\n\n\n  dns_name() {\n    var ret = wasm.multihostname_dns_name(this.ptr);\n    return DNSRecordSRV.__wrap(ret);\n  }\n  /**\n  * @param {DNSRecordSRV} dns_name\n  * @returns {MultiHostName}\n  */\n\n\n  static new(dns_name) {\n    _assertClass(dns_name, DNSRecordSRV);\n\n    var ret = wasm.multihostname_new(dns_name.ptr);\n    return MultiHostName.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class NativeScript {\n  static __wrap(ptr) {\n    const obj = Object.create(NativeScript.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_nativescript_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.nativescript_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {NativeScript}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.nativescript_from_bytes(ptr0, len0);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {number} namespace\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  hash(namespace) {\n    var ret = wasm.nativescript_hash(this.ptr, namespace);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @param {ScriptPubkey} script_pubkey\n  * @returns {NativeScript}\n  */\n\n\n  static new_script_pubkey(script_pubkey) {\n    _assertClass(script_pubkey, ScriptPubkey);\n\n    var ret = wasm.nativescript_new_script_pubkey(script_pubkey.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {ScriptAll} script_all\n  * @returns {NativeScript}\n  */\n\n\n  static new_script_all(script_all) {\n    _assertClass(script_all, ScriptAll);\n\n    var ret = wasm.nativescript_new_script_all(script_all.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {ScriptAny} script_any\n  * @returns {NativeScript}\n  */\n\n\n  static new_script_any(script_any) {\n    _assertClass(script_any, ScriptAny);\n\n    var ret = wasm.nativescript_new_script_any(script_any.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {ScriptNOfK} script_n_of_k\n  * @returns {NativeScript}\n  */\n\n\n  static new_script_n_of_k(script_n_of_k) {\n    _assertClass(script_n_of_k, ScriptNOfK);\n\n    var ret = wasm.nativescript_new_script_n_of_k(script_n_of_k.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {TimelockStart} timelock_start\n  * @returns {NativeScript}\n  */\n\n\n  static new_timelock_start(timelock_start) {\n    _assertClass(timelock_start, TimelockStart);\n\n    var ret = wasm.nativescript_new_timelock_start(timelock_start.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {TimelockExpiry} timelock_expiry\n  * @returns {NativeScript}\n  */\n\n\n  static new_timelock_expiry(timelock_expiry) {\n    _assertClass(timelock_expiry, TimelockExpiry);\n\n    var ret = wasm.nativescript_new_timelock_expiry(timelock_expiry.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.nativescript_kind(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {ScriptPubkey | undefined}\n  */\n\n\n  as_script_pubkey() {\n    var ret = wasm.nativescript_as_script_pubkey(this.ptr);\n    return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptAll | undefined}\n  */\n\n\n  as_script_all() {\n    var ret = wasm.nativescript_as_script_all(this.ptr);\n    return ret === 0 ? undefined : ScriptAll.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptAny | undefined}\n  */\n\n\n  as_script_any() {\n    var ret = wasm.nativescript_as_script_any(this.ptr);\n    return ret === 0 ? undefined : ScriptAny.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptNOfK | undefined}\n  */\n\n\n  as_script_n_of_k() {\n    var ret = wasm.nativescript_as_script_n_of_k(this.ptr);\n    return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\n  }\n  /**\n  * @returns {TimelockStart | undefined}\n  */\n\n\n  as_timelock_start() {\n    var ret = wasm.nativescript_as_timelock_start(this.ptr);\n    return ret === 0 ? undefined : TimelockStart.__wrap(ret);\n  }\n  /**\n  * @returns {TimelockExpiry | undefined}\n  */\n\n\n  as_timelock_expiry() {\n    var ret = wasm.nativescript_as_timelock_expiry(this.ptr);\n    return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class NativeScripts {\n  static __wrap(ptr) {\n    const obj = Object.create(NativeScripts.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_nativescripts_free(ptr);\n  }\n  /**\n  * @returns {NativeScripts}\n  */\n\n\n  static new() {\n    var ret = wasm.nativescripts_new();\n    return NativeScripts.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.nativescripts_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {NativeScript}\n  */\n\n\n  get(index) {\n    var ret = wasm.nativescripts_get(this.ptr, index);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {NativeScript} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, NativeScript);\n\n    wasm.nativescripts_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class NetworkId {\n  static __wrap(ptr) {\n    const obj = Object.create(NetworkId.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_networkid_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.networkid_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {NetworkId}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.networkid_from_bytes(ptr0, len0);\n    return NetworkId.__wrap(ret);\n  }\n  /**\n  * @returns {NetworkId}\n  */\n\n\n  static testnet() {\n    var ret = wasm.networkid_testnet();\n    return NetworkId.__wrap(ret);\n  }\n  /**\n  * @returns {NetworkId}\n  */\n\n\n  static mainnet() {\n    var ret = wasm.networkid_mainnet();\n    return NetworkId.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.networkid_kind(this.ptr);\n    return ret >>> 0;\n  }\n\n}\n/**\n*/\n\nexport class NetworkInfo {\n  static __wrap(ptr) {\n    const obj = Object.create(NetworkInfo.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_networkinfo_free(ptr);\n  }\n  /**\n  * @param {number} network_id\n  * @param {number} protocol_magic\n  * @returns {NetworkInfo}\n  */\n\n\n  static new(network_id, protocol_magic) {\n    var ret = wasm.networkinfo_new(network_id, protocol_magic);\n    return NetworkInfo.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  network_id() {\n    var ret = wasm.networkinfo_network_id(this.ptr);\n    return ret;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  protocol_magic() {\n    var ret = wasm.networkinfo_protocol_magic(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {NetworkInfo}\n  */\n\n\n  static testnet() {\n    var ret = wasm.networkinfo_testnet();\n    return NetworkInfo.__wrap(ret);\n  }\n  /**\n  * @returns {NetworkInfo}\n  */\n\n\n  static mainnet() {\n    var ret = wasm.networkinfo_mainnet();\n    return NetworkInfo.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Nonce {\n  static __wrap(ptr) {\n    const obj = Object.create(Nonce.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_nonce_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.nonce_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Nonce}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.nonce_from_bytes(ptr0, len0);\n    return Nonce.__wrap(ret);\n  }\n  /**\n  * @returns {Nonce}\n  */\n\n\n  static new_identity() {\n    var ret = wasm.nonce_new_identity();\n    return Nonce.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} hash\n  * @returns {Nonce}\n  */\n\n\n  static new_from_hash(hash) {\n    var ptr0 = passArray8ToWasm0(hash, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.nonce_new_from_hash(ptr0, len0);\n    return Nonce.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array | undefined}\n  */\n\n\n  get_hash() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.nonce_get_hash(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v0;\n\n      if (r0 !== 0) {\n        v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n\n}\n/**\n*/\n\nexport class OperationalCert {\n  static __wrap(ptr) {\n    const obj = Object.create(OperationalCert.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_operationalcert_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.operationalcert_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {OperationalCert}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.operationalcert_from_bytes(ptr0, len0);\n    return OperationalCert.__wrap(ret);\n  }\n  /**\n  * @returns {KESVKey}\n  */\n\n\n  hot_vkey() {\n    var ret = wasm.operationalcert_hot_vkey(this.ptr);\n    return KESVKey.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  sequence_number() {\n    var ret = wasm.operationalcert_sequence_number(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kes_period() {\n    var ret = wasm.operationalcert_kes_period(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {Ed25519Signature}\n  */\n\n\n  sigma() {\n    var ret = wasm.operationalcert_sigma(this.ptr);\n    return Ed25519Signature.__wrap(ret);\n  }\n  /**\n  * @param {KESVKey} hot_vkey\n  * @param {number} sequence_number\n  * @param {number} kes_period\n  * @param {Ed25519Signature} sigma\n  * @returns {OperationalCert}\n  */\n\n\n  static new(hot_vkey, sequence_number, kes_period, sigma) {\n    _assertClass(hot_vkey, KESVKey);\n\n    _assertClass(sigma, Ed25519Signature);\n\n    var ret = wasm.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\n    return OperationalCert.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class PlutusData {\n  static __wrap(ptr) {\n    const obj = Object.create(PlutusData.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_plutusdata_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.plutusdata_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PlutusData}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.plutusdata_from_bytes(ptr0, len0);\n    return PlutusData.__wrap(ret);\n  }\n  /**\n  * @param {ConstrPlutusData} constr_plutus_data\n  * @returns {PlutusData}\n  */\n\n\n  static new_constr_plutus_data(constr_plutus_data) {\n    _assertClass(constr_plutus_data, ConstrPlutusData);\n\n    var ret = wasm.plutusdata_new_constr_plutus_data(constr_plutus_data.ptr);\n    return PlutusData.__wrap(ret);\n  }\n  /**\n  * @param {PlutusMap} map\n  * @returns {PlutusData}\n  */\n\n\n  static new_map(map) {\n    _assertClass(map, PlutusMap);\n\n    var ret = wasm.plutusdata_new_map(map.ptr);\n    return PlutusData.__wrap(ret);\n  }\n  /**\n  * @param {PlutusList} list\n  * @returns {PlutusData}\n  */\n\n\n  static new_list(list) {\n    _assertClass(list, PlutusList);\n\n    var ret = wasm.plutusdata_new_list(list.ptr);\n    return PlutusData.__wrap(ret);\n  }\n  /**\n  * @param {BigInt} integer\n  * @returns {PlutusData}\n  */\n\n\n  static new_integer(integer) {\n    _assertClass(integer, BigInt);\n\n    var ret = wasm.plutusdata_new_integer(integer.ptr);\n    return PlutusData.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PlutusData}\n  */\n\n\n  static new_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.plutusdata_new_bytes(ptr0, len0);\n    return PlutusData.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.plutusdata_kind(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {ConstrPlutusData | undefined}\n  */\n\n\n  as_constr_plutus_data() {\n    var ret = wasm.plutusdata_as_constr_plutus_data(this.ptr);\n    return ret === 0 ? undefined : ConstrPlutusData.__wrap(ret);\n  }\n  /**\n  * @returns {PlutusMap | undefined}\n  */\n\n\n  as_map() {\n    var ret = wasm.plutusdata_as_map(this.ptr);\n    return ret === 0 ? undefined : PlutusMap.__wrap(ret);\n  }\n  /**\n  * @returns {PlutusList | undefined}\n  */\n\n\n  as_list() {\n    var ret = wasm.plutusdata_as_list(this.ptr);\n    return ret === 0 ? undefined : PlutusList.__wrap(ret);\n  }\n  /**\n  * @returns {BigInt | undefined}\n  */\n\n\n  as_integer() {\n    var ret = wasm.plutusdata_as_integer(this.ptr);\n    return ret === 0 ? undefined : BigInt.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array | undefined}\n  */\n\n\n  as_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.plutusdata_as_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v0;\n\n      if (r0 !== 0) {\n        v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n\n}\n/**\n*/\n\nexport class PlutusList {\n  static __wrap(ptr) {\n    const obj = Object.create(PlutusList.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_plutuslist_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.plutuslist_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PlutusList}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.plutuslist_from_bytes(ptr0, len0);\n    return PlutusList.__wrap(ret);\n  }\n  /**\n  * @returns {PlutusList}\n  */\n\n\n  static new() {\n    var ret = wasm.plutuslist_new();\n    return PlutusList.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.plutuslist_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {PlutusData}\n  */\n\n\n  get(index) {\n    var ret = wasm.plutuslist_get(this.ptr, index);\n    return PlutusData.__wrap(ret);\n  }\n  /**\n  * @param {PlutusData} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, PlutusData);\n\n    wasm.plutuslist_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class PlutusMap {\n  static __wrap(ptr) {\n    const obj = Object.create(PlutusMap.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_plutusmap_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.plutusmap_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PlutusMap}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.plutusmap_from_bytes(ptr0, len0);\n    return PlutusMap.__wrap(ret);\n  }\n  /**\n  * @returns {PlutusMap}\n  */\n\n\n  static new() {\n    var ret = wasm.plutusmap_new();\n    return PlutusMap.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.plutusmap_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {PlutusData} key\n  * @param {PlutusData} value\n  * @returns {PlutusData | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, PlutusData);\n\n    _assertClass(value, PlutusData);\n\n    var ret = wasm.plutusmap_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : PlutusData.__wrap(ret);\n  }\n  /**\n  * @param {PlutusData} key\n  * @returns {PlutusData | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, PlutusData);\n\n    var ret = wasm.plutusmap_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : PlutusData.__wrap(ret);\n  }\n  /**\n  * @returns {PlutusList}\n  */\n\n\n  keys() {\n    var ret = wasm.plutusmap_keys(this.ptr);\n    return PlutusList.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class PlutusScript {\n  static __wrap(ptr) {\n    const obj = Object.create(PlutusScript.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_plutusscript_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.plutusscript_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PlutusScript}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.plutusscript_from_bytes(ptr0, len0);\n    return PlutusScript.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PlutusScript}\n  */\n\n\n  static new(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.plutusscript_new(ptr0, len0);\n    return PlutusScript.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.plutusscript_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n\n}\n/**\n*/\n\nexport class PlutusScripts {\n  static __wrap(ptr) {\n    const obj = Object.create(PlutusScripts.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_plutusscripts_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.plutusscripts_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PlutusScripts}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.plutusscripts_from_bytes(ptr0, len0);\n    return PlutusScripts.__wrap(ret);\n  }\n  /**\n  * @returns {PlutusScripts}\n  */\n\n\n  static new() {\n    var ret = wasm.plutusscripts_new();\n    return PlutusScripts.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.plutusscripts_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {PlutusScript}\n  */\n\n\n  get(index) {\n    var ret = wasm.plutusscripts_get(this.ptr, index);\n    return PlutusScript.__wrap(ret);\n  }\n  /**\n  * @param {PlutusScript} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, PlutusScript);\n\n    wasm.plutusscripts_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class Pointer {\n  static __wrap(ptr) {\n    const obj = Object.create(Pointer.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_pointer_free(ptr);\n  }\n  /**\n  * @param {number} slot\n  * @param {number} tx_index\n  * @param {number} cert_index\n  * @returns {Pointer}\n  */\n\n\n  static new(slot, tx_index, cert_index) {\n    var ret = wasm.pointer_new(slot, tx_index, cert_index);\n    return Pointer.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  slot() {\n    var ret = wasm.pointer_slot(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  tx_index() {\n    var ret = wasm.pointer_tx_index(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  cert_index() {\n    var ret = wasm.pointer_cert_index(this.ptr);\n    return ret >>> 0;\n  }\n\n}\n/**\n*/\n\nexport class PointerAddress {\n  static __wrap(ptr) {\n    const obj = Object.create(PointerAddress.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_pointeraddress_free(ptr);\n  }\n  /**\n  * @param {number} network\n  * @param {StakeCredential} payment\n  * @param {Pointer} stake\n  * @returns {PointerAddress}\n  */\n\n\n  static new(network, payment, stake) {\n    _assertClass(payment, StakeCredential);\n\n    _assertClass(stake, Pointer);\n\n    var ret = wasm.pointeraddress_new(network, payment.ptr, stake.ptr);\n    return PointerAddress.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  payment_cred() {\n    var ret = wasm.pointeraddress_payment_cred(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Pointer}\n  */\n\n\n  stake_pointer() {\n    var ret = wasm.pointeraddress_stake_pointer(this.ptr);\n    return Pointer.__wrap(ret);\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  to_address() {\n    var ret = wasm.pointeraddress_to_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @param {Address} addr\n  * @returns {PointerAddress | undefined}\n  */\n\n\n  static from_address(addr) {\n    _assertClass(addr, Address);\n\n    var ret = wasm.pointeraddress_from_address(addr.ptr);\n    return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class PoolMetadata {\n  static __wrap(ptr) {\n    const obj = Object.create(PoolMetadata.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_poolmetadata_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.poolmetadata_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PoolMetadata}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.poolmetadata_from_bytes(ptr0, len0);\n    return PoolMetadata.__wrap(ret);\n  }\n  /**\n  * @returns {URL}\n  */\n\n\n  url() {\n    var ret = wasm.poolmetadata_url(this.ptr);\n    return URL.__wrap(ret);\n  }\n  /**\n  * @returns {PoolMetadataHash}\n  */\n\n\n  pool_metadata_hash() {\n    var ret = wasm.poolmetadata_pool_metadata_hash(this.ptr);\n    return PoolMetadataHash.__wrap(ret);\n  }\n  /**\n  * @param {URL} url\n  * @param {PoolMetadataHash} pool_metadata_hash\n  * @returns {PoolMetadata}\n  */\n\n\n  static new(url, pool_metadata_hash) {\n    _assertClass(url, URL);\n\n    _assertClass(pool_metadata_hash, PoolMetadataHash);\n\n    var ret = wasm.poolmetadata_new(url.ptr, pool_metadata_hash.ptr);\n    return PoolMetadata.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class PoolMetadataHash {\n  static __wrap(ptr) {\n    const obj = Object.create(PoolMetadataHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_poolmetadatahash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.poolmetadatahash_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.poolmetadatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {PoolMetadataHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.poolmetadatahash_from_bech32(ptr0, len0);\n    return PoolMetadataHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PoolMetadataHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.poolmetadatahash_from_bytes(ptr0, len0);\n    return PoolMetadataHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class PoolParams {\n  static __wrap(ptr) {\n    const obj = Object.create(PoolParams.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_poolparams_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.poolparams_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PoolParams}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.poolparams_from_bytes(ptr0, len0);\n    return PoolParams.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  operator() {\n    var ret = wasm.poolparams_operator(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @returns {VRFKeyHash}\n  */\n\n\n  vrf_keyhash() {\n    var ret = wasm.poolparams_vrf_keyhash(this.ptr);\n    return VRFKeyHash.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  pledge() {\n    var ret = wasm.poolparams_pledge(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  cost() {\n    var ret = wasm.poolparams_cost(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {UnitInterval}\n  */\n\n\n  margin() {\n    var ret = wasm.poolparams_margin(this.ptr);\n    return UnitInterval.__wrap(ret);\n  }\n  /**\n  * @returns {RewardAddress}\n  */\n\n\n  reward_account() {\n    var ret = wasm.poolparams_reward_account(this.ptr);\n    return RewardAddress.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHashes}\n  */\n\n\n  pool_owners() {\n    var ret = wasm.poolparams_pool_owners(this.ptr);\n    return Ed25519KeyHashes.__wrap(ret);\n  }\n  /**\n  * @returns {Relays}\n  */\n\n\n  relays() {\n    var ret = wasm.poolparams_relays(this.ptr);\n    return Relays.__wrap(ret);\n  }\n  /**\n  * @returns {PoolMetadata | undefined}\n  */\n\n\n  pool_metadata() {\n    var ret = wasm.poolparams_pool_metadata(this.ptr);\n    return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\n  }\n  /**\n  * @param {Ed25519KeyHash} operator\n  * @param {VRFKeyHash} vrf_keyhash\n  * @param {BigNum} pledge\n  * @param {BigNum} cost\n  * @param {UnitInterval} margin\n  * @param {RewardAddress} reward_account\n  * @param {Ed25519KeyHashes} pool_owners\n  * @param {Relays} relays\n  * @param {PoolMetadata | undefined} pool_metadata\n  * @returns {PoolParams}\n  */\n\n\n  static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\n    _assertClass(operator, Ed25519KeyHash);\n\n    _assertClass(vrf_keyhash, VRFKeyHash);\n\n    _assertClass(pledge, BigNum);\n\n    _assertClass(cost, BigNum);\n\n    _assertClass(margin, UnitInterval);\n\n    _assertClass(reward_account, RewardAddress);\n\n    _assertClass(pool_owners, Ed25519KeyHashes);\n\n    _assertClass(relays, Relays);\n\n    let ptr0 = 0;\n\n    if (!isLikeNone(pool_metadata)) {\n      _assertClass(pool_metadata, PoolMetadata);\n\n      ptr0 = pool_metadata.ptr;\n      pool_metadata.ptr = 0;\n    }\n\n    var ret = wasm.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\n    return PoolParams.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class PoolRegistration {\n  static __wrap(ptr) {\n    const obj = Object.create(PoolRegistration.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_poolregistration_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.poolregistration_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PoolRegistration}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.poolregistration_from_bytes(ptr0, len0);\n    return PoolRegistration.__wrap(ret);\n  }\n  /**\n  * @returns {PoolParams}\n  */\n\n\n  pool_params() {\n    var ret = wasm.poolregistration_pool_params(this.ptr);\n    return PoolParams.__wrap(ret);\n  }\n  /**\n  * @param {PoolParams} pool_params\n  * @returns {PoolRegistration}\n  */\n\n\n  static new(pool_params) {\n    _assertClass(pool_params, PoolParams);\n\n    var ret = wasm.poolregistration_new(pool_params.ptr);\n    return PoolRegistration.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class PoolRetirement {\n  static __wrap(ptr) {\n    const obj = Object.create(PoolRetirement.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_poolretirement_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.poolretirement_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PoolRetirement}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.poolretirement_from_bytes(ptr0, len0);\n    return PoolRetirement.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  pool_keyhash() {\n    var ret = wasm.poolretirement_pool_keyhash(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  epoch() {\n    var ret = wasm.poolretirement_epoch(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {Ed25519KeyHash} pool_keyhash\n  * @param {number} epoch\n  * @returns {PoolRetirement}\n  */\n\n\n  static new(pool_keyhash, epoch) {\n    _assertClass(pool_keyhash, Ed25519KeyHash);\n\n    var ret = wasm.poolretirement_new(pool_keyhash.ptr, epoch);\n    return PoolRetirement.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class PrivateKey {\n  static __wrap(ptr) {\n    const obj = Object.create(PrivateKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_privatekey_free(ptr);\n  }\n  /**\n  * @returns {PublicKey}\n  */\n\n\n  to_public() {\n    var ret = wasm.privatekey_to_public(this.ptr);\n    return PublicKey.__wrap(ret);\n  }\n  /**\n  * @returns {PrivateKey}\n  */\n\n\n  static generate_ed25519() {\n    var ret = wasm.privatekey_generate_ed25519();\n    return PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {PrivateKey}\n  */\n\n\n  static generate_ed25519extended() {\n    var ret = wasm.privatekey_generate_ed25519extended();\n    return PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_bech32() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.privatekey_to_bech32(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.privatekey_as_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PrivateKey}\n  */\n\n\n  static from_extended_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.privatekey_from_extended_bytes(ptr0, len0);\n    return PrivateKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PrivateKey}\n  */\n\n\n  static from_normal_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.privatekey_from_normal_bytes(ptr0, len0);\n    return PrivateKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} message\n  * @returns {Ed25519Signature}\n  */\n\n\n  sign(message) {\n    var ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.privatekey_sign(this.ptr, ptr0, len0);\n    return Ed25519Signature.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class ProposedProtocolParameterUpdates {\n  static __wrap(ptr) {\n    const obj = Object.create(ProposedProtocolParameterUpdates.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_proposedprotocolparameterupdates_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.proposedprotocolparameterupdates_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ProposedProtocolParameterUpdates}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.proposedprotocolparameterupdates_from_bytes(ptr0, len0);\n    return ProposedProtocolParameterUpdates.__wrap(ret);\n  }\n  /**\n  * @returns {ProposedProtocolParameterUpdates}\n  */\n\n\n  static new() {\n    var ret = wasm.proposedprotocolparameterupdates_new();\n    return ProposedProtocolParameterUpdates.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.proposedprotocolparameterupdates_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {GenesisHash} key\n  * @param {ProtocolParamUpdate} value\n  * @returns {ProtocolParamUpdate | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, GenesisHash);\n\n    _assertClass(value, ProtocolParamUpdate);\n\n    var ret = wasm.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n  }\n  /**\n  * @param {GenesisHash} key\n  * @returns {ProtocolParamUpdate | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, GenesisHash);\n\n    var ret = wasm.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n  }\n  /**\n  * @returns {GenesisHashes}\n  */\n\n\n  keys() {\n    var ret = wasm.proposedprotocolparameterupdates_keys(this.ptr);\n    return GenesisHashes.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class ProtocolParamUpdate {\n  static __wrap(ptr) {\n    const obj = Object.create(ProtocolParamUpdate.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_protocolparamupdate_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.protocolparamupdate_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ProtocolParamUpdate}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.protocolparamupdate_from_bytes(ptr0, len0);\n    return ProtocolParamUpdate.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} minfee_a\n  */\n\n\n  set_minfee_a(minfee_a) {\n    _assertClass(minfee_a, BigNum);\n\n    wasm.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  minfee_a() {\n    var ret = wasm.protocolparamupdate_minfee_a(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} minfee_b\n  */\n\n\n  set_minfee_b(minfee_b) {\n    _assertClass(minfee_b, BigNum);\n\n    wasm.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  minfee_b() {\n    var ret = wasm.protocolparamupdate_minfee_b(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {number} max_block_body_size\n  */\n\n\n  set_max_block_body_size(max_block_body_size) {\n    wasm.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  max_block_body_size() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.protocolparamupdate_max_block_body_size(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return r0 === 0 ? undefined : r1 >>> 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {number} max_tx_size\n  */\n\n\n  set_max_tx_size(max_tx_size) {\n    wasm.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  max_tx_size() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.protocolparamupdate_max_tx_size(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return r0 === 0 ? undefined : r1 >>> 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {number} max_block_header_size\n  */\n\n\n  set_max_block_header_size(max_block_header_size) {\n    wasm.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  max_block_header_size() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.protocolparamupdate_max_block_header_size(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return r0 === 0 ? undefined : r1 >>> 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {BigNum} key_deposit\n  */\n\n\n  set_key_deposit(key_deposit) {\n    _assertClass(key_deposit, BigNum);\n\n    wasm.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  key_deposit() {\n    var ret = wasm.protocolparamupdate_key_deposit(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} pool_deposit\n  */\n\n\n  set_pool_deposit(pool_deposit) {\n    _assertClass(pool_deposit, BigNum);\n\n    wasm.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  pool_deposit() {\n    var ret = wasm.protocolparamupdate_pool_deposit(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {number} max_epoch\n  */\n\n\n  set_max_epoch(max_epoch) {\n    wasm.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  max_epoch() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.protocolparamupdate_max_epoch(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return r0 === 0 ? undefined : r1 >>> 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {number} n_opt\n  */\n\n\n  set_n_opt(n_opt) {\n    wasm.protocolparamupdate_set_n_opt(this.ptr, n_opt);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  n_opt() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.protocolparamupdate_n_opt(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return r0 === 0 ? undefined : r1 >>> 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {UnitInterval} pool_pledge_influence\n  */\n\n\n  set_pool_pledge_influence(pool_pledge_influence) {\n    _assertClass(pool_pledge_influence, UnitInterval);\n\n    wasm.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\n  }\n  /**\n  * @returns {UnitInterval | undefined}\n  */\n\n\n  pool_pledge_influence() {\n    var ret = wasm.protocolparamupdate_pool_pledge_influence(this.ptr);\n    return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n  }\n  /**\n  * @param {UnitInterval} expansion_rate\n  */\n\n\n  set_expansion_rate(expansion_rate) {\n    _assertClass(expansion_rate, UnitInterval);\n\n    wasm.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\n  }\n  /**\n  * @returns {UnitInterval | undefined}\n  */\n\n\n  expansion_rate() {\n    var ret = wasm.protocolparamupdate_expansion_rate(this.ptr);\n    return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n  }\n  /**\n  * @param {UnitInterval} treasury_growth_rate\n  */\n\n\n  set_treasury_growth_rate(treasury_growth_rate) {\n    _assertClass(treasury_growth_rate, UnitInterval);\n\n    wasm.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\n  }\n  /**\n  * @returns {UnitInterval | undefined}\n  */\n\n\n  treasury_growth_rate() {\n    var ret = wasm.protocolparamupdate_treasury_growth_rate(this.ptr);\n    return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n  }\n  /**\n  * @param {UnitInterval} d\n  */\n\n\n  set_d(d) {\n    _assertClass(d, UnitInterval);\n\n    wasm.protocolparamupdate_set_d(this.ptr, d.ptr);\n  }\n  /**\n  * @returns {UnitInterval | undefined}\n  */\n\n\n  d() {\n    var ret = wasm.protocolparamupdate_d(this.ptr);\n    return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n  }\n  /**\n  * @param {Nonce} extra_entropy\n  */\n\n\n  set_extra_entropy(extra_entropy) {\n    _assertClass(extra_entropy, Nonce);\n\n    wasm.protocolparamupdate_set_extra_entropy(this.ptr, extra_entropy.ptr);\n  }\n  /**\n  * @returns {Nonce | undefined}\n  */\n\n\n  extra_entropy() {\n    var ret = wasm.protocolparamupdate_extra_entropy(this.ptr);\n    return ret === 0 ? undefined : Nonce.__wrap(ret);\n  }\n  /**\n  * @param {ProtocolVersions} protocol_version\n  */\n\n\n  set_protocol_version(protocol_version) {\n    _assertClass(protocol_version, ProtocolVersions);\n\n    wasm.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\n  }\n  /**\n  * @returns {ProtocolVersions | undefined}\n  */\n\n\n  protocol_version() {\n    var ret = wasm.protocolparamupdate_protocol_version(this.ptr);\n    return ret === 0 ? undefined : ProtocolVersions.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} min_pool_cost\n  */\n\n\n  set_min_pool_cost(min_pool_cost) {\n    _assertClass(min_pool_cost, BigNum);\n\n    wasm.protocolparamupdate_set_min_pool_cost(this.ptr, min_pool_cost.ptr);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  min_pool_cost() {\n    var ret = wasm.protocolparamupdate_min_pool_cost(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} ada_per_utxo_byte\n  */\n\n\n  set_ada_per_utxo_byte(ada_per_utxo_byte) {\n    _assertClass(ada_per_utxo_byte, BigNum);\n\n    wasm.protocolparamupdate_set_ada_per_utxo_byte(this.ptr, ada_per_utxo_byte.ptr);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  ada_per_utxo_byte() {\n    var ret = wasm.protocolparamupdate_ada_per_utxo_byte(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {Costmdls} cost_models\n  */\n\n\n  set_cost_models(cost_models) {\n    _assertClass(cost_models, Costmdls);\n\n    wasm.protocolparamupdate_set_cost_models(this.ptr, cost_models.ptr);\n  }\n  /**\n  * @returns {Costmdls | undefined}\n  */\n\n\n  cost_models() {\n    var ret = wasm.protocolparamupdate_cost_models(this.ptr);\n    return ret === 0 ? undefined : Costmdls.__wrap(ret);\n  }\n  /**\n  * @param {ExUnitPrices} execution_costs\n  */\n\n\n  set_execution_costs(execution_costs) {\n    _assertClass(execution_costs, ExUnitPrices);\n\n    wasm.protocolparamupdate_set_execution_costs(this.ptr, execution_costs.ptr);\n  }\n  /**\n  * @returns {ExUnitPrices | undefined}\n  */\n\n\n  execution_costs() {\n    var ret = wasm.protocolparamupdate_execution_costs(this.ptr);\n    return ret === 0 ? undefined : ExUnitPrices.__wrap(ret);\n  }\n  /**\n  * @param {ExUnits} max_tx_ex_units\n  */\n\n\n  set_max_tx_ex_units(max_tx_ex_units) {\n    _assertClass(max_tx_ex_units, ExUnits);\n\n    wasm.protocolparamupdate_set_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n  }\n  /**\n  * @returns {ExUnits | undefined}\n  */\n\n\n  max_tx_ex_units() {\n    var ret = wasm.protocolparamupdate_max_tx_ex_units(this.ptr);\n    return ret === 0 ? undefined : ExUnits.__wrap(ret);\n  }\n  /**\n  * @param {ExUnits} max_block_ex_units\n  */\n\n\n  set_max_block_ex_units(max_block_ex_units) {\n    _assertClass(max_block_ex_units, ExUnits);\n\n    wasm.protocolparamupdate_set_max_block_ex_units(this.ptr, max_block_ex_units.ptr);\n  }\n  /**\n  * @returns {ExUnits | undefined}\n  */\n\n\n  max_block_ex_units() {\n    var ret = wasm.protocolparamupdate_max_block_ex_units(this.ptr);\n    return ret === 0 ? undefined : ExUnits.__wrap(ret);\n  }\n  /**\n  * @param {number} max_value_size\n  */\n\n\n  set_max_value_size(max_value_size) {\n    wasm.protocolparamupdate_set_max_value_size(this.ptr, max_value_size);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  max_value_size() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.protocolparamupdate_max_value_size(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return r0 === 0 ? undefined : r1 >>> 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {ProtocolParamUpdate}\n  */\n\n\n  static new() {\n    var ret = wasm.protocolparamupdate_new();\n    return ProtocolParamUpdate.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class ProtocolVersion {\n  static __wrap(ptr) {\n    const obj = Object.create(ProtocolVersion.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_protocolversion_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.protocolversion_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ProtocolVersion}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.protocolversion_from_bytes(ptr0, len0);\n    return ProtocolVersion.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  major() {\n    var ret = wasm.protocolversion_major(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  minor() {\n    var ret = wasm.protocolversion_minor(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} major\n  * @param {number} minor\n  * @returns {ProtocolVersion}\n  */\n\n\n  static new(major, minor) {\n    var ret = wasm.protocolversion_new(major, minor);\n    return ProtocolVersion.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class ProtocolVersions {\n  static __wrap(ptr) {\n    const obj = Object.create(ProtocolVersions.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_protocolversions_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.protocolversions_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ProtocolVersions}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.protocolversions_from_bytes(ptr0, len0);\n    return ProtocolVersions.__wrap(ret);\n  }\n  /**\n  * @returns {ProtocolVersions}\n  */\n\n\n  static new() {\n    var ret = wasm.protocolversions_new();\n    return ProtocolVersions.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.protocolversions_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {ProtocolVersion}\n  */\n\n\n  get(index) {\n    var ret = wasm.protocolversions_get(this.ptr, index);\n    return ProtocolVersion.__wrap(ret);\n  }\n  /**\n  * @param {ProtocolVersion} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, ProtocolVersion);\n\n    wasm.protocolversions_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n* ED25519 key used as public key\n*/\n\nexport class PublicKey {\n  static __wrap(ptr) {\n    const obj = Object.create(PublicKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_publickey_free(ptr);\n  }\n  /**\n  * Get public key from its bech32 representation\n  * Example:\n  * ```javascript\n  * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\n  * ```\n  * @param {string} bech32_str\n  * @returns {PublicKey}\n  */\n\n\n  static from_bech32(bech32_str) {\n    var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.publickey_from_bech32(ptr0, len0);\n    return PublicKey.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_bech32() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.publickey_to_bech32(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.publickey_as_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PublicKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.publickey_from_bytes(ptr0, len0);\n    return PublicKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} data\n  * @param {Ed25519Signature} signature\n  * @returns {boolean}\n  */\n\n\n  verify(data, signature) {\n    var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n\n    _assertClass(signature, Ed25519Signature);\n\n    var ret = wasm.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\n    return ret !== 0;\n  }\n  /**\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  hash() {\n    var ret = wasm.publickey_hash(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class PublicKeys {\n  static __wrap(ptr) {\n    const obj = Object.create(PublicKeys.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_publickeys_free(ptr);\n  }\n  /**\n  */\n\n\n  constructor() {\n    var ret = wasm.publickeys_new();\n    return PublicKeys.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  size() {\n    var ret = wasm.publickeys_size(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {PublicKey}\n  */\n\n\n  get(index) {\n    var ret = wasm.publickeys_get(this.ptr, index);\n    return PublicKey.__wrap(ret);\n  }\n  /**\n  * @param {PublicKey} key\n  */\n\n\n  add(key) {\n    _assertClass(key, PublicKey);\n\n    wasm.publickeys_add(this.ptr, key.ptr);\n  }\n\n}\n/**\n*/\n\nexport class Redeemer {\n  static __wrap(ptr) {\n    const obj = Object.create(Redeemer.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_redeemer_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.redeemer_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Redeemer}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.redeemer_from_bytes(ptr0, len0);\n    return Redeemer.__wrap(ret);\n  }\n  /**\n  * @returns {RedeemerTag}\n  */\n\n\n  tag() {\n    var ret = wasm.redeemer_tag(this.ptr);\n    return RedeemerTag.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  index() {\n    var ret = wasm.redeemer_index(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {PlutusData}\n  */\n\n\n  data() {\n    var ret = wasm.redeemer_data(this.ptr);\n    return PlutusData.__wrap(ret);\n  }\n  /**\n  * @returns {ExUnits}\n  */\n\n\n  ex_units() {\n    var ret = wasm.redeemer_ex_units(this.ptr);\n    return ExUnits.__wrap(ret);\n  }\n  /**\n  * @param {RedeemerTag} tag\n  * @param {BigNum} index\n  * @param {PlutusData} data\n  * @param {ExUnits} ex_units\n  * @returns {Redeemer}\n  */\n\n\n  static new(tag, index, data, ex_units) {\n    _assertClass(tag, RedeemerTag);\n\n    _assertClass(index, BigNum);\n\n    _assertClass(data, PlutusData);\n\n    _assertClass(ex_units, ExUnits);\n\n    var ret = wasm.redeemer_new(tag.ptr, index.ptr, data.ptr, ex_units.ptr);\n    return Redeemer.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class RedeemerTag {\n  static __wrap(ptr) {\n    const obj = Object.create(RedeemerTag.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_redeemertag_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.redeemertag_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {RedeemerTag}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.redeemertag_from_bytes(ptr0, len0);\n    return RedeemerTag.__wrap(ret);\n  }\n  /**\n  * @returns {RedeemerTag}\n  */\n\n\n  static new_spend() {\n    var ret = wasm.redeemertag_new_spend();\n    return RedeemerTag.__wrap(ret);\n  }\n  /**\n  * @returns {RedeemerTag}\n  */\n\n\n  static new_mint() {\n    var ret = wasm.redeemertag_new_mint();\n    return RedeemerTag.__wrap(ret);\n  }\n  /**\n  * @returns {RedeemerTag}\n  */\n\n\n  static new_cert() {\n    var ret = wasm.redeemertag_new_cert();\n    return RedeemerTag.__wrap(ret);\n  }\n  /**\n  * @returns {RedeemerTag}\n  */\n\n\n  static new_reward() {\n    var ret = wasm.redeemertag_new_reward();\n    return RedeemerTag.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.redeemertag_kind(this.ptr);\n    return ret >>> 0;\n  }\n\n}\n/**\n*/\n\nexport class Redeemers {\n  static __wrap(ptr) {\n    const obj = Object.create(Redeemers.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_redeemers_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.redeemers_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Redeemers}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.redeemers_from_bytes(ptr0, len0);\n    return Redeemers.__wrap(ret);\n  }\n  /**\n  * @returns {Redeemers}\n  */\n\n\n  static new() {\n    var ret = wasm.redeemers_new();\n    return Redeemers.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.redeemers_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {Redeemer}\n  */\n\n\n  get(index) {\n    var ret = wasm.redeemers_get(this.ptr, index);\n    return Redeemer.__wrap(ret);\n  }\n  /**\n  * @param {Redeemer} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, Redeemer);\n\n    wasm.redeemers_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class Relay {\n  static __wrap(ptr) {\n    const obj = Object.create(Relay.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_relay_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.relay_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Relay}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.relay_from_bytes(ptr0, len0);\n    return Relay.__wrap(ret);\n  }\n  /**\n  * @param {SingleHostAddr} single_host_addr\n  * @returns {Relay}\n  */\n\n\n  static new_single_host_addr(single_host_addr) {\n    _assertClass(single_host_addr, SingleHostAddr);\n\n    var ret = wasm.relay_new_single_host_addr(single_host_addr.ptr);\n    return Relay.__wrap(ret);\n  }\n  /**\n  * @param {SingleHostName} single_host_name\n  * @returns {Relay}\n  */\n\n\n  static new_single_host_name(single_host_name) {\n    _assertClass(single_host_name, SingleHostName);\n\n    var ret = wasm.relay_new_single_host_name(single_host_name.ptr);\n    return Relay.__wrap(ret);\n  }\n  /**\n  * @param {MultiHostName} multi_host_name\n  * @returns {Relay}\n  */\n\n\n  static new_multi_host_name(multi_host_name) {\n    _assertClass(multi_host_name, MultiHostName);\n\n    var ret = wasm.relay_new_multi_host_name(multi_host_name.ptr);\n    return Relay.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.relay_kind(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {SingleHostAddr | undefined}\n  */\n\n\n  as_single_host_addr() {\n    var ret = wasm.relay_as_single_host_addr(this.ptr);\n    return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\n  }\n  /**\n  * @returns {SingleHostName | undefined}\n  */\n\n\n  as_single_host_name() {\n    var ret = wasm.relay_as_single_host_name(this.ptr);\n    return ret === 0 ? undefined : SingleHostName.__wrap(ret);\n  }\n  /**\n  * @returns {MultiHostName | undefined}\n  */\n\n\n  as_multi_host_name() {\n    var ret = wasm.relay_as_multi_host_name(this.ptr);\n    return ret === 0 ? undefined : MultiHostName.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Relays {\n  static __wrap(ptr) {\n    const obj = Object.create(Relays.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_relays_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.relays_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Relays}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.relays_from_bytes(ptr0, len0);\n    return Relays.__wrap(ret);\n  }\n  /**\n  * @returns {Relays}\n  */\n\n\n  static new() {\n    var ret = wasm.relays_new();\n    return Relays.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.relays_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {Relay}\n  */\n\n\n  get(index) {\n    var ret = wasm.relays_get(this.ptr, index);\n    return Relay.__wrap(ret);\n  }\n  /**\n  * @param {Relay} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, Relay);\n\n    wasm.relays_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class RewardAddress {\n  static __wrap(ptr) {\n    const obj = Object.create(RewardAddress.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_rewardaddress_free(ptr);\n  }\n  /**\n  * @param {number} network\n  * @param {StakeCredential} payment\n  * @returns {RewardAddress}\n  */\n\n\n  static new(network, payment) {\n    _assertClass(payment, StakeCredential);\n\n    var ret = wasm.rewardaddress_new(network, payment.ptr);\n    return RewardAddress.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  payment_cred() {\n    var ret = wasm.rewardaddress_payment_cred(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  to_address() {\n    var ret = wasm.rewardaddress_to_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @param {Address} addr\n  * @returns {RewardAddress | undefined}\n  */\n\n\n  static from_address(addr) {\n    _assertClass(addr, Address);\n\n    var ret = wasm.rewardaddress_from_address(addr.ptr);\n    return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class RewardAddresses {\n  static __wrap(ptr) {\n    const obj = Object.create(RewardAddresses.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_rewardaddresses_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.rewardaddresses_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {RewardAddresses}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.rewardaddresses_from_bytes(ptr0, len0);\n    return RewardAddresses.__wrap(ret);\n  }\n  /**\n  * @returns {RewardAddresses}\n  */\n\n\n  static new() {\n    var ret = wasm.rewardaddresses_new();\n    return RewardAddresses.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.rewardaddresses_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {RewardAddress}\n  */\n\n\n  get(index) {\n    var ret = wasm.rewardaddresses_get(this.ptr, index);\n    return RewardAddress.__wrap(ret);\n  }\n  /**\n  * @param {RewardAddress} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, RewardAddress);\n\n    wasm.rewardaddresses_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class ScriptAll {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptAll.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_scriptall_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.scriptall_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptAll}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scriptall_from_bytes(ptr0, len0);\n    return ScriptAll.__wrap(ret);\n  }\n  /**\n  * @returns {NativeScripts}\n  */\n\n\n  native_scripts() {\n    var ret = wasm.scriptall_native_scripts(this.ptr);\n    return NativeScripts.__wrap(ret);\n  }\n  /**\n  * @param {NativeScripts} native_scripts\n  * @returns {ScriptAll}\n  */\n\n\n  static new(native_scripts) {\n    _assertClass(native_scripts, NativeScripts);\n\n    var ret = wasm.scriptall_new(native_scripts.ptr);\n    return ScriptAll.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class ScriptAny {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptAny.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_scriptany_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.scriptany_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptAny}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scriptany_from_bytes(ptr0, len0);\n    return ScriptAny.__wrap(ret);\n  }\n  /**\n  * @returns {NativeScripts}\n  */\n\n\n  native_scripts() {\n    var ret = wasm.scriptany_native_scripts(this.ptr);\n    return NativeScripts.__wrap(ret);\n  }\n  /**\n  * @param {NativeScripts} native_scripts\n  * @returns {ScriptAny}\n  */\n\n\n  static new(native_scripts) {\n    _assertClass(native_scripts, NativeScripts);\n\n    var ret = wasm.scriptany_new(native_scripts.ptr);\n    return ScriptAny.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class ScriptDataHash {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptDataHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_scriptdatahash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.scriptdatahash_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.scriptdatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {ScriptDataHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scriptdatahash_from_bech32(ptr0, len0);\n    return ScriptDataHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptDataHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scriptdatahash_from_bytes(ptr0, len0);\n    return ScriptDataHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class ScriptHash {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_scripthash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.scripthash_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.scripthash_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {ScriptHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scripthash_from_bech32(ptr0, len0);\n    return ScriptHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scripthash_from_bytes(ptr0, len0);\n    return ScriptHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class ScriptHashes {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptHashes.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_scripthashes_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.scripthashes_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptHashes}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scripthashes_from_bytes(ptr0, len0);\n    return ScriptHashes.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptHashes}\n  */\n\n\n  static new() {\n    var ret = wasm.scripthashes_new();\n    return ScriptHashes.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.scripthashes_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {ScriptHash}\n  */\n\n\n  get(index) {\n    var ret = wasm.scripthashes_get(this.ptr, index);\n    return ScriptHash.__wrap(ret);\n  }\n  /**\n  * @param {ScriptHash} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, ScriptHash);\n\n    wasm.scripthashes_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class ScriptNOfK {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptNOfK.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_scriptnofk_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.scriptnofk_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptNOfK}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scriptnofk_from_bytes(ptr0, len0);\n    return ScriptNOfK.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  n() {\n    var ret = wasm.scriptnofk_n(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {NativeScripts}\n  */\n\n\n  native_scripts() {\n    var ret = wasm.scriptnofk_native_scripts(this.ptr);\n    return NativeScripts.__wrap(ret);\n  }\n  /**\n  * @param {number} n\n  * @param {NativeScripts} native_scripts\n  * @returns {ScriptNOfK}\n  */\n\n\n  static new(n, native_scripts) {\n    _assertClass(native_scripts, NativeScripts);\n\n    var ret = wasm.scriptnofk_new(n, native_scripts.ptr);\n    return ScriptNOfK.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class ScriptPubkey {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptPubkey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_scriptpubkey_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.scriptpubkey_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptPubkey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scriptpubkey_from_bytes(ptr0, len0);\n    return ScriptPubkey.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  addr_keyhash() {\n    var ret = wasm.scriptpubkey_addr_keyhash(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @param {Ed25519KeyHash} addr_keyhash\n  * @returns {ScriptPubkey}\n  */\n\n\n  static new(addr_keyhash) {\n    _assertClass(addr_keyhash, Ed25519KeyHash);\n\n    var ret = wasm.scriptpubkey_new(addr_keyhash.ptr);\n    return ScriptPubkey.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class SingleHostAddr {\n  static __wrap(ptr) {\n    const obj = Object.create(SingleHostAddr.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_singlehostaddr_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.singlehostaddr_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {SingleHostAddr}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.singlehostaddr_from_bytes(ptr0, len0);\n    return SingleHostAddr.__wrap(ret);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  port() {\n    var ret = wasm.singlehostaddr_port(this.ptr);\n    return ret === 0xFFFFFF ? undefined : ret;\n  }\n  /**\n  * @returns {Ipv4 | undefined}\n  */\n\n\n  ipv4() {\n    var ret = wasm.singlehostaddr_ipv4(this.ptr);\n    return ret === 0 ? undefined : Ipv4.__wrap(ret);\n  }\n  /**\n  * @returns {Ipv6 | undefined}\n  */\n\n\n  ipv6() {\n    var ret = wasm.singlehostaddr_ipv6(this.ptr);\n    return ret === 0 ? undefined : Ipv6.__wrap(ret);\n  }\n  /**\n  * @param {number | undefined} port\n  * @param {Ipv4 | undefined} ipv4\n  * @param {Ipv6 | undefined} ipv6\n  * @returns {SingleHostAddr}\n  */\n\n\n  static new(port, ipv4, ipv6) {\n    let ptr0 = 0;\n\n    if (!isLikeNone(ipv4)) {\n      _assertClass(ipv4, Ipv4);\n\n      ptr0 = ipv4.ptr;\n      ipv4.ptr = 0;\n    }\n\n    let ptr1 = 0;\n\n    if (!isLikeNone(ipv6)) {\n      _assertClass(ipv6, Ipv6);\n\n      ptr1 = ipv6.ptr;\n      ipv6.ptr = 0;\n    }\n\n    var ret = wasm.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\n    return SingleHostAddr.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class SingleHostName {\n  static __wrap(ptr) {\n    const obj = Object.create(SingleHostName.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_singlehostname_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.singlehostname_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {SingleHostName}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.singlehostname_from_bytes(ptr0, len0);\n    return SingleHostName.__wrap(ret);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  port() {\n    var ret = wasm.singlehostname_port(this.ptr);\n    return ret === 0xFFFFFF ? undefined : ret;\n  }\n  /**\n  * @returns {DNSRecordAorAAAA}\n  */\n\n\n  dns_name() {\n    var ret = wasm.singlehostname_dns_name(this.ptr);\n    return DNSRecordAorAAAA.__wrap(ret);\n  }\n  /**\n  * @param {number | undefined} port\n  * @param {DNSRecordAorAAAA} dns_name\n  * @returns {SingleHostName}\n  */\n\n\n  static new(port, dns_name) {\n    _assertClass(dns_name, DNSRecordAorAAAA);\n\n    var ret = wasm.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\n    return SingleHostName.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class StakeCredential {\n  static __wrap(ptr) {\n    const obj = Object.create(StakeCredential.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_stakecredential_free(ptr);\n  }\n  /**\n  * @param {Ed25519KeyHash} hash\n  * @returns {StakeCredential}\n  */\n\n\n  static from_keyhash(hash) {\n    _assertClass(hash, Ed25519KeyHash);\n\n    var ret = wasm.stakecredential_from_keyhash(hash.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @param {ScriptHash} hash\n  * @returns {StakeCredential}\n  */\n\n\n  static from_scripthash(hash) {\n    _assertClass(hash, ScriptHash);\n\n    var ret = wasm.stakecredential_from_scripthash(hash.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHash | undefined}\n  */\n\n\n  to_keyhash() {\n    var ret = wasm.stakecredential_to_keyhash(this.ptr);\n    return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptHash | undefined}\n  */\n\n\n  to_scripthash() {\n    var ret = wasm.stakecredential_to_scripthash(this.ptr);\n    return ret === 0 ? undefined : ScriptHash.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.stakecredential_kind(this.ptr);\n    return ret;\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.stakecredential_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {StakeCredential}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.stakecredential_from_bytes(ptr0, len0);\n    return StakeCredential.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class StakeCredentials {\n  static __wrap(ptr) {\n    const obj = Object.create(StakeCredentials.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_stakecredentials_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.stakecredentials_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {StakeCredentials}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.stakecredentials_from_bytes(ptr0, len0);\n    return StakeCredentials.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredentials}\n  */\n\n\n  static new() {\n    var ret = wasm.stakecredentials_new();\n    return StakeCredentials.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.stakecredentials_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {StakeCredential}\n  */\n\n\n  get(index) {\n    var ret = wasm.stakecredentials_get(this.ptr, index);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @param {StakeCredential} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, StakeCredential);\n\n    wasm.stakecredentials_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class StakeDelegation {\n  static __wrap(ptr) {\n    const obj = Object.create(StakeDelegation.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_stakedelegation_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.stakedelegation_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {StakeDelegation}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.stakedelegation_from_bytes(ptr0, len0);\n    return StakeDelegation.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  stake_credential() {\n    var ret = wasm.stakedelegation_stake_credential(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  pool_keyhash() {\n    var ret = wasm.stakedelegation_pool_keyhash(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @param {StakeCredential} stake_credential\n  * @param {Ed25519KeyHash} pool_keyhash\n  * @returns {StakeDelegation}\n  */\n\n\n  static new(stake_credential, pool_keyhash) {\n    _assertClass(stake_credential, StakeCredential);\n\n    _assertClass(pool_keyhash, Ed25519KeyHash);\n\n    var ret = wasm.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\n    return StakeDelegation.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class StakeDeregistration {\n  static __wrap(ptr) {\n    const obj = Object.create(StakeDeregistration.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_stakederegistration_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.stakederegistration_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {StakeDeregistration}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.stakederegistration_from_bytes(ptr0, len0);\n    return StakeDeregistration.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  stake_credential() {\n    var ret = wasm.stakederegistration_stake_credential(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @param {StakeCredential} stake_credential\n  * @returns {StakeDeregistration}\n  */\n\n\n  static new(stake_credential) {\n    _assertClass(stake_credential, StakeCredential);\n\n    var ret = wasm.stakederegistration_new(stake_credential.ptr);\n    return StakeDeregistration.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class StakeRegistration {\n  static __wrap(ptr) {\n    const obj = Object.create(StakeRegistration.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_stakeregistration_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.stakeregistration_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {StakeRegistration}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.stakeregistration_from_bytes(ptr0, len0);\n    return StakeRegistration.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  stake_credential() {\n    var ret = wasm.stakeregistration_stake_credential(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @param {StakeCredential} stake_credential\n  * @returns {StakeRegistration}\n  */\n\n\n  static new(stake_credential) {\n    _assertClass(stake_credential, StakeCredential);\n\n    var ret = wasm.stakeregistration_new(stake_credential.ptr);\n    return StakeRegistration.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Strings {\n  static __wrap(ptr) {\n    const obj = Object.create(Strings.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_strings_free(ptr);\n  }\n  /**\n  * @returns {Strings}\n  */\n\n\n  static new() {\n    var ret = wasm.strings_new();\n    return Strings.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.strings_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {string}\n  */\n\n\n  get(index) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.strings_get(retptr, this.ptr, index);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} elem\n  */\n\n\n  add(elem) {\n    var ptr0 = passStringToWasm0(elem, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.strings_add(this.ptr, ptr0, len0);\n  }\n\n}\n/**\n*/\n\nexport class TimelockExpiry {\n  static __wrap(ptr) {\n    const obj = Object.create(TimelockExpiry.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_timelockexpiry_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.timelockexpiry_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TimelockExpiry}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.timelockexpiry_from_bytes(ptr0, len0);\n    return TimelockExpiry.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  slot() {\n    var ret = wasm.timelockexpiry_slot(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} slot\n  * @returns {TimelockExpiry}\n  */\n\n\n  static new(slot) {\n    var ret = wasm.timelockexpiry_new(slot);\n    return TimelockExpiry.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class TimelockStart {\n  static __wrap(ptr) {\n    const obj = Object.create(TimelockStart.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_timelockstart_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.timelockstart_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TimelockStart}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.timelockstart_from_bytes(ptr0, len0);\n    return TimelockStart.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  slot() {\n    var ret = wasm.timelockstart_slot(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} slot\n  * @returns {TimelockStart}\n  */\n\n\n  static new(slot) {\n    var ret = wasm.timelockstart_new(slot);\n    return TimelockStart.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Transaction {\n  static __wrap(ptr) {\n    const obj = Object.create(Transaction.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transaction_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transaction_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Transaction}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transaction_from_bytes(ptr0, len0);\n    return Transaction.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionBody}\n  */\n\n\n  body() {\n    var ret = wasm.transaction_body(this.ptr);\n    return TransactionBody.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionWitnessSet}\n  */\n\n\n  witness_set() {\n    var ret = wasm.transaction_witness_set(this.ptr);\n    return TransactionWitnessSet.__wrap(ret);\n  }\n  /**\n  * @returns {boolean}\n  */\n\n\n  is_valid() {\n    var ret = wasm.transaction_is_valid(this.ptr);\n    return ret !== 0;\n  }\n  /**\n  * @returns {AuxiliaryData | undefined}\n  */\n\n\n  auxiliary_data() {\n    var ret = wasm.transaction_auxiliary_data(this.ptr);\n    return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n  }\n  /**\n  * @param {boolean} valid\n  */\n\n\n  set_is_valid(valid) {\n    wasm.transaction_set_is_valid(this.ptr, valid);\n  }\n  /**\n  * @param {TransactionBody} body\n  * @param {TransactionWitnessSet} witness_set\n  * @param {AuxiliaryData | undefined} auxiliary_data\n  * @returns {Transaction}\n  */\n\n\n  static new(body, witness_set, auxiliary_data) {\n    _assertClass(body, TransactionBody);\n\n    _assertClass(witness_set, TransactionWitnessSet);\n\n    let ptr0 = 0;\n\n    if (!isLikeNone(auxiliary_data)) {\n      _assertClass(auxiliary_data, AuxiliaryData);\n\n      ptr0 = auxiliary_data.ptr;\n      auxiliary_data.ptr = 0;\n    }\n\n    var ret = wasm.transaction_new(body.ptr, witness_set.ptr, ptr0);\n    return Transaction.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class TransactionBodies {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionBodies.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactionbodies_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionbodies_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionBodies}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionbodies_from_bytes(ptr0, len0);\n    return TransactionBodies.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionBodies}\n  */\n\n\n  static new() {\n    var ret = wasm.transactionbodies_new();\n    return TransactionBodies.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.transactionbodies_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {TransactionBody}\n  */\n\n\n  get(index) {\n    var ret = wasm.transactionbodies_get(this.ptr, index);\n    return TransactionBody.__wrap(ret);\n  }\n  /**\n  * @param {TransactionBody} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, TransactionBody);\n\n    wasm.transactionbodies_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class TransactionBody {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionBody.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactionbody_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionbody_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionBody}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionbody_from_bytes(ptr0, len0);\n    return TransactionBody.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionInputs}\n  */\n\n\n  inputs() {\n    var ret = wasm.transactionbody_inputs(this.ptr);\n    return TransactionInputs.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionOutputs}\n  */\n\n\n  outputs() {\n    var ret = wasm.transactionbody_outputs(this.ptr);\n    return TransactionOutputs.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  fee() {\n    var ret = wasm.transactionbody_fee(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  ttl() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionbody_ttl(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return r0 === 0 ? undefined : r1 >>> 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Certificates} certs\n  */\n\n\n  set_certs(certs) {\n    _assertClass(certs, Certificates);\n\n    wasm.transactionbody_set_certs(this.ptr, certs.ptr);\n  }\n  /**\n  * @returns {Certificates | undefined}\n  */\n\n\n  certs() {\n    var ret = wasm.transactionbody_certs(this.ptr);\n    return ret === 0 ? undefined : Certificates.__wrap(ret);\n  }\n  /**\n  * @param {Withdrawals} withdrawals\n  */\n\n\n  set_withdrawals(withdrawals) {\n    _assertClass(withdrawals, Withdrawals);\n\n    wasm.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\n  }\n  /**\n  * @returns {Withdrawals | undefined}\n  */\n\n\n  withdrawals() {\n    var ret = wasm.transactionbody_withdrawals(this.ptr);\n    return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n  }\n  /**\n  * @param {Update} update\n  */\n\n\n  set_update(update) {\n    _assertClass(update, Update);\n\n    wasm.transactionbody_set_update(this.ptr, update.ptr);\n  }\n  /**\n  * @returns {Update | undefined}\n  */\n\n\n  update() {\n    var ret = wasm.transactionbody_update(this.ptr);\n    return ret === 0 ? undefined : Update.__wrap(ret);\n  }\n  /**\n  * @param {AuxiliaryDataHash} auxiliary_data_hash\n  */\n\n\n  set_auxiliary_data_hash(auxiliary_data_hash) {\n    _assertClass(auxiliary_data_hash, AuxiliaryDataHash);\n\n    wasm.transactionbody_set_auxiliary_data_hash(this.ptr, auxiliary_data_hash.ptr);\n  }\n  /**\n  * @returns {AuxiliaryDataHash | undefined}\n  */\n\n\n  auxiliary_data_hash() {\n    var ret = wasm.transactionbody_auxiliary_data_hash(this.ptr);\n    return ret === 0 ? undefined : AuxiliaryDataHash.__wrap(ret);\n  }\n  /**\n  * @param {number} validity_start_interval\n  */\n\n\n  set_validity_start_interval(validity_start_interval) {\n    wasm.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  validity_start_interval() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionbody_validity_start_interval(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return r0 === 0 ? undefined : r1 >>> 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Mint} mint\n  */\n\n\n  set_mint(mint) {\n    _assertClass(mint, Mint);\n\n    wasm.transactionbody_set_mint(this.ptr, mint.ptr);\n  }\n  /**\n  * @returns {Mint | undefined}\n  */\n\n\n  multiassets() {\n    var ret = wasm.transactionbody_multiassets(this.ptr);\n    return ret === 0 ? undefined : Mint.__wrap(ret);\n  }\n  /**\n  * @param {ScriptDataHash} script_data_hash\n  */\n\n\n  set_script_data_hash(script_data_hash) {\n    _assertClass(script_data_hash, ScriptDataHash);\n\n    wasm.transactionbody_set_script_data_hash(this.ptr, script_data_hash.ptr);\n  }\n  /**\n  * @returns {ScriptDataHash | undefined}\n  */\n\n\n  script_data_hash() {\n    var ret = wasm.transactionbody_script_data_hash(this.ptr);\n    return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n  }\n  /**\n  * @param {TransactionInputs} collateral\n  */\n\n\n  set_collateral(collateral) {\n    _assertClass(collateral, TransactionInputs);\n\n    wasm.transactionbody_set_collateral(this.ptr, collateral.ptr);\n  }\n  /**\n  * @returns {TransactionInputs | undefined}\n  */\n\n\n  collateral() {\n    var ret = wasm.transactionbody_collateral(this.ptr);\n    return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n  }\n  /**\n  * @param {Ed25519KeyHashes} required_signers\n  */\n\n\n  set_required_signers(required_signers) {\n    _assertClass(required_signers, Ed25519KeyHashes);\n\n    wasm.transactionbody_set_required_signers(this.ptr, required_signers.ptr);\n  }\n  /**\n  * @returns {Ed25519KeyHashes | undefined}\n  */\n\n\n  required_signers() {\n    var ret = wasm.transactionbody_required_signers(this.ptr);\n    return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n  }\n  /**\n  * @param {NetworkId} network_id\n  */\n\n\n  set_network_id(network_id) {\n    _assertClass(network_id, NetworkId);\n\n    wasm.transactionbody_set_network_id(this.ptr, network_id.ptr);\n  }\n  /**\n  * @returns {NetworkId | undefined}\n  */\n\n\n  network_id() {\n    var ret = wasm.transactionbody_network_id(this.ptr);\n    return ret === 0 ? undefined : NetworkId.__wrap(ret);\n  }\n  /**\n  * @param {TransactionInputs} inputs\n  * @param {TransactionOutputs} outputs\n  * @param {BigNum} fee\n  * @param {number | undefined} ttl\n  * @returns {TransactionBody}\n  */\n\n\n  static new(inputs, outputs, fee, ttl) {\n    _assertClass(inputs, TransactionInputs);\n\n    _assertClass(outputs, TransactionOutputs);\n\n    _assertClass(fee, BigNum);\n\n    var ret = wasm.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, !isLikeNone(ttl), isLikeNone(ttl) ? 0 : ttl);\n    return TransactionBody.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class TransactionBuilder {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionBuilder.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactionbuilder_free(ptr);\n  }\n  /**\n  * @param {Ed25519KeyHash} hash\n  * @param {TransactionInput} input\n  * @param {Value} amount\n  */\n\n\n  add_key_input(hash, input, amount) {\n    _assertClass(hash, Ed25519KeyHash);\n\n    _assertClass(input, TransactionInput);\n\n    _assertClass(amount, Value);\n\n    wasm.transactionbuilder_add_key_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n  }\n  /**\n  * @param {ScriptHash} hash\n  * @param {TransactionInput} input\n  * @param {Value} amount\n  */\n\n\n  add_script_input(hash, input, amount) {\n    _assertClass(hash, ScriptHash);\n\n    _assertClass(input, TransactionInput);\n\n    _assertClass(amount, Value);\n\n    wasm.transactionbuilder_add_script_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n  }\n  /**\n  * @param {ByronAddress} hash\n  * @param {TransactionInput} input\n  * @param {Value} amount\n  */\n\n\n  add_bootstrap_input(hash, input, amount) {\n    _assertClass(hash, ByronAddress);\n\n    _assertClass(input, TransactionInput);\n\n    _assertClass(amount, Value);\n\n    wasm.transactionbuilder_add_bootstrap_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n  }\n  /**\n  * @param {Address} address\n  * @param {TransactionInput} input\n  * @param {Value} amount\n  */\n\n\n  add_input(address, input, amount) {\n    _assertClass(address, Address);\n\n    _assertClass(input, TransactionInput);\n\n    _assertClass(amount, Value);\n\n    wasm.transactionbuilder_add_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n  }\n  /**\n  * calculates how much the fee would increase if you added a given output\n  * @param {Address} address\n  * @param {TransactionInput} input\n  * @param {Value} amount\n  * @returns {BigNum}\n  */\n\n\n  fee_for_input(address, input, amount) {\n    _assertClass(address, Address);\n\n    _assertClass(input, TransactionInput);\n\n    _assertClass(amount, Value);\n\n    var ret = wasm.transactionbuilder_fee_for_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {TransactionOutput} output\n  */\n\n\n  add_output(output) {\n    _assertClass(output, TransactionOutput);\n\n    wasm.transactionbuilder_add_output(this.ptr, output.ptr);\n  }\n  /**\n  * calculates how much the fee would increase if you added a given output\n  * @param {TransactionOutput} output\n  * @returns {BigNum}\n  */\n\n\n  fee_for_output(output) {\n    _assertClass(output, TransactionOutput);\n\n    var ret = wasm.transactionbuilder_fee_for_output(this.ptr, output.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} fee\n  */\n\n\n  set_fee(fee) {\n    _assertClass(fee, BigNum);\n\n    wasm.transactionbuilder_set_fee(this.ptr, fee.ptr);\n  }\n  /**\n  * @param {number} ttl\n  */\n\n\n  set_ttl(ttl) {\n    wasm.transactionbuilder_set_ttl(this.ptr, ttl);\n  }\n  /**\n  * @param {number} validity_start_interval\n  */\n\n\n  set_validity_start_interval(validity_start_interval) {\n    wasm.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval);\n  }\n  /**\n  * @param {Certificates} certs\n  */\n\n\n  set_certs(certs) {\n    _assertClass(certs, Certificates);\n\n    wasm.transactionbuilder_set_certs(this.ptr, certs.ptr);\n  }\n  /**\n  * @param {Withdrawals} withdrawals\n  */\n\n\n  set_withdrawals(withdrawals) {\n    _assertClass(withdrawals, Withdrawals);\n\n    wasm.transactionbuilder_set_withdrawals(this.ptr, withdrawals.ptr);\n  }\n  /**\n  * @param {AuxiliaryData} auxiliary_data\n  */\n\n\n  set_auxiliary_data(auxiliary_data) {\n    _assertClass(auxiliary_data, AuxiliaryData);\n\n    wasm.transactionbuilder_set_auxiliary_data(this.ptr, auxiliary_data.ptr);\n  }\n  /**\n  * @param {LinearFee} linear_fee\n  * @param {BigNum} minimum_utxo_val\n  * @param {BigNum} pool_deposit\n  * @param {BigNum} key_deposit\n  * @param {number} max_value_size\n  * @param {number} max_tx_size\n  * @returns {TransactionBuilder}\n  */\n\n\n  static new(linear_fee, minimum_utxo_val, pool_deposit, key_deposit, max_value_size, max_tx_size) {\n    _assertClass(linear_fee, LinearFee);\n\n    _assertClass(minimum_utxo_val, BigNum);\n\n    _assertClass(pool_deposit, BigNum);\n\n    _assertClass(key_deposit, BigNum);\n\n    var ret = wasm.transactionbuilder_new(linear_fee.ptr, minimum_utxo_val.ptr, pool_deposit.ptr, key_deposit.ptr, max_value_size, max_tx_size);\n    return TransactionBuilder.__wrap(ret);\n  }\n  /**\n  * does not include refunds or withdrawals\n  * @returns {Value}\n  */\n\n\n  get_explicit_input() {\n    var ret = wasm.transactionbuilder_get_explicit_input(this.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * withdrawals and refunds\n  * @returns {Value}\n  */\n\n\n  get_implicit_input() {\n    var ret = wasm.transactionbuilder_get_implicit_input(this.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * does not include fee\n  * @returns {Value}\n  */\n\n\n  get_explicit_output() {\n    var ret = wasm.transactionbuilder_get_explicit_output(this.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  get_deposit() {\n    var ret = wasm.transactionbuilder_get_deposit(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  get_fee_if_set() {\n    var ret = wasm.transactionbuilder_get_fee_if_set(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * Warning: this function will mutate the /fee/ field\n  * @param {Address} address\n  * @returns {boolean}\n  */\n\n\n  add_change_if_needed(address) {\n    _assertClass(address, Address);\n\n    var ret = wasm.transactionbuilder_add_change_if_needed(this.ptr, address.ptr);\n    return ret !== 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  full_size() {\n    var ret = wasm.transactionbuilder_full_size(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {Uint32Array}\n  */\n\n\n  output_sizes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionbuilder_output_sizes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU32FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 4);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {TransactionBody}\n  */\n\n\n  build() {\n    var ret = wasm.transactionbuilder_build(this.ptr);\n    return TransactionBody.__wrap(ret);\n  }\n  /**\n  * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\n  * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\n  * this is done to simplify the library code, but can be fixed later\n  * @returns {BigNum}\n  */\n\n\n  min_fee() {\n    var ret = wasm.transactionbuilder_min_fee(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class TransactionHash {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactionhash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionhash_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.transactionhash_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {TransactionHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionhash_from_bech32(ptr0, len0);\n    return TransactionHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionhash_from_bytes(ptr0, len0);\n    return TransactionHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class TransactionInput {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionInput.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactioninput_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactioninput_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionInput}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactioninput_from_bytes(ptr0, len0);\n    return TransactionInput.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionHash}\n  */\n\n\n  transaction_id() {\n    var ret = wasm.transactioninput_transaction_id(this.ptr);\n    return TransactionHash.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  index() {\n    var ret = wasm.transactioninput_index(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {TransactionHash} transaction_id\n  * @param {number} index\n  * @returns {TransactionInput}\n  */\n\n\n  static new(transaction_id, index) {\n    _assertClass(transaction_id, TransactionHash);\n\n    var ret = wasm.transactioninput_new(transaction_id.ptr, index);\n    return TransactionInput.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class TransactionInputs {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionInputs.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactioninputs_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactioninputs_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionInputs}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactioninputs_from_bytes(ptr0, len0);\n    return TransactionInputs.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionInputs}\n  */\n\n\n  static new() {\n    var ret = wasm.transactioninputs_new();\n    return TransactionInputs.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.transactioninputs_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {TransactionInput}\n  */\n\n\n  get(index) {\n    var ret = wasm.transactioninputs_get(this.ptr, index);\n    return TransactionInput.__wrap(ret);\n  }\n  /**\n  * @param {TransactionInput} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, TransactionInput);\n\n    wasm.transactioninputs_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class TransactionMetadatum {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionMetadatum.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactionmetadatum_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionmetadatum_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionmetadatum_from_bytes(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {MetadataMap} map\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static new_map(map) {\n    _assertClass(map, MetadataMap);\n\n    var ret = wasm.transactionmetadatum_new_map(map.ptr);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {MetadataList} list\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static new_list(list) {\n    _assertClass(list, MetadataList);\n\n    var ret = wasm.transactionmetadatum_new_list(list.ptr);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {Int} int\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static new_int(int) {\n    _assertClass(int, Int);\n\n    var ret = wasm.transactionmetadatum_new_int(int.ptr);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static new_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionmetadatum_new_bytes(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {string} text\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static new_text(text) {\n    var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionmetadatum_new_text(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.transactionmetadatum_kind(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {MetadataMap}\n  */\n\n\n  as_map() {\n    var ret = wasm.transactionmetadatum_as_map(this.ptr);\n    return MetadataMap.__wrap(ret);\n  }\n  /**\n  * @returns {MetadataList}\n  */\n\n\n  as_list() {\n    var ret = wasm.transactionmetadatum_as_list(this.ptr);\n    return MetadataList.__wrap(ret);\n  }\n  /**\n  * @returns {Int}\n  */\n\n\n  as_int() {\n    var ret = wasm.transactionmetadatum_as_int(this.ptr);\n    return Int.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionmetadatum_as_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  as_text() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionmetadatum_as_text(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n\n}\n/**\n*/\n\nexport class TransactionMetadatumLabels {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionMetadatumLabels.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactionmetadatumlabels_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionmetadatumlabels_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionMetadatumLabels}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionmetadatumlabels_from_bytes(ptr0, len0);\n    return TransactionMetadatumLabels.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionMetadatumLabels}\n  */\n\n\n  static new() {\n    var ret = wasm.transactionmetadatumlabels_new();\n    return TransactionMetadatumLabels.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.transactionmetadatumlabels_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {BigNum}\n  */\n\n\n  get(index) {\n    var ret = wasm.transactionmetadatumlabels_get(this.ptr, index);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, BigNum);\n\n    wasm.transactionmetadatumlabels_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class TransactionOutput {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionOutput.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactionoutput_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionoutput_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionOutput}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionoutput_from_bytes(ptr0, len0);\n    return TransactionOutput.__wrap(ret);\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  address() {\n    var ret = wasm.transactionoutput_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @returns {Value}\n  */\n\n\n  amount() {\n    var ret = wasm.transactionoutput_amount(this.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * @returns {DataHash | undefined}\n  */\n\n\n  data_hash() {\n    var ret = wasm.transactionoutput_data_hash(this.ptr);\n    return ret === 0 ? undefined : DataHash.__wrap(ret);\n  }\n  /**\n  * @param {DataHash} data_hash\n  */\n\n\n  set_data_hash(data_hash) {\n    _assertClass(data_hash, DataHash);\n\n    wasm.transactionoutput_set_data_hash(this.ptr, data_hash.ptr);\n  }\n  /**\n  * @param {Address} address\n  * @param {Value} amount\n  * @returns {TransactionOutput}\n  */\n\n\n  static new(address, amount) {\n    _assertClass(address, Address);\n\n    _assertClass(amount, Value);\n\n    var ret = wasm.transactionoutput_new(address.ptr, amount.ptr);\n    return TransactionOutput.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class TransactionOutputs {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionOutputs.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactionoutputs_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionoutputs_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionOutputs}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionoutputs_from_bytes(ptr0, len0);\n    return TransactionOutputs.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionOutputs}\n  */\n\n\n  static new() {\n    var ret = wasm.transactionoutputs_new();\n    return TransactionOutputs.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.transactionoutputs_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {TransactionOutput}\n  */\n\n\n  get(index) {\n    var ret = wasm.transactionoutputs_get(this.ptr, index);\n    return TransactionOutput.__wrap(ret);\n  }\n  /**\n  * @param {TransactionOutput} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, TransactionOutput);\n\n    wasm.transactionoutputs_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class TransactionUnspentOutput {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionUnspentOutput.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactionunspentoutput_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionunspentoutput_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionUnspentOutput}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionunspentoutput_from_bytes(ptr0, len0);\n    return TransactionUnspentOutput.__wrap(ret);\n  }\n  /**\n  * @param {TransactionInput} input\n  * @param {TransactionOutput} output\n  * @returns {TransactionUnspentOutput}\n  */\n\n\n  static new(input, output) {\n    _assertClass(input, TransactionInput);\n\n    _assertClass(output, TransactionOutput);\n\n    var ret = wasm.transactionunspentoutput_new(input.ptr, output.ptr);\n    return TransactionUnspentOutput.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionInput}\n  */\n\n\n  input() {\n    var ret = wasm.transactionunspentoutput_input(this.ptr);\n    return TransactionInput.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionOutput}\n  */\n\n\n  output() {\n    var ret = wasm.transactionunspentoutput_output(this.ptr);\n    return TransactionOutput.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class TransactionWitnessSet {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionWitnessSet.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactionwitnessset_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionwitnessset_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionWitnessSet}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionwitnessset_from_bytes(ptr0, len0);\n    return TransactionWitnessSet.__wrap(ret);\n  }\n  /**\n  * @param {Vkeywitnesses} vkeys\n  */\n\n\n  set_vkeys(vkeys) {\n    _assertClass(vkeys, Vkeywitnesses);\n\n    wasm.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\n  }\n  /**\n  * @returns {Vkeywitnesses | undefined}\n  */\n\n\n  vkeys() {\n    var ret = wasm.transactionwitnessset_vkeys(this.ptr);\n    return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\n  }\n  /**\n  * @param {NativeScripts} native_scripts\n  */\n\n\n  set_native_scripts(native_scripts) {\n    _assertClass(native_scripts, NativeScripts);\n\n    wasm.transactionwitnessset_set_native_scripts(this.ptr, native_scripts.ptr);\n  }\n  /**\n  * @returns {NativeScripts | undefined}\n  */\n\n\n  native_scripts() {\n    var ret = wasm.transactionwitnessset_native_scripts(this.ptr);\n    return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n  }\n  /**\n  * @param {BootstrapWitnesses} bootstraps\n  */\n\n\n  set_bootstraps(bootstraps) {\n    _assertClass(bootstraps, BootstrapWitnesses);\n\n    wasm.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\n  }\n  /**\n  * @returns {BootstrapWitnesses | undefined}\n  */\n\n\n  bootstraps() {\n    var ret = wasm.transactionwitnessset_bootstraps(this.ptr);\n    return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\n  }\n  /**\n  * @param {PlutusScripts} plutus_scripts\n  */\n\n\n  set_plutus_scripts(plutus_scripts) {\n    _assertClass(plutus_scripts, PlutusScripts);\n\n    wasm.transactionwitnessset_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n  }\n  /**\n  * @returns {PlutusScripts | undefined}\n  */\n\n\n  plutus_scripts() {\n    var ret = wasm.transactionwitnessset_plutus_scripts(this.ptr);\n    return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n  }\n  /**\n  * @param {PlutusList} plutus_data\n  */\n\n\n  set_plutus_data(plutus_data) {\n    _assertClass(plutus_data, PlutusList);\n\n    wasm.transactionwitnessset_set_plutus_data(this.ptr, plutus_data.ptr);\n  }\n  /**\n  * @returns {PlutusList | undefined}\n  */\n\n\n  plutus_data() {\n    var ret = wasm.transactionwitnessset_plutus_data(this.ptr);\n    return ret === 0 ? undefined : PlutusList.__wrap(ret);\n  }\n  /**\n  * @param {Redeemers} redeemers\n  */\n\n\n  set_redeemers(redeemers) {\n    _assertClass(redeemers, Redeemers);\n\n    wasm.transactionwitnessset_set_redeemers(this.ptr, redeemers.ptr);\n  }\n  /**\n  * @returns {Redeemers | undefined}\n  */\n\n\n  redeemers() {\n    var ret = wasm.transactionwitnessset_redeemers(this.ptr);\n    return ret === 0 ? undefined : Redeemers.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionWitnessSet}\n  */\n\n\n  static new() {\n    var ret = wasm.transactionwitnessset_new();\n    return TransactionWitnessSet.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class TransactionWitnessSets {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionWitnessSets.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_transactionwitnesssets_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.transactionwitnesssets_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionWitnessSets}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionwitnesssets_from_bytes(ptr0, len0);\n    return TransactionWitnessSets.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionWitnessSets}\n  */\n\n\n  static new() {\n    var ret = wasm.transactionwitnesssets_new();\n    return TransactionWitnessSets.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.transactionwitnesssets_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {TransactionWitnessSet}\n  */\n\n\n  get(index) {\n    var ret = wasm.transactionwitnesssets_get(this.ptr, index);\n    return TransactionWitnessSet.__wrap(ret);\n  }\n  /**\n  * @param {TransactionWitnessSet} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, TransactionWitnessSet);\n\n    wasm.transactionwitnesssets_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class URL {\n  static __wrap(ptr) {\n    const obj = Object.create(URL.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_url_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.url_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {URL}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.url_from_bytes(ptr0, len0);\n    return URL.__wrap(ret);\n  }\n  /**\n  * @param {string} url\n  * @returns {URL}\n  */\n\n\n  static new(url) {\n    var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.url_new(ptr0, len0);\n    return URL.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  url() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.url_url(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n\n}\n/**\n*/\n\nexport class UnitInterval {\n  static __wrap(ptr) {\n    const obj = Object.create(UnitInterval.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_unitinterval_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.unitinterval_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {UnitInterval}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.unitinterval_from_bytes(ptr0, len0);\n    return UnitInterval.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  numerator() {\n    var ret = wasm.unitinterval_numerator(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  denominator() {\n    var ret = wasm.unitinterval_denominator(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} numerator\n  * @param {BigNum} denominator\n  * @returns {UnitInterval}\n  */\n\n\n  static new(numerator, denominator) {\n    _assertClass(numerator, BigNum);\n\n    _assertClass(denominator, BigNum);\n\n    var ret = wasm.unitinterval_new(numerator.ptr, denominator.ptr);\n    return UnitInterval.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Update {\n  static __wrap(ptr) {\n    const obj = Object.create(Update.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_update_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.update_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Update}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.update_from_bytes(ptr0, len0);\n    return Update.__wrap(ret);\n  }\n  /**\n  * @returns {ProposedProtocolParameterUpdates}\n  */\n\n\n  proposed_protocol_parameter_updates() {\n    var ret = wasm.update_proposed_protocol_parameter_updates(this.ptr);\n    return ProposedProtocolParameterUpdates.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  epoch() {\n    var ret = wasm.update_epoch(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\n  * @param {number} epoch\n  * @returns {Update}\n  */\n\n\n  static new(proposed_protocol_parameter_updates, epoch) {\n    _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\n\n    var ret = wasm.update_new(proposed_protocol_parameter_updates.ptr, epoch);\n    return Update.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class VRFCert {\n  static __wrap(ptr) {\n    const obj = Object.create(VRFCert.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_vrfcert_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.vrfcert_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {VRFCert}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfcert_from_bytes(ptr0, len0);\n    return VRFCert.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  output() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.vrfcert_output(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  proof() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.vrfcert_proof(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} output\n  * @param {Uint8Array} proof\n  * @returns {VRFCert}\n  */\n\n\n  static new(output, proof) {\n    var ptr0 = passArray8ToWasm0(output, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(proof, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfcert_new(ptr0, len0, ptr1, len1);\n    return VRFCert.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class VRFKeyHash {\n  static __wrap(ptr) {\n    const obj = Object.create(VRFKeyHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_vrfkeyhash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.vrfkeyhash_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.vrfkeyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {VRFKeyHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfkeyhash_from_bech32(ptr0, len0);\n    return VRFKeyHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {VRFKeyHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfkeyhash_from_bytes(ptr0, len0);\n    return VRFKeyHash.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class VRFVKey {\n  static __wrap(ptr) {\n    const obj = Object.create(VRFVKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_vrfvkey_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.vrfvkey_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.vrfvkey_to_bech32(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {VRFVKey}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfvkey_from_bech32(ptr0, len0);\n    return VRFVKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {VRFVKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfvkey_from_bytes(ptr0, len0);\n    return VRFVKey.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Value {\n  static __wrap(ptr) {\n    const obj = Object.create(Value.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_value_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.value_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Value}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.value_from_bytes(ptr0, len0);\n    return Value.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} coin\n  * @returns {Value}\n  */\n\n\n  static new(coin) {\n    _assertClass(coin, BigNum);\n\n    var ret = wasm.value_new(coin.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  coin() {\n    var ret = wasm.value_coin(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} coin\n  */\n\n\n  set_coin(coin) {\n    _assertClass(coin, BigNum);\n\n    wasm.value_set_coin(this.ptr, coin.ptr);\n  }\n  /**\n  * @returns {MultiAsset | undefined}\n  */\n\n\n  multiasset() {\n    var ret = wasm.value_multiasset(this.ptr);\n    return ret === 0 ? undefined : MultiAsset.__wrap(ret);\n  }\n  /**\n  * @param {MultiAsset} multiasset\n  */\n\n\n  set_multiasset(multiasset) {\n    _assertClass(multiasset, MultiAsset);\n\n    wasm.value_set_multiasset(this.ptr, multiasset.ptr);\n  }\n  /**\n  * @param {Value} rhs\n  * @returns {Value}\n  */\n\n\n  checked_add(rhs) {\n    _assertClass(rhs, Value);\n\n    var ret = wasm.value_checked_add(this.ptr, rhs.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * @param {Value} rhs_value\n  * @returns {Value}\n  */\n\n\n  checked_sub(rhs_value) {\n    _assertClass(rhs_value, Value);\n\n    var ret = wasm.value_checked_sub(this.ptr, rhs_value.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * @param {Value} rhs_value\n  * @returns {Value}\n  */\n\n\n  clamped_sub(rhs_value) {\n    _assertClass(rhs_value, Value);\n\n    var ret = wasm.value_clamped_sub(this.ptr, rhs_value.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * note: values are only partially comparable\n  * @param {Value} rhs_value\n  * @returns {number | undefined}\n  */\n\n\n  compare(rhs_value) {\n    _assertClass(rhs_value, Value);\n\n    var ret = wasm.value_compare(this.ptr, rhs_value.ptr);\n    return ret === 0xFFFFFF ? undefined : ret;\n  }\n\n}\n/**\n*/\n\nexport class Vkey {\n  static __wrap(ptr) {\n    const obj = Object.create(Vkey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_vkey_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.vkey_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Vkey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vkey_from_bytes(ptr0, len0);\n    return Vkey.__wrap(ret);\n  }\n  /**\n  * @param {PublicKey} pk\n  * @returns {Vkey}\n  */\n\n\n  static new(pk) {\n    _assertClass(pk, PublicKey);\n\n    var ret = wasm.vkey_new(pk.ptr);\n    return Vkey.__wrap(ret);\n  }\n  /**\n  * @returns {PublicKey}\n  */\n\n\n  public_key() {\n    var ret = wasm.vkey_public_key(this.ptr);\n    return PublicKey.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Vkeys {\n  static __wrap(ptr) {\n    const obj = Object.create(Vkeys.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_vkeys_free(ptr);\n  }\n  /**\n  * @returns {Vkeys}\n  */\n\n\n  static new() {\n    var ret = wasm.vkeys_new();\n    return Vkeys.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.vkeys_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {Vkey}\n  */\n\n\n  get(index) {\n    var ret = wasm.vkeys_get(this.ptr, index);\n    return Vkey.__wrap(ret);\n  }\n  /**\n  * @param {Vkey} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, Vkey);\n\n    wasm.vkeys_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class Vkeywitness {\n  static __wrap(ptr) {\n    const obj = Object.create(Vkeywitness.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_vkeywitness_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.vkeywitness_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Vkeywitness}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vkeywitness_from_bytes(ptr0, len0);\n    return Vkeywitness.__wrap(ret);\n  }\n  /**\n  * @param {Vkey} vkey\n  * @param {Ed25519Signature} signature\n  * @returns {Vkeywitness}\n  */\n\n\n  static new(vkey, signature) {\n    _assertClass(vkey, Vkey);\n\n    _assertClass(signature, Ed25519Signature);\n\n    var ret = wasm.vkeywitness_new(vkey.ptr, signature.ptr);\n    return Vkeywitness.__wrap(ret);\n  }\n  /**\n  * @returns {Vkey}\n  */\n\n\n  vkey() {\n    var ret = wasm.vkeywitness_vkey(this.ptr);\n    return Vkey.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519Signature}\n  */\n\n\n  signature() {\n    var ret = wasm.vkeywitness_signature(this.ptr);\n    return Ed25519Signature.__wrap(ret);\n  }\n\n}\n/**\n*/\n\nexport class Vkeywitnesses {\n  static __wrap(ptr) {\n    const obj = Object.create(Vkeywitnesses.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_vkeywitnesses_free(ptr);\n  }\n  /**\n  * @returns {Vkeywitnesses}\n  */\n\n\n  static new() {\n    var ret = wasm.vkeywitnesses_new();\n    return Vkeywitnesses.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.vkeywitnesses_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {Vkeywitness}\n  */\n\n\n  get(index) {\n    var ret = wasm.vkeywitnesses_get(this.ptr, index);\n    return Vkeywitness.__wrap(ret);\n  }\n  /**\n  * @param {Vkeywitness} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, Vkeywitness);\n\n    wasm.vkeywitnesses_add(this.ptr, elem.ptr);\n  }\n\n}\n/**\n*/\n\nexport class Withdrawals {\n  static __wrap(ptr) {\n    const obj = Object.create(Withdrawals.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n\n  free() {\n    const ptr = this.__destroy_into_raw();\n\n    wasm.__wbg_withdrawals_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n      wasm.withdrawals_to_bytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Withdrawals}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.withdrawals_from_bytes(ptr0, len0);\n    return Withdrawals.__wrap(ret);\n  }\n  /**\n  * @returns {Withdrawals}\n  */\n\n\n  static new() {\n    var ret = wasm.withdrawals_new();\n    return Withdrawals.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.withdrawals_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {RewardAddress} key\n  * @param {BigNum} value\n  * @returns {BigNum | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, RewardAddress);\n\n    _assertClass(value, BigNum);\n\n    var ret = wasm.withdrawals_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {RewardAddress} key\n  * @returns {BigNum | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, RewardAddress);\n\n    var ret = wasm.withdrawals_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {RewardAddresses}\n  */\n\n\n  keys() {\n    var ret = wasm.withdrawals_keys(this.ptr);\n    return RewardAddresses.__wrap(ret);\n  }\n\n}\nexport function __wbindgen_object_drop_ref(arg0) {\n  takeObject(arg0);\n}\n;\nexport function __wbindgen_string_new(arg0, arg1) {\n  var ret = getStringFromWasm0(arg0, arg1);\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_new_3a746f2619705add(arg0, arg1) {\n  var ret = new Function(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_call_f54d3a6dadb199ca(arg0, arg1) {\n  var ret = getObject(arg0).call(getObject(arg1));\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n  var ret = getObject(arg0) === getObject(arg1);\n  return ret;\n}\n;\nexport function __wbg_self_ac379e780a0d8b94(arg0) {\n  var ret = getObject(arg0).self;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_crypto_1e4302b85d4f64a2(arg0) {\n  var ret = getObject(arg0).crypto;\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_is_undefined(arg0) {\n  var ret = getObject(arg0) === undefined;\n  return ret;\n}\n;\nexport function __wbg_getRandomValues_1b4ba144162a5c9e(arg0) {\n  var ret = getObject(arg0).getRandomValues;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_require_6461b1e9a0d7c34a(arg0, arg1) {\n  var ret = require(getStringFromWasm0(arg0, arg1));\n\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_randomFillSync_1b52c8482374c55b(arg0, arg1, arg2) {\n  getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n}\n;\nexport function __wbg_getRandomValues_1ef11e888e5228e9(arg0, arg1, arg2) {\n  getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\n}\n;\nexport function __wbindgen_string_get(arg0, arg1) {\n  const obj = getObject(arg1);\n  var ret = typeof obj === 'string' ? obj : undefined;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n}\n;\nexport function __wbindgen_debug_string(arg0, arg1) {\n  var ret = debugString(getObject(arg1));\n  var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n}\n;\nexport function __wbindgen_throw(arg0, arg1) {\n  throw new Error(getStringFromWasm0(arg0, arg1));\n}\n;\nexport function __wbindgen_rethrow(arg0) {\n  throw takeObject(arg0);\n}\n;","map":{"version":3,"sources":["/Users/vyasartix/workspace/AceLayrBridgeDemo/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js"],"names":["wasm","heap","Array","fill","undefined","push","getObject","idx","heap_next","length","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","isLikeNone","x","cachegetInt32Memory0","getInt32Memory0","Int32Array","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","getArrayU8FromWasm0","passArray8ToWasm0","_assertClass","instance","klass","cachegetUint32Memory0","getUint32Memory0","Uint32Array","getArrayU32FromWasm0","passArray32ToWasm0","encode_arbitrary_bytes_as_metadatum","bytes","ptr0","__wbindgen_malloc","len0","TransactionMetadatum","__wrap","decode_arbitrary_bytes_from_metadatum","metadata","retptr","__wbindgen_add_to_stack_pointer","r0","r1","v0","__wbindgen_free","encode_json_str_to_metadatum","json","schema","__wbindgen_realloc","decode_metadatum_to_json_str","metadatum","encrypt_with_password","password","salt","nonce","data","ptr1","len1","ptr2","len2","ptr3","len3","decrypt_with_password","min_fee","tx","linear_fee","Transaction","LinearFee","BigNum","make_daedalus_bootstrap_witness","tx_body_hash","addr","key","TransactionHash","ByronAddress","LegacyDaedalusPrivateKey","BootstrapWitness","make_icarus_bootstrap_witness","Bip32PrivateKey","make_vkey_witness","sk","PrivateKey","Vkeywitness","hash_auxiliary_data","auxiliary_data","AuxiliaryData","AuxiliaryDataHash","hash_transaction","tx_body","TransactionBody","hash_plutus_data","plutus_data","PlutusData","DataHash","hash_script_data","redeemers","cost_models","datums","Redeemers","Costmdls","PlutusList","ScriptDataHash","get_implicit_input","txbody","pool_deposit","key_deposit","Value","get_deposit","min_ada_required","assets","minimum_utxo_val","CertificateKind","Object","freeze","StakeRegistration","StakeDeregistration","StakeDelegation","PoolRegistration","PoolRetirement","GenesisKeyDelegation","MoveInstantaneousRewardsCert","MIRPot","Reserves","Treasury","MIRKind","ToOtherPot","ToStakeCredentials","RelayKind","SingleHostAddr","SingleHostName","MultiHostName","NativeScriptKind","ScriptPubkey","ScriptAll","ScriptAny","ScriptNOfK","TimelockStart","TimelockExpiry","ScriptHashNamespace","NativeScript","NetworkIdKind","Testnet","Mainnet","TransactionMetadatumKind","MetadataMap","MetadataList","Int","Bytes","Text","MetadataJsonSchema","NoConversions","BasicConversions","DetailedSchema","LanguageKind","PlutusV1","PlutusDataKind","ConstrPlutusData","Map","List","Integer","RedeemerTagKind","Spend","Mint","Cert","Reward","Address","create","prototype","__destroy_into_raw","free","__wbg_address_free","from_bytes","address_from_bytes","to_bytes","address_to_bytes","to_bech32","prefix","address_to_bech32","from_bech32","bech_str","address_from_bech32","network_id","address_network_id","AssetName","__wbg_assetname_free","assetname_to_bytes","assetname_from_bytes","new","assetname_new","assetname_name","AssetNames","__wbg_assetnames_free","assetnames_to_bytes","assetnames_from_bytes","assetnames_new","assetnames_len","get","index","assetnames_get","add","elem","assetnames_add","Assets","__wbg_assets_free","assets_to_bytes","assets_from_bytes","assets_new","assets_len","insert","value","assets_insert","assets_get","keys","assets_keys","__wbg_auxiliarydata_free","auxiliarydata_to_bytes","auxiliarydata_from_bytes","auxiliarydata_new","auxiliarydata_metadata","GeneralTransactionMetadata","set_metadata","auxiliarydata_set_metadata","native_scripts","auxiliarydata_native_scripts","NativeScripts","set_native_scripts","auxiliarydata_set_native_scripts","plutus_scripts","auxiliarydata_plutus_scripts","PlutusScripts","set_plutus_scripts","auxiliarydata_set_plutus_scripts","__wbg_auxiliarydatahash_free","auxiliarydatahash_to_bytes","auxiliarydatahash_to_bech32","auxiliarydatahash_from_bech32","auxiliarydatahash_from_bytes","AuxiliaryDataSet","__wbg_auxiliarydataset_free","auxiliarydataset_new","auxiliarydataset_len","tx_index","auxiliarydataset_insert","auxiliarydataset_get","indices","auxiliarydataset_indices","BaseAddress","__wbg_baseaddress_free","network","payment","stake","StakeCredential","baseaddress_new","payment_cred","baseaddress_payment_cred","stake_cred","baseaddress_stake_cred","to_address","baseaddress_to_address","from_address","baseaddress_from_address","BigInt","__wbg_bigint_free","bigint_to_bytes","bigint_from_bytes","as_u64","bigint_as_u64","from_str","text","bigint_from_str","to_str","bigint_to_str","__wbg_bignum_free","bignum_to_bytes","bignum_from_bytes","string","bignum_from_str","bignum_to_str","zero","bignum_zero","checked_mul","other","bignum_checked_mul","checked_add","bignum_checked_add","checked_sub","bignum_checked_sub","clamped_sub","bignum_clamped_sub","compare","rhs_value","bignum_compare","__wbg_bip32privatekey_free","derive","bip32privatekey_derive","from_128_xprv","bip32privatekey_from_128_xprv","to_128_xprv","bip32privatekey_to_128_xprv","generate_ed25519_bip32","bip32privatekey_generate_ed25519_bip32","to_raw_key","bip32privatekey_to_raw_key","to_public","bip32privatekey_to_public","Bip32PublicKey","bip32privatekey_from_bytes","as_bytes","bip32privatekey_as_bytes","bech32_str","bip32privatekey_from_bech32","bip32privatekey_to_bech32","from_bip39_entropy","entropy","bip32privatekey_from_bip39_entropy","chaincode","bip32privatekey_chaincode","__wbg_bip32publickey_free","bip32publickey_derive","bip32publickey_to_raw_key","PublicKey","bip32publickey_from_bytes","bip32publickey_as_bytes","bip32publickey_from_bech32","bip32publickey_to_bech32","bip32publickey_chaincode","Block","__wbg_block_free","block_to_bytes","block_from_bytes","header","block_header","Header","transaction_bodies","block_transaction_bodies","TransactionBodies","transaction_witness_sets","block_transaction_witness_sets","TransactionWitnessSets","auxiliary_data_set","block_auxiliary_data_set","invalid_transactions","block_invalid_transactions","block_new","BlockHash","__wbg_blockhash_free","blockhash_to_bytes","blockhash_to_bech32","blockhash_from_bech32","blockhash_from_bytes","__wbg_bootstrapwitness_free","bootstrapwitness_to_bytes","bootstrapwitness_from_bytes","vkey","bootstrapwitness_vkey","Vkey","signature","bootstrapwitness_signature","Ed25519Signature","chain_code","bootstrapwitness_chain_code","attributes","bootstrapwitness_attributes","bootstrapwitness_new","BootstrapWitnesses","__wbg_bootstrapwitnesses_free","bootstrapwitnesses_new","bootstrapwitnesses_len","bootstrapwitnesses_get","bootstrapwitnesses_add","__wbg_byronaddress_free","to_base58","byronaddress_to_base58","byronaddress_to_bytes","byronaddress_from_bytes","byron_protocol_magic","byronaddress_byron_protocol_magic","byronaddress_attributes","byronaddress_network_id","from_base58","s","byronaddress_from_base58","icarus_from_key","protocol_magic","byronaddress_icarus_from_key","is_valid","byronaddress_is_valid","byronaddress_to_address","byronaddress_from_address","Certificate","__wbg_certificate_free","certificate_to_bytes","certificate_from_bytes","new_stake_registration","stake_registration","certificate_new_stake_registration","new_stake_deregistration","stake_deregistration","certificate_new_stake_deregistration","new_stake_delegation","stake_delegation","certificate_new_stake_delegation","new_pool_registration","pool_registration","certificate_new_pool_registration","new_pool_retirement","pool_retirement","certificate_new_pool_retirement","new_genesis_key_delegation","genesis_key_delegation","certificate_new_genesis_key_delegation","new_move_instantaneous_rewards_cert","move_instantaneous_rewards_cert","certificate_new_move_instantaneous_rewards_cert","kind","certificate_kind","as_stake_registration","certificate_as_stake_registration","as_stake_deregistration","certificate_as_stake_deregistration","as_stake_delegation","certificate_as_stake_delegation","as_pool_registration","certificate_as_pool_registration","as_pool_retirement","certificate_as_pool_retirement","as_genesis_key_delegation","certificate_as_genesis_key_delegation","as_move_instantaneous_rewards_cert","certificate_as_move_instantaneous_rewards_cert","Certificates","__wbg_certificates_free","certificates_to_bytes","certificates_from_bytes","certificates_new","certificates_len","certificates_get","certificates_add","__wbg_constrplutusdata_free","constrplutusdata_to_bytes","constrplutusdata_from_bytes","tag","constrplutusdata_tag","constrplutusdata_data","constrplutusdata_new","CostModel","__wbg_costmodel_free","costmodel_to_bytes","costmodel_from_bytes","costmodel_new","operation","cost","costmodel_set","costmodel_get","__wbg_costmdls_free","costmdls_to_bytes","costmdls_from_bytes","costmdls_new","costmdls_len","Language","costmdls_insert","costmdls_get","costmdls_keys","Languages","DNSRecordAorAAAA","__wbg_dnsrecordaoraaaa_free","dnsrecordaoraaaa_to_bytes","dnsrecordaoraaaa_from_bytes","dns_name","dnsrecordaoraaaa_new","record","dnsrecordaoraaaa_record","DNSRecordSRV","__wbg_dnsrecordsrv_free","dnsrecordsrv_to_bytes","dnsrecordsrv_from_bytes","dnsrecordsrv_new","dnsrecordsrv_record","__wbg_datahash_free","datahash_to_bytes","datahash_to_bech32","datahash_from_bech32","datahash_from_bytes","Ed25519KeyHash","__wbg_ed25519keyhash_free","ed25519keyhash_to_bytes","ed25519keyhash_to_bech32","ed25519keyhash_from_bech32","ed25519keyhash_from_bytes","Ed25519KeyHashes","__wbg_ed25519keyhashes_free","ed25519keyhashes_to_bytes","ed25519keyhashes_from_bytes","ed25519keyhashes_new","ed25519keyhashes_len","ed25519keyhashes_get","ed25519keyhashes_add","__wbg_ed25519signature_free","ed25519signature_to_bytes","ed25519signature_to_bech32","to_hex","ed25519signature_to_hex","ed25519signature_from_bech32","from_hex","input","ed25519signature_from_hex","ed25519signature_from_bytes","EnterpriseAddress","__wbg_enterpriseaddress_free","enterpriseaddress_new","enterpriseaddress_payment_cred","enterpriseaddress_to_address","enterpriseaddress_from_address","ExUnitPrices","__wbg_exunitprices_free","exunitprices_to_bytes","exunitprices_from_bytes","mem_price","exunitprices_mem_price","UnitInterval","step_price","exunitprices_step_price","exunitprices_new","ExUnits","__wbg_exunits_free","exunits_to_bytes","exunits_from_bytes","exunits_mem","steps","exunits_steps","exunits_new","__wbg_generaltransactionmetadata_free","generaltransactionmetadata_to_bytes","generaltransactionmetadata_from_bytes","generaltransactionmetadata_new","generaltransactionmetadata_len","generaltransactionmetadata_insert","generaltransactionmetadata_get","generaltransactionmetadata_keys","TransactionMetadatumLabels","GenesisDelegateHash","__wbg_genesisdelegatehash_free","genesisdelegatehash_to_bytes","genesisdelegatehash_to_bech32","genesisdelegatehash_from_bech32","genesisdelegatehash_from_bytes","GenesisHash","__wbg_genesishash_free","genesishash_to_bytes","genesishash_to_bech32","genesishash_from_bech32","genesishash_from_bytes","GenesisHashes","__wbg_genesishashes_free","genesishashes_to_bytes","genesishashes_from_bytes","genesishashes_new","genesishashes_len","genesishashes_get","genesishashes_add","__wbg_genesiskeydelegation_free","genesiskeydelegation_to_bytes","genesiskeydelegation_from_bytes","genesishash","genesiskeydelegation_genesishash","genesis_delegate_hash","genesiskeydelegation_genesis_delegate_hash","vrf_keyhash","genesiskeydelegation_vrf_keyhash","VRFKeyHash","genesiskeydelegation_new","__wbg_header_free","header_to_bytes","header_from_bytes","header_body","header_header_body","HeaderBody","body_signature","header_body_signature","KESSignature","header_new","__wbg_headerbody_free","headerbody_to_bytes","headerbody_from_bytes","block_number","headerbody_block_number","slot","headerbody_slot","prev_hash","headerbody_prev_hash","issuer_vkey","headerbody_issuer_vkey","vrf_vkey","headerbody_vrf_vkey","VRFVKey","nonce_vrf","headerbody_nonce_vrf","VRFCert","leader_vrf","headerbody_leader_vrf","block_body_size","headerbody_block_body_size","block_body_hash","headerbody_block_body_hash","operational_cert","headerbody_operational_cert","OperationalCert","protocol_version","headerbody_protocol_version","ProtocolVersion","headerbody_new","__wbg_int_free","int_new","new_negative","int_new_negative","new_i32","int_new_i32","is_positive","int_is_positive","as_positive","int_as_positive","as_negative","int_as_negative","as_i32","int_as_i32","Ipv4","__wbg_ipv4_free","ipv4_to_bytes","ipv4_from_bytes","ipv4_new","ip","ipv4_ip","Ipv6","__wbg_ipv6_free","ipv6_to_bytes","ipv6_from_bytes","ipv6_new","ipv6_ip","__wbg_kessignature_free","kessignature_to_bytes","kessignature_from_bytes","KESVKey","__wbg_kesvkey_free","kesvkey_to_bytes","kesvkey_to_bech32","kesvkey_from_bech32","kesvkey_from_bytes","__wbg_language_free","language_to_bytes","language_from_bytes","new_plutus_v1","language_new_plutus_v1","language_kind","__wbg_languages_free","languages_new","languages_len","languages_get","languages_add","__wbg_legacydaedalusprivatekey_free","legacydaedalusprivatekey_from_bytes","legacydaedalusprivatekey_as_bytes","legacydaedalusprivatekey_chaincode","__wbg_linearfee_free","constant","linearfee_constant","coefficient","linearfee_coefficient","linearfee_new","MIRToStakeCredentials","__wbg_mirtostakecredentials_free","mirtostakecredentials_to_bytes","mirtostakecredentials_from_bytes","mirtostakecredentials_new","mirtostakecredentials_len","cred","delta","mirtostakecredentials_insert","mirtostakecredentials_get","mirtostakecredentials_keys","StakeCredentials","__wbg_metadatalist_free","metadatalist_to_bytes","metadatalist_from_bytes","metadatalist_new","metadatalist_len","metadatalist_get","metadatalist_add","__wbg_metadatamap_free","metadatamap_to_bytes","metadatamap_from_bytes","metadatamap_new","metadatamap_len","metadatamap_insert","insert_str","metadatamap_insert_str","insert_i32","metadatamap_insert_i32","metadatamap_get","get_str","metadatamap_get_str","get_i32","metadatamap_get_i32","has","metadatamap_has","metadatamap_keys","__wbg_mint_free","mint_to_bytes","mint_from_bytes","mint_new","mint_len","ScriptHash","MintAssets","mint_insert","mint_get","mint_keys","ScriptHashes","__wbg_mintassets_free","mintassets_new","mintassets_len","mintassets_insert","mintassets_get","mintassets_keys","MoveInstantaneousReward","__wbg_moveinstantaneousreward_free","moveinstantaneousreward_to_bytes","moveinstantaneousreward_from_bytes","new_to_other_pot","pot","amount","moveinstantaneousreward_new_to_other_pot","new_to_stake_creds","amounts","moveinstantaneousreward_new_to_stake_creds","moveinstantaneousreward_pot","moveinstantaneousreward_kind","as_to_other_pot","moveinstantaneousreward_as_to_other_pot","as_to_stake_creds","moveinstantaneousreward_as_to_stake_creds","__wbg_moveinstantaneousrewardscert_free","moveinstantaneousrewardscert_to_bytes","moveinstantaneousrewardscert_from_bytes","move_instantaneous_reward","moveinstantaneousrewardscert_move_instantaneous_reward","moveinstantaneousrewardscert_new","MultiAsset","__wbg_multiasset_free","multiasset_to_bytes","multiasset_from_bytes","multiasset_new","multiasset_len","multiasset_insert","multiasset_get","multiasset_keys","sub","rhs_ma","multiasset_sub","__wbg_multihostname_free","multihostname_to_bytes","multihostname_from_bytes","multihostname_dns_name","multihostname_new","__wbg_nativescript_free","nativescript_to_bytes","nativescript_from_bytes","hash","namespace","nativescript_hash","new_script_pubkey","script_pubkey","nativescript_new_script_pubkey","new_script_all","script_all","nativescript_new_script_all","new_script_any","script_any","nativescript_new_script_any","new_script_n_of_k","script_n_of_k","nativescript_new_script_n_of_k","new_timelock_start","timelock_start","nativescript_new_timelock_start","new_timelock_expiry","timelock_expiry","nativescript_new_timelock_expiry","nativescript_kind","as_script_pubkey","nativescript_as_script_pubkey","as_script_all","nativescript_as_script_all","as_script_any","nativescript_as_script_any","as_script_n_of_k","nativescript_as_script_n_of_k","as_timelock_start","nativescript_as_timelock_start","as_timelock_expiry","nativescript_as_timelock_expiry","__wbg_nativescripts_free","nativescripts_new","nativescripts_len","nativescripts_get","nativescripts_add","NetworkId","__wbg_networkid_free","networkid_to_bytes","networkid_from_bytes","testnet","networkid_testnet","mainnet","networkid_mainnet","networkid_kind","NetworkInfo","__wbg_networkinfo_free","networkinfo_new","networkinfo_network_id","networkinfo_protocol_magic","networkinfo_testnet","networkinfo_mainnet","Nonce","__wbg_nonce_free","nonce_to_bytes","nonce_from_bytes","new_identity","nonce_new_identity","new_from_hash","nonce_new_from_hash","get_hash","nonce_get_hash","__wbg_operationalcert_free","operationalcert_to_bytes","operationalcert_from_bytes","hot_vkey","operationalcert_hot_vkey","sequence_number","operationalcert_sequence_number","kes_period","operationalcert_kes_period","sigma","operationalcert_sigma","operationalcert_new","__wbg_plutusdata_free","plutusdata_to_bytes","plutusdata_from_bytes","new_constr_plutus_data","constr_plutus_data","plutusdata_new_constr_plutus_data","new_map","map","PlutusMap","plutusdata_new_map","new_list","list","plutusdata_new_list","new_integer","integer","plutusdata_new_integer","new_bytes","plutusdata_new_bytes","plutusdata_kind","as_constr_plutus_data","plutusdata_as_constr_plutus_data","as_map","plutusdata_as_map","as_list","plutusdata_as_list","as_integer","plutusdata_as_integer","plutusdata_as_bytes","__wbg_plutuslist_free","plutuslist_to_bytes","plutuslist_from_bytes","plutuslist_new","plutuslist_len","plutuslist_get","plutuslist_add","__wbg_plutusmap_free","plutusmap_to_bytes","plutusmap_from_bytes","plutusmap_new","plutusmap_len","plutusmap_insert","plutusmap_get","plutusmap_keys","PlutusScript","__wbg_plutusscript_free","plutusscript_to_bytes","plutusscript_from_bytes","plutusscript_new","plutusscript_bytes","__wbg_plutusscripts_free","plutusscripts_to_bytes","plutusscripts_from_bytes","plutusscripts_new","plutusscripts_len","plutusscripts_get","plutusscripts_add","Pointer","__wbg_pointer_free","cert_index","pointer_new","pointer_slot","pointer_tx_index","pointer_cert_index","PointerAddress","__wbg_pointeraddress_free","pointeraddress_new","pointeraddress_payment_cred","stake_pointer","pointeraddress_stake_pointer","pointeraddress_to_address","pointeraddress_from_address","PoolMetadata","__wbg_poolmetadata_free","poolmetadata_to_bytes","poolmetadata_from_bytes","url","poolmetadata_url","URL","pool_metadata_hash","poolmetadata_pool_metadata_hash","PoolMetadataHash","poolmetadata_new","__wbg_poolmetadatahash_free","poolmetadatahash_to_bytes","poolmetadatahash_to_bech32","poolmetadatahash_from_bech32","poolmetadatahash_from_bytes","PoolParams","__wbg_poolparams_free","poolparams_to_bytes","poolparams_from_bytes","operator","poolparams_operator","poolparams_vrf_keyhash","pledge","poolparams_pledge","poolparams_cost","margin","poolparams_margin","reward_account","poolparams_reward_account","RewardAddress","pool_owners","poolparams_pool_owners","relays","poolparams_relays","Relays","pool_metadata","poolparams_pool_metadata","poolparams_new","__wbg_poolregistration_free","poolregistration_to_bytes","poolregistration_from_bytes","pool_params","poolregistration_pool_params","poolregistration_new","__wbg_poolretirement_free","poolretirement_to_bytes","poolretirement_from_bytes","pool_keyhash","poolretirement_pool_keyhash","epoch","poolretirement_epoch","poolretirement_new","__wbg_privatekey_free","privatekey_to_public","generate_ed25519","privatekey_generate_ed25519","generate_ed25519extended","privatekey_generate_ed25519extended","privatekey_to_bech32","privatekey_as_bytes","from_extended_bytes","privatekey_from_extended_bytes","from_normal_bytes","privatekey_from_normal_bytes","sign","privatekey_sign","ProposedProtocolParameterUpdates","__wbg_proposedprotocolparameterupdates_free","proposedprotocolparameterupdates_to_bytes","proposedprotocolparameterupdates_from_bytes","proposedprotocolparameterupdates_new","proposedprotocolparameterupdates_len","ProtocolParamUpdate","proposedprotocolparameterupdates_insert","proposedprotocolparameterupdates_get","proposedprotocolparameterupdates_keys","__wbg_protocolparamupdate_free","protocolparamupdate_to_bytes","protocolparamupdate_from_bytes","set_minfee_a","minfee_a","protocolparamupdate_set_minfee_a","protocolparamupdate_minfee_a","set_minfee_b","minfee_b","protocolparamupdate_set_minfee_b","protocolparamupdate_minfee_b","set_max_block_body_size","max_block_body_size","protocolparamupdate_set_max_block_body_size","protocolparamupdate_max_block_body_size","set_max_tx_size","max_tx_size","protocolparamupdate_set_max_tx_size","protocolparamupdate_max_tx_size","set_max_block_header_size","max_block_header_size","protocolparamupdate_set_max_block_header_size","protocolparamupdate_max_block_header_size","set_key_deposit","protocolparamupdate_set_key_deposit","protocolparamupdate_key_deposit","set_pool_deposit","protocolparamupdate_set_pool_deposit","protocolparamupdate_pool_deposit","set_max_epoch","max_epoch","protocolparamupdate_set_max_epoch","protocolparamupdate_max_epoch","set_n_opt","n_opt","protocolparamupdate_set_n_opt","protocolparamupdate_n_opt","set_pool_pledge_influence","pool_pledge_influence","protocolparamupdate_set_pool_pledge_influence","protocolparamupdate_pool_pledge_influence","set_expansion_rate","expansion_rate","protocolparamupdate_set_expansion_rate","protocolparamupdate_expansion_rate","set_treasury_growth_rate","treasury_growth_rate","protocolparamupdate_set_treasury_growth_rate","protocolparamupdate_treasury_growth_rate","set_d","d","protocolparamupdate_set_d","protocolparamupdate_d","set_extra_entropy","extra_entropy","protocolparamupdate_set_extra_entropy","protocolparamupdate_extra_entropy","set_protocol_version","ProtocolVersions","protocolparamupdate_set_protocol_version","protocolparamupdate_protocol_version","set_min_pool_cost","min_pool_cost","protocolparamupdate_set_min_pool_cost","protocolparamupdate_min_pool_cost","set_ada_per_utxo_byte","ada_per_utxo_byte","protocolparamupdate_set_ada_per_utxo_byte","protocolparamupdate_ada_per_utxo_byte","set_cost_models","protocolparamupdate_set_cost_models","protocolparamupdate_cost_models","set_execution_costs","execution_costs","protocolparamupdate_set_execution_costs","protocolparamupdate_execution_costs","set_max_tx_ex_units","max_tx_ex_units","protocolparamupdate_set_max_tx_ex_units","protocolparamupdate_max_tx_ex_units","set_max_block_ex_units","max_block_ex_units","protocolparamupdate_set_max_block_ex_units","protocolparamupdate_max_block_ex_units","set_max_value_size","max_value_size","protocolparamupdate_set_max_value_size","protocolparamupdate_max_value_size","protocolparamupdate_new","__wbg_protocolversion_free","protocolversion_to_bytes","protocolversion_from_bytes","major","protocolversion_major","minor","protocolversion_minor","protocolversion_new","__wbg_protocolversions_free","protocolversions_to_bytes","protocolversions_from_bytes","protocolversions_new","protocolversions_len","protocolversions_get","protocolversions_add","__wbg_publickey_free","publickey_from_bech32","publickey_to_bech32","publickey_as_bytes","publickey_from_bytes","verify","publickey_verify","publickey_hash","PublicKeys","__wbg_publickeys_free","constructor","publickeys_new","size","publickeys_size","publickeys_get","publickeys_add","Redeemer","__wbg_redeemer_free","redeemer_to_bytes","redeemer_from_bytes","redeemer_tag","RedeemerTag","redeemer_index","redeemer_data","ex_units","redeemer_ex_units","redeemer_new","__wbg_redeemertag_free","redeemertag_to_bytes","redeemertag_from_bytes","new_spend","redeemertag_new_spend","new_mint","redeemertag_new_mint","new_cert","redeemertag_new_cert","new_reward","redeemertag_new_reward","redeemertag_kind","__wbg_redeemers_free","redeemers_to_bytes","redeemers_from_bytes","redeemers_new","redeemers_len","redeemers_get","redeemers_add","Relay","__wbg_relay_free","relay_to_bytes","relay_from_bytes","new_single_host_addr","single_host_addr","relay_new_single_host_addr","new_single_host_name","single_host_name","relay_new_single_host_name","new_multi_host_name","multi_host_name","relay_new_multi_host_name","relay_kind","as_single_host_addr","relay_as_single_host_addr","as_single_host_name","relay_as_single_host_name","as_multi_host_name","relay_as_multi_host_name","__wbg_relays_free","relays_to_bytes","relays_from_bytes","relays_new","relays_len","relays_get","relays_add","__wbg_rewardaddress_free","rewardaddress_new","rewardaddress_payment_cred","rewardaddress_to_address","rewardaddress_from_address","RewardAddresses","__wbg_rewardaddresses_free","rewardaddresses_to_bytes","rewardaddresses_from_bytes","rewardaddresses_new","rewardaddresses_len","rewardaddresses_get","rewardaddresses_add","__wbg_scriptall_free","scriptall_to_bytes","scriptall_from_bytes","scriptall_native_scripts","scriptall_new","__wbg_scriptany_free","scriptany_to_bytes","scriptany_from_bytes","scriptany_native_scripts","scriptany_new","__wbg_scriptdatahash_free","scriptdatahash_to_bytes","scriptdatahash_to_bech32","scriptdatahash_from_bech32","scriptdatahash_from_bytes","__wbg_scripthash_free","scripthash_to_bytes","scripthash_to_bech32","scripthash_from_bech32","scripthash_from_bytes","__wbg_scripthashes_free","scripthashes_to_bytes","scripthashes_from_bytes","scripthashes_new","scripthashes_len","scripthashes_get","scripthashes_add","__wbg_scriptnofk_free","scriptnofk_to_bytes","scriptnofk_from_bytes","n","scriptnofk_n","scriptnofk_native_scripts","scriptnofk_new","__wbg_scriptpubkey_free","scriptpubkey_to_bytes","scriptpubkey_from_bytes","addr_keyhash","scriptpubkey_addr_keyhash","scriptpubkey_new","__wbg_singlehostaddr_free","singlehostaddr_to_bytes","singlehostaddr_from_bytes","port","singlehostaddr_port","ipv4","singlehostaddr_ipv4","ipv6","singlehostaddr_ipv6","singlehostaddr_new","__wbg_singlehostname_free","singlehostname_to_bytes","singlehostname_from_bytes","singlehostname_port","singlehostname_dns_name","singlehostname_new","__wbg_stakecredential_free","from_keyhash","stakecredential_from_keyhash","from_scripthash","stakecredential_from_scripthash","to_keyhash","stakecredential_to_keyhash","to_scripthash","stakecredential_to_scripthash","stakecredential_kind","stakecredential_to_bytes","stakecredential_from_bytes","__wbg_stakecredentials_free","stakecredentials_to_bytes","stakecredentials_from_bytes","stakecredentials_new","stakecredentials_len","stakecredentials_get","stakecredentials_add","__wbg_stakedelegation_free","stakedelegation_to_bytes","stakedelegation_from_bytes","stake_credential","stakedelegation_stake_credential","stakedelegation_pool_keyhash","stakedelegation_new","__wbg_stakederegistration_free","stakederegistration_to_bytes","stakederegistration_from_bytes","stakederegistration_stake_credential","stakederegistration_new","__wbg_stakeregistration_free","stakeregistration_to_bytes","stakeregistration_from_bytes","stakeregistration_stake_credential","stakeregistration_new","Strings","__wbg_strings_free","strings_new","strings_len","strings_get","strings_add","__wbg_timelockexpiry_free","timelockexpiry_to_bytes","timelockexpiry_from_bytes","timelockexpiry_slot","timelockexpiry_new","__wbg_timelockstart_free","timelockstart_to_bytes","timelockstart_from_bytes","timelockstart_slot","timelockstart_new","__wbg_transaction_free","transaction_to_bytes","transaction_from_bytes","body","transaction_body","witness_set","transaction_witness_set","TransactionWitnessSet","transaction_is_valid","transaction_auxiliary_data","set_is_valid","valid","transaction_set_is_valid","transaction_new","__wbg_transactionbodies_free","transactionbodies_to_bytes","transactionbodies_from_bytes","transactionbodies_new","transactionbodies_len","transactionbodies_get","transactionbodies_add","__wbg_transactionbody_free","transactionbody_to_bytes","transactionbody_from_bytes","inputs","transactionbody_inputs","TransactionInputs","outputs","transactionbody_outputs","TransactionOutputs","fee","transactionbody_fee","ttl","transactionbody_ttl","set_certs","certs","transactionbody_set_certs","transactionbody_certs","set_withdrawals","withdrawals","Withdrawals","transactionbody_set_withdrawals","transactionbody_withdrawals","set_update","update","Update","transactionbody_set_update","transactionbody_update","set_auxiliary_data_hash","auxiliary_data_hash","transactionbody_set_auxiliary_data_hash","transactionbody_auxiliary_data_hash","set_validity_start_interval","validity_start_interval","transactionbody_set_validity_start_interval","transactionbody_validity_start_interval","set_mint","mint","transactionbody_set_mint","multiassets","transactionbody_multiassets","set_script_data_hash","script_data_hash","transactionbody_set_script_data_hash","transactionbody_script_data_hash","set_collateral","collateral","transactionbody_set_collateral","transactionbody_collateral","set_required_signers","required_signers","transactionbody_set_required_signers","transactionbody_required_signers","set_network_id","transactionbody_set_network_id","transactionbody_network_id","transactionbody_new","TransactionBuilder","__wbg_transactionbuilder_free","add_key_input","TransactionInput","transactionbuilder_add_key_input","add_script_input","transactionbuilder_add_script_input","add_bootstrap_input","transactionbuilder_add_bootstrap_input","add_input","address","transactionbuilder_add_input","fee_for_input","transactionbuilder_fee_for_input","add_output","output","TransactionOutput","transactionbuilder_add_output","fee_for_output","transactionbuilder_fee_for_output","set_fee","transactionbuilder_set_fee","set_ttl","transactionbuilder_set_ttl","transactionbuilder_set_validity_start_interval","transactionbuilder_set_certs","transactionbuilder_set_withdrawals","set_auxiliary_data","transactionbuilder_set_auxiliary_data","transactionbuilder_new","get_explicit_input","transactionbuilder_get_explicit_input","transactionbuilder_get_implicit_input","get_explicit_output","transactionbuilder_get_explicit_output","transactionbuilder_get_deposit","get_fee_if_set","transactionbuilder_get_fee_if_set","add_change_if_needed","transactionbuilder_add_change_if_needed","full_size","transactionbuilder_full_size","output_sizes","transactionbuilder_output_sizes","build","transactionbuilder_build","transactionbuilder_min_fee","__wbg_transactionhash_free","transactionhash_to_bytes","transactionhash_to_bech32","transactionhash_from_bech32","transactionhash_from_bytes","__wbg_transactioninput_free","transactioninput_to_bytes","transactioninput_from_bytes","transaction_id","transactioninput_transaction_id","transactioninput_index","transactioninput_new","__wbg_transactioninputs_free","transactioninputs_to_bytes","transactioninputs_from_bytes","transactioninputs_new","transactioninputs_len","transactioninputs_get","transactioninputs_add","__wbg_transactionmetadatum_free","transactionmetadatum_to_bytes","transactionmetadatum_from_bytes","transactionmetadatum_new_map","transactionmetadatum_new_list","new_int","int","transactionmetadatum_new_int","transactionmetadatum_new_bytes","new_text","transactionmetadatum_new_text","transactionmetadatum_kind","transactionmetadatum_as_map","transactionmetadatum_as_list","as_int","transactionmetadatum_as_int","transactionmetadatum_as_bytes","as_text","transactionmetadatum_as_text","__wbg_transactionmetadatumlabels_free","transactionmetadatumlabels_to_bytes","transactionmetadatumlabels_from_bytes","transactionmetadatumlabels_new","transactionmetadatumlabels_len","transactionmetadatumlabels_get","transactionmetadatumlabels_add","__wbg_transactionoutput_free","transactionoutput_to_bytes","transactionoutput_from_bytes","transactionoutput_address","transactionoutput_amount","data_hash","transactionoutput_data_hash","set_data_hash","transactionoutput_set_data_hash","transactionoutput_new","__wbg_transactionoutputs_free","transactionoutputs_to_bytes","transactionoutputs_from_bytes","transactionoutputs_new","transactionoutputs_len","transactionoutputs_get","transactionoutputs_add","TransactionUnspentOutput","__wbg_transactionunspentoutput_free","transactionunspentoutput_to_bytes","transactionunspentoutput_from_bytes","transactionunspentoutput_new","transactionunspentoutput_input","transactionunspentoutput_output","__wbg_transactionwitnessset_free","transactionwitnessset_to_bytes","transactionwitnessset_from_bytes","set_vkeys","vkeys","Vkeywitnesses","transactionwitnessset_set_vkeys","transactionwitnessset_vkeys","transactionwitnessset_set_native_scripts","transactionwitnessset_native_scripts","set_bootstraps","bootstraps","transactionwitnessset_set_bootstraps","transactionwitnessset_bootstraps","transactionwitnessset_set_plutus_scripts","transactionwitnessset_plutus_scripts","set_plutus_data","transactionwitnessset_set_plutus_data","transactionwitnessset_plutus_data","set_redeemers","transactionwitnessset_set_redeemers","transactionwitnessset_redeemers","transactionwitnessset_new","__wbg_transactionwitnesssets_free","transactionwitnesssets_to_bytes","transactionwitnesssets_from_bytes","transactionwitnesssets_new","transactionwitnesssets_len","transactionwitnesssets_get","transactionwitnesssets_add","__wbg_url_free","url_to_bytes","url_from_bytes","url_new","url_url","__wbg_unitinterval_free","unitinterval_to_bytes","unitinterval_from_bytes","numerator","unitinterval_numerator","denominator","unitinterval_denominator","unitinterval_new","__wbg_update_free","update_to_bytes","update_from_bytes","proposed_protocol_parameter_updates","update_proposed_protocol_parameter_updates","update_epoch","update_new","__wbg_vrfcert_free","vrfcert_to_bytes","vrfcert_from_bytes","vrfcert_output","proof","vrfcert_proof","vrfcert_new","__wbg_vrfkeyhash_free","vrfkeyhash_to_bytes","vrfkeyhash_to_bech32","vrfkeyhash_from_bech32","vrfkeyhash_from_bytes","__wbg_vrfvkey_free","vrfvkey_to_bytes","vrfvkey_to_bech32","vrfvkey_from_bech32","vrfvkey_from_bytes","__wbg_value_free","value_to_bytes","value_from_bytes","coin","value_new","value_coin","set_coin","value_set_coin","multiasset","value_multiasset","set_multiasset","value_set_multiasset","rhs","value_checked_add","value_checked_sub","value_clamped_sub","value_compare","__wbg_vkey_free","vkey_to_bytes","vkey_from_bytes","pk","vkey_new","public_key","vkey_public_key","Vkeys","__wbg_vkeys_free","vkeys_new","vkeys_len","vkeys_get","vkeys_add","__wbg_vkeywitness_free","vkeywitness_to_bytes","vkeywitness_from_bytes","vkeywitness_new","vkeywitness_vkey","vkeywitness_signature","__wbg_vkeywitnesses_free","vkeywitnesses_new","vkeywitnesses_len","vkeywitnesses_get","vkeywitnesses_add","__wbg_withdrawals_free","withdrawals_to_bytes","withdrawals_from_bytes","withdrawals_new","withdrawals_len","withdrawals_insert","withdrawals_get","withdrawals_keys","__wbindgen_object_drop_ref","arg0","__wbindgen_string_new","arg1","__wbg_new_3a746f2619705add","Function","__wbg_call_f54d3a6dadb199ca","__wbindgen_jsval_eq","__wbg_self_ac379e780a0d8b94","self","__wbg_crypto_1e4302b85d4f64a2","crypto","__wbindgen_is_undefined","__wbg_getRandomValues_1b4ba144162a5c9e","getRandomValues","__wbg_require_6461b1e9a0d7c34a","require","__wbg_randomFillSync_1b52c8482374c55b","arg2","randomFillSync","__wbg_getRandomValues_1ef11e888e5228e9","__wbindgen_string_get","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow"],"mappings":"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","sourcesContent":["import * as wasm from './cardano_serialization_lib_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint8Array} bytes\n* @returns {TransactionMetadatum}\n*/\nexport function encode_arbitrary_bytes_as_metadatum(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n}\n\n/**\n* @param {TransactionMetadatum} metadata\n* @returns {Uint8Array}\n*/\nexport function decode_arbitrary_bytes_from_metadatum(metadata) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadata, TransactionMetadatum);\n        wasm.decode_arbitrary_bytes_from_metadatum(retptr, metadata.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} json\n* @param {number} schema\n* @returns {TransactionMetadatum}\n*/\nexport function encode_json_str_to_metadatum(json, schema) {\n    var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_json_str_to_metadatum(ptr0, len0, schema);\n    return TransactionMetadatum.__wrap(ret);\n}\n\n/**\n* @param {TransactionMetadatum} metadatum\n* @param {number} schema\n* @returns {string}\n*/\nexport function decode_metadatum_to_json_str(metadatum, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadatum, TransactionMetadatum);\n        wasm.decode_metadatum_to_json_str(retptr, metadatum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} password\n* @param {string} salt\n* @param {string} nonce\n* @param {string} data\n* @returns {string}\n*/\nexport function encrypt_with_password(password, salt, nonce, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        var ptr3 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        wasm.encrypt_with_password(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} password\n* @param {string} data\n* @returns {string}\n*/\nexport function decrypt_with_password(password, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.decrypt_with_password(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {Transaction} tx\n* @param {LinearFee} linear_fee\n* @returns {BigNum}\n*/\nexport function min_fee(tx, linear_fee) {\n    _assertClass(tx, Transaction);\n    _assertClass(linear_fee, LinearFee);\n    var ret = wasm.min_fee(tx.ptr, linear_fee.ptr);\n    return BigNum.__wrap(ret);\n}\n\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {LegacyDaedalusPrivateKey} key\n* @returns {BootstrapWitness}\n*/\nexport function make_daedalus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, LegacyDaedalusPrivateKey);\n    var ret = wasm.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {Bip32PrivateKey} key\n* @returns {BootstrapWitness}\n*/\nexport function make_icarus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, Bip32PrivateKey);\n    var ret = wasm.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {PrivateKey} sk\n* @returns {Vkeywitness}\n*/\nexport function make_vkey_witness(tx_body_hash, sk) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(sk, PrivateKey);\n    var ret = wasm.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\n    return Vkeywitness.__wrap(ret);\n}\n\n/**\n* @param {AuxiliaryData} auxiliary_data\n* @returns {AuxiliaryDataHash}\n*/\nexport function hash_auxiliary_data(auxiliary_data) {\n    _assertClass(auxiliary_data, AuxiliaryData);\n    var ret = wasm.hash_auxiliary_data(auxiliary_data.ptr);\n    return AuxiliaryDataHash.__wrap(ret);\n}\n\n/**\n* @param {TransactionBody} tx_body\n* @returns {TransactionHash}\n*/\nexport function hash_transaction(tx_body) {\n    _assertClass(tx_body, TransactionBody);\n    var ret = wasm.hash_transaction(tx_body.ptr);\n    return TransactionHash.__wrap(ret);\n}\n\n/**\n* @param {PlutusData} plutus_data\n* @returns {DataHash}\n*/\nexport function hash_plutus_data(plutus_data) {\n    _assertClass(plutus_data, PlutusData);\n    var ret = wasm.hash_plutus_data(plutus_data.ptr);\n    return DataHash.__wrap(ret);\n}\n\n/**\n* @param {Redeemers} redeemers\n* @param {Costmdls} cost_models\n* @param {PlutusList | undefined} datums\n* @returns {ScriptDataHash}\n*/\nexport function hash_script_data(redeemers, cost_models, datums) {\n    _assertClass(redeemers, Redeemers);\n    _assertClass(cost_models, Costmdls);\n    let ptr0 = 0;\n    if (!isLikeNone(datums)) {\n        _assertClass(datums, PlutusList);\n        ptr0 = datums.ptr;\n        datums.ptr = 0;\n    }\n    var ret = wasm.hash_script_data(redeemers.ptr, cost_models.ptr, ptr0);\n    return ScriptDataHash.__wrap(ret);\n}\n\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {Value}\n*/\nexport function get_implicit_input(txbody, pool_deposit, key_deposit) {\n    _assertClass(txbody, TransactionBody);\n    _assertClass(pool_deposit, BigNum);\n    _assertClass(key_deposit, BigNum);\n    var ret = wasm.get_implicit_input(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n    return Value.__wrap(ret);\n}\n\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {BigNum}\n*/\nexport function get_deposit(txbody, pool_deposit, key_deposit) {\n    _assertClass(txbody, TransactionBody);\n    _assertClass(pool_deposit, BigNum);\n    _assertClass(key_deposit, BigNum);\n    var ret = wasm.get_deposit(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n    return BigNum.__wrap(ret);\n}\n\n/**\n* @param {Value} assets\n* @param {BigNum} minimum_utxo_val\n* @returns {BigNum}\n*/\nexport function min_ada_required(assets, minimum_utxo_val) {\n    _assertClass(assets, Value);\n    _assertClass(minimum_utxo_val, BigNum);\n    var ret = wasm.min_ada_required(assets.ptr, minimum_utxo_val.ptr);\n    return BigNum.__wrap(ret);\n}\n\n/**\n*/\nexport const CertificateKind = Object.freeze({ StakeRegistration:0,\"0\":\"StakeRegistration\",StakeDeregistration:1,\"1\":\"StakeDeregistration\",StakeDelegation:2,\"2\":\"StakeDelegation\",PoolRegistration:3,\"3\":\"PoolRegistration\",PoolRetirement:4,\"4\":\"PoolRetirement\",GenesisKeyDelegation:5,\"5\":\"GenesisKeyDelegation\",MoveInstantaneousRewardsCert:6,\"6\":\"MoveInstantaneousRewardsCert\", });\n/**\n*/\nexport const MIRPot = Object.freeze({ Reserves:0,\"0\":\"Reserves\",Treasury:1,\"1\":\"Treasury\", });\n/**\n*/\nexport const MIRKind = Object.freeze({ ToOtherPot:0,\"0\":\"ToOtherPot\",ToStakeCredentials:1,\"1\":\"ToStakeCredentials\", });\n/**\n*/\nexport const RelayKind = Object.freeze({ SingleHostAddr:0,\"0\":\"SingleHostAddr\",SingleHostName:1,\"1\":\"SingleHostName\",MultiHostName:2,\"2\":\"MultiHostName\", });\n/**\n*/\nexport const NativeScriptKind = Object.freeze({ ScriptPubkey:0,\"0\":\"ScriptPubkey\",ScriptAll:1,\"1\":\"ScriptAll\",ScriptAny:2,\"2\":\"ScriptAny\",ScriptNOfK:3,\"3\":\"ScriptNOfK\",TimelockStart:4,\"4\":\"TimelockStart\",TimelockExpiry:5,\"5\":\"TimelockExpiry\", });\n/**\n* Each new language uses a different namespace for hashing its script\n* This is because you could have a language where the same bytes have different semantics\n* So this avoids scripts in different languages mapping to the same hash\n* Note that the enum value here is different than the enum value for deciding the cost model of a script\n*/\nexport const ScriptHashNamespace = Object.freeze({ NativeScript:0,\"0\":\"NativeScript\", });\n/**\n*/\nexport const NetworkIdKind = Object.freeze({ Testnet:0,\"0\":\"Testnet\",Mainnet:1,\"1\":\"Mainnet\", });\n/**\n*/\nexport const TransactionMetadatumKind = Object.freeze({ MetadataMap:0,\"0\":\"MetadataMap\",MetadataList:1,\"1\":\"MetadataList\",Int:2,\"2\":\"Int\",Bytes:3,\"3\":\"Bytes\",Text:4,\"4\":\"Text\", });\n/**\n*/\nexport const MetadataJsonSchema = Object.freeze({ NoConversions:0,\"0\":\"NoConversions\",BasicConversions:1,\"1\":\"BasicConversions\",DetailedSchema:2,\"2\":\"DetailedSchema\", });\n/**\n*/\nexport const LanguageKind = Object.freeze({ PlutusV1:0,\"0\":\"PlutusV1\", });\n/**\n*/\nexport const PlutusDataKind = Object.freeze({ ConstrPlutusData:0,\"0\":\"ConstrPlutusData\",Map:1,\"1\":\"Map\",List:2,\"2\":\"List\",Integer:3,\"3\":\"Integer\",Bytes:4,\"4\":\"Bytes\", });\n/**\n*/\nexport const RedeemerTagKind = Object.freeze({ Spend:0,\"0\":\"Spend\",Mint:1,\"1\":\"Mint\",Cert:2,\"2\":\"Cert\",Reward:3,\"3\":\"Reward\", });\n/**\n*/\nexport class Address {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Address.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Address}\n    */\n    static from_bytes(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.address_from_bytes(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string | undefined} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.address_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {Address}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.address_from_bech32(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        var ret = wasm.address_network_id(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nexport class AssetName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assetname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AssetName}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetname_from_bytes(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} name\n    * @returns {AssetName}\n    */\n    static new(name) {\n        var ptr0 = passArray8ToWasm0(name, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetname_new(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    name() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class AssetNames {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetNames.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assetnames_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetnames_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AssetNames}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetnames_from_bytes(ptr0, len0);\n        return AssetNames.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    static new() {\n        var ret = wasm.assetnames_new();\n        return AssetNames.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {AssetName}\n    */\n    get(index) {\n        var ret = wasm.assetnames_get(this.ptr, index);\n        return AssetName.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} elem\n    */\n    add(elem) {\n        _assertClass(elem, AssetName);\n        wasm.assetnames_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class Assets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Assets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assets_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Assets}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assets_from_bytes(ptr0, len0);\n        return Assets.__wrap(ret);\n    }\n    /**\n    * @returns {Assets}\n    */\n    static new() {\n        var ret = wasm.assets_new();\n        return Assets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.assets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {AssetName} key\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, BigNum);\n        var ret = wasm.assets_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @returns {BigNum | undefined}\n    */\n    get(key) {\n        _assertClass(key, AssetName);\n        var ret = wasm.assets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    keys() {\n        var ret = wasm.assets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/**\n*/\nexport class AuxiliaryData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AuxiliaryData}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydata_from_bytes(ptr0, len0);\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @returns {AuxiliaryData}\n    */\n    static new() {\n        var ret = wasm.auxiliarydata_new();\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @returns {GeneralTransactionMetadata | undefined}\n    */\n    metadata() {\n        var ret = wasm.auxiliarydata_metadata(this.ptr);\n        return ret === 0 ? undefined : GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @param {GeneralTransactionMetadata} metadata\n    */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        wasm.auxiliarydata_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n    * @returns {NativeScripts | undefined}\n    */\n    native_scripts() {\n        var ret = wasm.auxiliarydata_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        wasm.auxiliarydata_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n    * @returns {PlutusScripts | undefined}\n    */\n    plutus_scripts() {\n        var ret = wasm.auxiliarydata_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScripts} plutus_scripts\n    */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.auxiliarydata_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n}\n/**\n*/\nexport class AuxiliaryDataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydatahash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {AuxiliaryDataHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydatahash_from_bech32(ptr0, len0);\n        return AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AuxiliaryDataHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydatahash_from_bytes(ptr0, len0);\n        return AuxiliaryDataHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class AuxiliaryDataSet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataSet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydataset_free(ptr);\n    }\n    /**\n    * @returns {AuxiliaryDataSet}\n    */\n    static new() {\n        var ret = wasm.auxiliarydataset_new();\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} tx_index\n    * @param {AuxiliaryData} data\n    * @returns {AuxiliaryData | undefined}\n    */\n    insert(tx_index, data) {\n        _assertClass(data, AuxiliaryData);\n        var ret = wasm.auxiliarydataset_insert(this.ptr, tx_index, data.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @param {number} tx_index\n    * @returns {AuxiliaryData | undefined}\n    */\n    get(tx_index) {\n        var ret = wasm.auxiliarydataset_get(this.ptr, tx_index);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    indices() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydataset_indices(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class BaseAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BaseAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_baseaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @param {StakeCredential} stake\n    * @returns {BaseAddress}\n    */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, StakeCredential);\n        var ret = wasm.baseaddress_new(network, payment.ptr, stake.ptr);\n        return BaseAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_cred() {\n        var ret = wasm.baseaddress_stake_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = wasm.baseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {BaseAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.baseaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\n/**\n*/\nexport class BigInt {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BigInt.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bigint_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bigint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigInt}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bigint_from_bytes(ptr0, len0);\n        return BigInt.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_u64() {\n        var ret = wasm.bigint_as_u64(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {BigInt}\n    */\n    static from_str(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bigint_from_str(ptr0, len0);\n        return BigInt.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bigint_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nexport class BigNum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigNum}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {string} string\n    * @returns {BigNum}\n    */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {BigNum}\n    */\n    static zero() {\n        var ret = wasm.bignum_zero();\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * returns 0 if it would otherwise underflow\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    clamped_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_clamped_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} rhs_value\n    * @returns {number}\n    */\n    compare(rhs_value) {\n        _assertClass(rhs_value, BigNum);\n        var ret = wasm.bignum_compare(this.ptr, rhs_value.ptr);\n        return ret;\n    }\n}\n/**\n*/\nexport class Bip32PrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bip32privatekey_free(ptr);\n    }\n    /**\n    * derive this private key with the given index.\n    *\n    * # Security considerations\n    *\n    * * hard derivation index cannot be soft derived with the public key\n    *\n    * # Hard derivation vs Soft derivation\n    *\n    * If you pass an index below 0x80000000 then it is a soft derivation.\n    * The advantage of soft derivation is that it is possible to derive the\n    * public key too. I.e. derivation the private key with a soft derivation\n    * index and then retrieving the associated public key is equivalent to\n    * deriving the public key associated to the parent private key.\n    *\n    * Hard derivation index does not allow public key derivation.\n    *\n    * This is why deriving the private key should not fail while deriving\n    * the public key may fail (if the derivation index is invalid).\n    * @param {number} index\n    * @returns {Bip32PrivateKey}\n    */\n    derive(index) {\n        var ret = wasm.bip32privatekey_derive(this.ptr, index);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * 128-byte xprv a key format in Cardano that some software still uses or requires\n    * the traditional 96-byte xprv is simply encoded as\n    * prv | chaincode\n    * however, because some software may not know how to compute a public key from a private key,\n    * the 128-byte inlines the public key in the following format\n    * prv | pub | chaincode\n    * so be careful if you see the term \"xprv\" as it could refer to either one\n    * our library does not require the pub (instead we compute the pub key when needed)\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PrivateKey}\n    */\n    static from_128_xprv(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_128_xprv(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * see from_128_xprv\n    * @returns {Uint8Array}\n    */\n    to_128_xprv() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_to_128_xprv(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Bip32PrivateKey}\n    */\n    static generate_ed25519_bip32() {\n        var ret = wasm.bip32privatekey_generate_ed25519_bip32();\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    to_raw_key() {\n        var ret = wasm.bip32privatekey_to_raw_key(this.ptr);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Bip32PublicKey}\n    */\n    to_public() {\n        var ret = wasm.bip32privatekey_to_public(this.ptr);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bytes(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bech32(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {Uint8Array} entropy\n    * @param {Uint8Array} password\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bip39_entropy(entropy, password) {\n        var ptr0 = passArray8ToWasm0(entropy, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(password, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class Bip32PublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bip32publickey_free(ptr);\n    }\n    /**\n    * derive this public key with the given index.\n    *\n    * # Errors\n    *\n    * If the index is not a soft derivation index (< 0x80000000) then\n    * calling this method will fail.\n    *\n    * # Security considerations\n    *\n    * * hard derivation index cannot be soft derived with the public key\n    *\n    * # Hard derivation vs Soft derivation\n    *\n    * If you pass an index below 0x80000000 then it is a soft derivation.\n    * The advantage of soft derivation is that it is possible to derive the\n    * public key too. I.e. derivation the private key with a soft derivation\n    * index and then retrieving the associated public key is equivalent to\n    * deriving the public key associated to the parent private key.\n    *\n    * Hard derivation index does not allow public key derivation.\n    *\n    * This is why deriving the private key should not fail while deriving\n    * the public key may fail (if the derivation index is invalid).\n    * @param {number} index\n    * @returns {Bip32PublicKey}\n    */\n    derive(index) {\n        var ret = wasm.bip32publickey_derive(this.ptr, index);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    to_raw_key() {\n        var ret = wasm.bip32publickey_to_raw_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PublicKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32publickey_from_bytes(ptr0, len0);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Bip32PublicKey}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32publickey_from_bech32(ptr0, len0);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class Block {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Block.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_block_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Block}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.block_from_bytes(ptr0, len0);\n        return Block.__wrap(ret);\n    }\n    /**\n    * @returns {Header}\n    */\n    header() {\n        var ret = wasm.block_header(this.ptr);\n        return Header.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBodies}\n    */\n    transaction_bodies() {\n        var ret = wasm.block_transaction_bodies(this.ptr);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSets}\n    */\n    transaction_witness_sets() {\n        var ret = wasm.block_transaction_witness_sets(this.ptr);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {AuxiliaryDataSet}\n    */\n    auxiliary_data_set() {\n        var ret = wasm.block_auxiliary_data_set(this.ptr);\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    invalid_transactions() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_invalid_transactions(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Header} header\n    * @param {TransactionBodies} transaction_bodies\n    * @param {TransactionWitnessSets} transaction_witness_sets\n    * @param {AuxiliaryDataSet} auxiliary_data_set\n    * @param {Uint32Array} invalid_transactions\n    * @returns {Block}\n    */\n    static new(header, transaction_bodies, transaction_witness_sets, auxiliary_data_set, invalid_transactions) {\n        _assertClass(header, Header);\n        _assertClass(transaction_bodies, TransactionBodies);\n        _assertClass(transaction_witness_sets, TransactionWitnessSets);\n        _assertClass(auxiliary_data_set, AuxiliaryDataSet);\n        var ptr0 = passArray32ToWasm0(invalid_transactions, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, auxiliary_data_set.ptr, ptr0, len0);\n        return Block.__wrap(ret);\n    }\n}\n/**\n*/\nexport class BlockHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BlockHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.blockhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {BlockHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.blockhash_from_bech32(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BlockHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.blockhash_from_bytes(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class BootstrapWitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bootstrapwitness_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BootstrapWitness}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bootstrapwitness_from_bytes(ptr0, len0);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n    vkey() {\n        var ret = wasm.bootstrapwitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    signature() {\n        var ret = wasm.bootstrapwitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chain_code() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    attributes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Vkey} vkey\n    * @param {Ed25519Signature} signature\n    * @param {Uint8Array} chain_code\n    * @param {Uint8Array} attributes\n    * @returns {BootstrapWitness}\n    */\n    static new(vkey, signature, chain_code, attributes) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        var ptr0 = passArray8ToWasm0(chain_code, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(attributes, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\n        return BootstrapWitness.__wrap(ret);\n    }\n}\n/**\n*/\nexport class BootstrapWitnesses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitnesses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bootstrapwitnesses_free(ptr);\n    }\n    /**\n    * @returns {BootstrapWitnesses}\n    */\n    static new() {\n        var ret = wasm.bootstrapwitnesses_new();\n        return BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {BootstrapWitness}\n    */\n    get(index) {\n        var ret = wasm.bootstrapwitnesses_get(this.ptr, index);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n    * @param {BootstrapWitness} elem\n    */\n    add(elem) {\n        _assertClass(elem, BootstrapWitness);\n        wasm.bootstrapwitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class ByronAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ByronAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_byronaddress_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    to_base58() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_to_base58(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ByronAddress}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_from_bytes(ptr0, len0);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n    * returns the byron protocol magic embedded in the address, or mainnet id if none is present\n    * note: for bech32 addresses, you need to use network_id instead\n    * @returns {number}\n    */\n    byron_protocol_magic() {\n        var ret = wasm.byronaddress_byron_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    attributes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        var ret = wasm.byronaddress_network_id(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {string} s\n    * @returns {ByronAddress}\n    */\n    static from_base58(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_from_base58(ptr0, len0);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n    * @param {Bip32PublicKey} key\n    * @param {number} protocol_magic\n    * @returns {ByronAddress}\n    */\n    static icarus_from_key(key, protocol_magic) {\n        _assertClass(key, Bip32PublicKey);\n        var ret = wasm.byronaddress_icarus_from_key(key.ptr, protocol_magic);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n    * @param {string} s\n    * @returns {boolean}\n    */\n    static is_valid(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_is_valid(ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = wasm.byronaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {ByronAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.byronaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Certificate {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Certificate.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_certificate_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Certificate}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificate_from_bytes(ptr0, len0);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeRegistration} stake_registration\n    * @returns {Certificate}\n    */\n    static new_stake_registration(stake_registration) {\n        _assertClass(stake_registration, StakeRegistration);\n        var ret = wasm.certificate_new_stake_registration(stake_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeDeregistration} stake_deregistration\n    * @returns {Certificate}\n    */\n    static new_stake_deregistration(stake_deregistration) {\n        _assertClass(stake_deregistration, StakeDeregistration);\n        var ret = wasm.certificate_new_stake_deregistration(stake_deregistration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeDelegation} stake_delegation\n    * @returns {Certificate}\n    */\n    static new_stake_delegation(stake_delegation) {\n        _assertClass(stake_delegation, StakeDelegation);\n        var ret = wasm.certificate_new_stake_delegation(stake_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {PoolRegistration} pool_registration\n    * @returns {Certificate}\n    */\n    static new_pool_registration(pool_registration) {\n        _assertClass(pool_registration, PoolRegistration);\n        var ret = wasm.certificate_new_pool_registration(pool_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {PoolRetirement} pool_retirement\n    * @returns {Certificate}\n    */\n    static new_pool_retirement(pool_retirement) {\n        _assertClass(pool_retirement, PoolRetirement);\n        var ret = wasm.certificate_new_pool_retirement(pool_retirement.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {GenesisKeyDelegation} genesis_key_delegation\n    * @returns {Certificate}\n    */\n    static new_genesis_key_delegation(genesis_key_delegation) {\n        _assertClass(genesis_key_delegation, GenesisKeyDelegation);\n        var ret = wasm.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\n    * @returns {Certificate}\n    */\n    static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\n        _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\n        var ret = wasm.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.certificate_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {StakeRegistration | undefined}\n    */\n    as_stake_registration() {\n        var ret = wasm.certificate_as_stake_registration(this.ptr);\n        return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeDeregistration | undefined}\n    */\n    as_stake_deregistration() {\n        var ret = wasm.certificate_as_stake_deregistration(this.ptr);\n        return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeDelegation | undefined}\n    */\n    as_stake_delegation() {\n        var ret = wasm.certificate_as_stake_delegation(this.ptr);\n        return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {PoolRegistration | undefined}\n    */\n    as_pool_registration() {\n        var ret = wasm.certificate_as_pool_registration(this.ptr);\n        return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {PoolRetirement | undefined}\n    */\n    as_pool_retirement() {\n        var ret = wasm.certificate_as_pool_retirement(this.ptr);\n        return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisKeyDelegation | undefined}\n    */\n    as_genesis_key_delegation() {\n        var ret = wasm.certificate_as_genesis_key_delegation(this.ptr);\n        return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {MoveInstantaneousRewardsCert | undefined}\n    */\n    as_move_instantaneous_rewards_cert() {\n        var ret = wasm.certificate_as_move_instantaneous_rewards_cert(this.ptr);\n        return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Certificates {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Certificates.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_certificates_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Certificates}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificates_from_bytes(ptr0, len0);\n        return Certificates.__wrap(ret);\n    }\n    /**\n    * @returns {Certificates}\n    */\n    static new() {\n        var ret = wasm.certificates_new();\n        return Certificates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.certificates_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Certificate}\n    */\n    get(index) {\n        var ret = wasm.certificates_get(this.ptr, index);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {Certificate} elem\n    */\n    add(elem) {\n        _assertClass(elem, Certificate);\n        wasm.certificates_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class ConstrPlutusData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ConstrPlutusData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_constrplutusdata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constrplutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ConstrPlutusData}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.constrplutusdata_from_bytes(ptr0, len0);\n        return ConstrPlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {Int}\n    */\n    tag() {\n        var ret = wasm.constrplutusdata_tag(this.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList}\n    */\n    data() {\n        var ret = wasm.constrplutusdata_data(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n    /**\n    * @param {Int} tag\n    * @param {PlutusList} data\n    * @returns {ConstrPlutusData}\n    */\n    static new(tag, data) {\n        _assertClass(tag, Int);\n        var ptr0 = tag.ptr;\n        tag.ptr = 0;\n        _assertClass(data, PlutusList);\n        var ret = wasm.constrplutusdata_new(ptr0, data.ptr);\n        return ConstrPlutusData.__wrap(ret);\n    }\n}\n/**\n*/\nexport class CostModel {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CostModel.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_costmodel_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmodel_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CostModel}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.costmodel_from_bytes(ptr0, len0);\n        return CostModel.__wrap(ret);\n    }\n    /**\n    * @returns {CostModel}\n    */\n    static new() {\n        var ret = wasm.costmodel_new();\n        return CostModel.__wrap(ret);\n    }\n    /**\n    * @param {number} operation\n    * @param {Int} cost\n    * @returns {Int}\n    */\n    set(operation, cost) {\n        _assertClass(cost, Int);\n        var ret = wasm.costmodel_set(this.ptr, operation, cost.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} operation\n    * @returns {Int}\n    */\n    get(operation) {\n        var ret = wasm.costmodel_get(this.ptr, operation);\n        return Int.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Costmdls {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Costmdls.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_costmdls_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmdls_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Costmdls}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.costmdls_from_bytes(ptr0, len0);\n        return Costmdls.__wrap(ret);\n    }\n    /**\n    * @returns {Costmdls}\n    */\n    static new() {\n        var ret = wasm.costmdls_new();\n        return Costmdls.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {Language} key\n    * @param {CostModel} value\n    * @returns {CostModel | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, Language);\n        _assertClass(value, CostModel);\n        var ret = wasm.costmdls_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n    * @param {Language} key\n    * @returns {CostModel | undefined}\n    */\n    get(key) {\n        _assertClass(key, Language);\n        var ret = wasm.costmdls_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n    * @returns {Languages}\n    */\n    keys() {\n        var ret = wasm.costmdls_keys(this.ptr);\n        return Languages.__wrap(ret);\n    }\n}\n/**\n*/\nexport class DNSRecordAorAAAA {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordAorAAAA.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dnsrecordaoraaaa_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DNSRecordAorAAAA}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordaoraaaa_from_bytes(ptr0, len0);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @param {string} dns_name\n    * @returns {DNSRecordAorAAAA}\n    */\n    static new(dns_name) {\n        var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordaoraaaa_new(ptr0, len0);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    record() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nexport class DNSRecordSRV {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordSRV.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dnsrecordsrv_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordsrv_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DNSRecordSRV}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordsrv_from_bytes(ptr0, len0);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @param {string} dns_name\n    * @returns {DNSRecordSRV}\n    */\n    static new(dns_name) {\n        var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordsrv_new(ptr0, len0);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    record() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordsrv_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nexport class DataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_datahash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.datahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {DataHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datahash_from_bech32(ptr0, len0);\n        return DataHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DataHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datahash_from_bytes(ptr0, len0);\n        return DataHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Ed25519KeyHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519keyhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {Ed25519KeyHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhash_from_bech32(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519KeyHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhash_from_bytes(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Ed25519KeyHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519keyhashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519KeyHashes}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhashes_from_bytes(ptr0, len0);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHashes}\n    */\n    static new() {\n        var ret = wasm.ed25519keyhashes_new();\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.ed25519keyhashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Ed25519KeyHash}\n    */\n    get(index) {\n        var ret = wasm.ed25519keyhashes_get(this.ptr, index);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, Ed25519KeyHash);\n        wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Ed25519Signature}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_bech32(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {string} input\n    * @returns {Ed25519Signature}\n    */\n    static from_hex(input) {\n        var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_hex(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519Signature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_bytes(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/**\n*/\nexport class EnterpriseAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(EnterpriseAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_enterpriseaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @returns {EnterpriseAddress}\n    */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        var ret = wasm.enterpriseaddress_new(network, payment.ptr);\n        return EnterpriseAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = wasm.enterpriseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = wasm.enterpriseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {EnterpriseAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.enterpriseaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ExUnitPrices {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnitPrices.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_exunitprices_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.exunitprices_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ExUnitPrices}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.exunitprices_from_bytes(ptr0, len0);\n        return ExUnitPrices.__wrap(ret);\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n    mem_price() {\n        var ret = wasm.exunitprices_mem_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n    step_price() {\n        var ret = wasm.exunitprices_step_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} mem_price\n    * @param {UnitInterval} step_price\n    * @returns {ExUnitPrices}\n    */\n    static new(mem_price, step_price) {\n        _assertClass(mem_price, UnitInterval);\n        _assertClass(step_price, UnitInterval);\n        var ret = wasm.exunitprices_new(mem_price.ptr, step_price.ptr);\n        return ExUnitPrices.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ExUnits {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnits.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_exunits_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.exunits_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ExUnits}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.exunits_from_bytes(ptr0, len0);\n        return ExUnits.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    mem() {\n        var ret = wasm.exunits_mem(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    steps() {\n        var ret = wasm.exunits_steps(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} mem\n    * @param {BigNum} steps\n    * @returns {ExUnits}\n    */\n    static new(mem, steps) {\n        _assertClass(mem, BigNum);\n        _assertClass(steps, BigNum);\n        var ret = wasm.exunits_new(mem.ptr, steps.ptr);\n        return ExUnits.__wrap(ret);\n    }\n}\n/**\n*/\nexport class GeneralTransactionMetadata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GeneralTransactionMetadata.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_generaltransactionmetadata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.generaltransactionmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GeneralTransactionMetadata}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.generaltransactionmetadata_from_bytes(ptr0, len0);\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {GeneralTransactionMetadata}\n    */\n    static new() {\n        var ret = wasm.generaltransactionmetadata_new();\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.generaltransactionmetadata_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {BigNum} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, BigNum);\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} key\n    * @returns {TransactionMetadatum | undefined}\n    */\n    get(key) {\n        _assertClass(key, BigNum);\n        var ret = wasm.generaltransactionmetadata_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionMetadatumLabels}\n    */\n    keys() {\n        var ret = wasm.generaltransactionmetadata_keys(this.ptr);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n}\n/**\n*/\nexport class GenesisDelegateHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisDelegateHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesisdelegatehash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesisdelegatehash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.genesisdelegatehash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {GenesisDelegateHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesisdelegatehash_from_bech32(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisDelegateHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesisdelegatehash_from_bytes(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class GenesisHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesishash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.genesishash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {GenesisHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishash_from_bech32(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishash_from_bytes(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class GenesisHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesishashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisHashes}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishashes_from_bytes(ptr0, len0);\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHashes}\n    */\n    static new() {\n        var ret = wasm.genesishashes_new();\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.genesishashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {GenesisHash}\n    */\n    get(index) {\n        var ret = wasm.genesishashes_get(this.ptr, index);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, GenesisHash);\n        wasm.genesishashes_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class GenesisKeyDelegation {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisKeyDelegation.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesiskeydelegation_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesiskeydelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisKeyDelegation}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesiskeydelegation_from_bytes(ptr0, len0);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHash}\n    */\n    genesishash() {\n        var ret = wasm.genesiskeydelegation_genesishash(this.ptr);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisDelegateHash}\n    */\n    genesis_delegate_hash() {\n        var ret = wasm.genesiskeydelegation_genesis_delegate_hash(this.ptr);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n    * @returns {VRFKeyHash}\n    */\n    vrf_keyhash() {\n        var ret = wasm.genesiskeydelegation_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} genesishash\n    * @param {GenesisDelegateHash} genesis_delegate_hash\n    * @param {VRFKeyHash} vrf_keyhash\n    * @returns {GenesisKeyDelegation}\n    */\n    static new(genesishash, genesis_delegate_hash, vrf_keyhash) {\n        _assertClass(genesishash, GenesisHash);\n        _assertClass(genesis_delegate_hash, GenesisDelegateHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        var ret = wasm.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Header {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Header.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_header_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.header_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Header}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.header_from_bytes(ptr0, len0);\n        return Header.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderBody}\n    */\n    header_body() {\n        var ret = wasm.header_header_body(this.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n    * @returns {KESSignature}\n    */\n    body_signature() {\n        var ret = wasm.header_body_signature(this.ptr);\n        return KESSignature.__wrap(ret);\n    }\n    /**\n    * @param {HeaderBody} header_body\n    * @param {KESSignature} body_signature\n    * @returns {Header}\n    */\n    static new(header_body, body_signature) {\n        _assertClass(header_body, HeaderBody);\n        _assertClass(body_signature, KESSignature);\n        var ret = wasm.header_new(header_body.ptr, body_signature.ptr);\n        return Header.__wrap(ret);\n    }\n}\n/**\n*/\nexport class HeaderBody {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderBody.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headerbody_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headerbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {HeaderBody}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headerbody_from_bytes(ptr0, len0);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    block_number() {\n        var ret = wasm.headerbody_block_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = wasm.headerbody_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {BlockHash | undefined}\n    */\n    prev_hash() {\n        var ret = wasm.headerbody_prev_hash(this.ptr);\n        return ret === 0 ? undefined : BlockHash.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n    issuer_vkey() {\n        var ret = wasm.headerbody_issuer_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {VRFVKey}\n    */\n    vrf_vkey() {\n        var ret = wasm.headerbody_vrf_vkey(this.ptr);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n    * @returns {VRFCert}\n    */\n    nonce_vrf() {\n        var ret = wasm.headerbody_nonce_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {VRFCert}\n    */\n    leader_vrf() {\n        var ret = wasm.headerbody_leader_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    block_body_size() {\n        var ret = wasm.headerbody_block_body_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {BlockHash}\n    */\n    block_body_hash() {\n        var ret = wasm.headerbody_block_body_hash(this.ptr);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n    * @returns {OperationalCert}\n    */\n    operational_cert() {\n        var ret = wasm.headerbody_operational_cert(this.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n    * @returns {ProtocolVersion}\n    */\n    protocol_version() {\n        var ret = wasm.headerbody_protocol_version(this.ptr);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @param {number} block_number\n    * @param {number} slot\n    * @param {BlockHash | undefined} prev_hash\n    * @param {Vkey} issuer_vkey\n    * @param {VRFVKey} vrf_vkey\n    * @param {VRFCert} nonce_vrf\n    * @param {VRFCert} leader_vrf\n    * @param {number} block_body_size\n    * @param {BlockHash} block_body_hash\n    * @param {OperationalCert} operational_cert\n    * @param {ProtocolVersion} protocol_version\n    * @returns {HeaderBody}\n    */\n    static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, nonce_vrf, leader_vrf, block_body_size, block_body_hash, operational_cert, protocol_version) {\n        let ptr0 = 0;\n        if (!isLikeNone(prev_hash)) {\n            _assertClass(prev_hash, BlockHash);\n            ptr0 = prev_hash.ptr;\n            prev_hash.ptr = 0;\n        }\n        _assertClass(issuer_vkey, Vkey);\n        _assertClass(vrf_vkey, VRFVKey);\n        _assertClass(nonce_vrf, VRFCert);\n        _assertClass(leader_vrf, VRFCert);\n        _assertClass(block_body_hash, BlockHash);\n        _assertClass(operational_cert, OperationalCert);\n        _assertClass(protocol_version, ProtocolVersion);\n        var ret = wasm.headerbody_new(block_number, slot, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, nonce_vrf.ptr, leader_vrf.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Int {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ret = wasm.int_new(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ret = wasm.int_new_negative(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} x\n    * @returns {Int}\n    */\n    static new_i32(x) {\n        var ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_positive() {\n        var ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_positive() {\n        var ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_negative() {\n        var ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class Ipv4 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv4.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ipv4_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ipv4}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv4_from_bytes(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Ipv4}\n    */\n    static new(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv4_new(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    ip() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class Ipv6 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv6.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ipv6_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ipv6}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv6_from_bytes(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Ipv6}\n    */\n    static new(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv6_new(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    ip() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class KESSignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KESSignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kessignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.kessignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {KESSignature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kessignature_from_bytes(ptr0, len0);\n        return KESSignature.__wrap(ret);\n    }\n}\n/**\n*/\nexport class KESVKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KESVKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kesvkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.kesvkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.kesvkey_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {KESVKey}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kesvkey_from_bech32(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {KESVKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kesvkey_from_bytes(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Language {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Language.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_language_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.language_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Language}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.language_from_bytes(ptr0, len0);\n        return Language.__wrap(ret);\n    }\n    /**\n    * @returns {Language}\n    */\n    static new_plutus_v1() {\n        var ret = wasm.language_new_plutus_v1();\n        return Language.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.language_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nexport class Languages {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Languages.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_languages_free(ptr);\n    }\n    /**\n    * @returns {Languages}\n    */\n    static new() {\n        var ret = wasm.languages_new();\n        return Languages.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.languages_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Language}\n    */\n    get(index) {\n        var ret = wasm.languages_get(this.ptr, index);\n        return Language.__wrap(ret);\n    }\n    /**\n    * @param {Language} elem\n    */\n    add(elem) {\n        _assertClass(elem, Language);\n        var ptr0 = elem.ptr;\n        elem.ptr = 0;\n        wasm.languages_add(this.ptr, ptr0);\n    }\n}\n/**\n*/\nexport class LegacyDaedalusPrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LegacyDaedalusPrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_legacydaedalusprivatekey_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {LegacyDaedalusPrivateKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.legacydaedalusprivatekey_from_bytes(ptr0, len0);\n        return LegacyDaedalusPrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.legacydaedalusprivatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.legacydaedalusprivatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class LinearFee {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LinearFee.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_linearfee_free(ptr);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    constant() {\n        var ret = wasm.linearfee_constant(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    coefficient() {\n        var ret = wasm.linearfee_coefficient(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coefficient\n    * @param {BigNum} constant\n    * @returns {LinearFee}\n    */\n    static new(coefficient, constant) {\n        _assertClass(coefficient, BigNum);\n        _assertClass(constant, BigNum);\n        var ret = wasm.linearfee_new(coefficient.ptr, constant.ptr);\n        return LinearFee.__wrap(ret);\n    }\n}\n/**\n*/\nexport class MIRToStakeCredentials {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MIRToStakeCredentials.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mirtostakecredentials_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mirtostakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MIRToStakeCredentials}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.mirtostakecredentials_from_bytes(ptr0, len0);\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {MIRToStakeCredentials}\n    */\n    static new() {\n        var ret = wasm.mirtostakecredentials_new();\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.mirtostakecredentials_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {StakeCredential} cred\n    * @param {Int} delta\n    * @returns {Int | undefined}\n    */\n    insert(cred, delta) {\n        _assertClass(cred, StakeCredential);\n        _assertClass(delta, Int);\n        var ret = wasm.mirtostakecredentials_insert(this.ptr, cred.ptr, delta.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} cred\n    * @returns {Int | undefined}\n    */\n    get(cred) {\n        _assertClass(cred, StakeCredential);\n        var ret = wasm.mirtostakecredentials_get(this.ptr, cred.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredentials}\n    */\n    keys() {\n        var ret = wasm.mirtostakecredentials_keys(this.ptr);\n        return StakeCredentials.__wrap(ret);\n    }\n}\n/**\n*/\nexport class MetadataList {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataList.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadatalist_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatalist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MetadataList}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatalist_from_bytes(ptr0, len0);\n        return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    static new() {\n        var ret = wasm.metadatalist_new();\n        return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.metadatalist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionMetadatum}\n    */\n    get(index) {\n        var ret = wasm.metadatalist_get(this.ptr, index);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionMetadatum);\n        wasm.metadatalist_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class MetadataMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadatamap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatamap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MetadataMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatamap_from_bytes(ptr0, len0);\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataMap}\n    */\n    static new() {\n        var ret = wasm.metadatamap_new();\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.metadatamap_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, TransactionMetadatum);\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert_str(key, value) {\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert_str(this.ptr, ptr0, len0, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {number} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert_i32(key, value) {\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert_i32(this.ptr, key, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @returns {TransactionMetadatum}\n    */\n    get(key) {\n        _assertClass(key, TransactionMetadatum);\n        var ret = wasm.metadatamap_get(this.ptr, key.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} key\n    * @returns {TransactionMetadatum}\n    */\n    get_str(key) {\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatamap_get_str(this.ptr, ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {number} key\n    * @returns {TransactionMetadatum}\n    */\n    get_i32(key) {\n        var ret = wasm.metadatamap_get_i32(this.ptr, key);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @returns {boolean}\n    */\n    has(key) {\n        _assertClass(key, TransactionMetadatum);\n        var ret = wasm.metadatamap_has(this.ptr, key.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    keys() {\n        var ret = wasm.metadatamap_keys(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Mint {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Mint.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mint_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Mint}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.mint_from_bytes(ptr0, len0);\n        return Mint.__wrap(ret);\n    }\n    /**\n    * @returns {Mint}\n    */\n    static new() {\n        var ret = wasm.mint_new();\n        return Mint.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.mint_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ScriptHash} key\n    * @param {MintAssets} value\n    * @returns {MintAssets | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        var ret = wasm.mint_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} key\n    * @returns {MintAssets | undefined}\n    */\n    get(key) {\n        _assertClass(key, ScriptHash);\n        var ret = wasm.mint_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n    keys() {\n        var ret = wasm.mint_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n}\n/**\n*/\nexport class MintAssets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MintAssets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mintassets_free(ptr);\n    }\n    /**\n    * @returns {MintAssets}\n    */\n    static new() {\n        var ret = wasm.mintassets_new();\n        return MintAssets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.mintassets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {AssetName} key\n    * @param {Int} value\n    * @returns {Int | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        var ret = wasm.mintassets_insert(this.ptr, key.ptr, ptr0);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @returns {Int | undefined}\n    */\n    get(key) {\n        _assertClass(key, AssetName);\n        var ret = wasm.mintassets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    keys() {\n        var ret = wasm.mintassets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/**\n*/\nexport class MoveInstantaneousReward {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousReward.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_moveinstantaneousreward_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousreward_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MoveInstantaneousReward}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousreward_from_bytes(ptr0, len0);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {number} pot\n    * @param {BigNum} amount\n    * @returns {MoveInstantaneousReward}\n    */\n    static new_to_other_pot(pot, amount) {\n        _assertClass(amount, BigNum);\n        var ret = wasm.moveinstantaneousreward_new_to_other_pot(pot, amount.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {number} pot\n    * @param {MIRToStakeCredentials} amounts\n    * @returns {MoveInstantaneousReward}\n    */\n    static new_to_stake_creds(pot, amounts) {\n        _assertClass(amounts, MIRToStakeCredentials);\n        var ret = wasm.moveinstantaneousreward_new_to_stake_creds(pot, amounts.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    pot() {\n        var ret = wasm.moveinstantaneousreward_pot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.moveinstantaneousreward_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_to_other_pot() {\n        var ret = wasm.moveinstantaneousreward_as_to_other_pot(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {MIRToStakeCredentials | undefined}\n    */\n    as_to_stake_creds() {\n        var ret = wasm.moveinstantaneousreward_as_to_stake_creds(this.ptr);\n        return ret === 0 ? undefined : MIRToStakeCredentials.__wrap(ret);\n    }\n}\n/**\n*/\nexport class MoveInstantaneousRewardsCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousRewardsCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_moveinstantaneousrewardscert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousrewardscert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousrewardscert_from_bytes(ptr0, len0);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n    /**\n    * @returns {MoveInstantaneousReward}\n    */\n    move_instantaneous_reward() {\n        var ret = wasm.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {MoveInstantaneousReward} move_instantaneous_reward\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n    static new(move_instantaneous_reward) {\n        _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\n        var ret = wasm.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/**\n*/\nexport class MultiAsset {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MultiAsset.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_multiasset_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multiasset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MultiAsset}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multiasset_from_bytes(ptr0, len0);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n    * @returns {MultiAsset}\n    */\n    static new() {\n        var ret = wasm.multiasset_new();\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.multiasset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ScriptHash} key\n    * @param {Assets} value\n    * @returns {Assets | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, Assets);\n        var ret = wasm.multiasset_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} key\n    * @returns {Assets | undefined}\n    */\n    get(key) {\n        _assertClass(key, ScriptHash);\n        var ret = wasm.multiasset_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n    keys() {\n        var ret = wasm.multiasset_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * removes an asset from the list if the result is 0 or less\n    * @param {MultiAsset} rhs_ma\n    * @returns {MultiAsset}\n    */\n    sub(rhs_ma) {\n        _assertClass(rhs_ma, MultiAsset);\n        var ret = wasm.multiasset_sub(this.ptr, rhs_ma.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\n/**\n*/\nexport class MultiHostName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MultiHostName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_multihostname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multihostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MultiHostName}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multihostname_from_bytes(ptr0, len0);\n        return MultiHostName.__wrap(ret);\n    }\n    /**\n    * @returns {DNSRecordSRV}\n    */\n    dns_name() {\n        var ret = wasm.multihostname_dns_name(this.ptr);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @param {DNSRecordSRV} dns_name\n    * @returns {MultiHostName}\n    */\n    static new(dns_name) {\n        _assertClass(dns_name, DNSRecordSRV);\n        var ret = wasm.multihostname_new(dns_name.ptr);\n        return MultiHostName.__wrap(ret);\n    }\n}\n/**\n*/\nexport class NativeScript {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScript.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nativescript_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nativescript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {NativeScript}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nativescript_from_bytes(ptr0, len0);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {number} namespace\n    * @returns {Ed25519KeyHash}\n    */\n    hash(namespace) {\n        var ret = wasm.nativescript_hash(this.ptr, namespace);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {ScriptPubkey} script_pubkey\n    * @returns {NativeScript}\n    */\n    static new_script_pubkey(script_pubkey) {\n        _assertClass(script_pubkey, ScriptPubkey);\n        var ret = wasm.nativescript_new_script_pubkey(script_pubkey.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptAll} script_all\n    * @returns {NativeScript}\n    */\n    static new_script_all(script_all) {\n        _assertClass(script_all, ScriptAll);\n        var ret = wasm.nativescript_new_script_all(script_all.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptAny} script_any\n    * @returns {NativeScript}\n    */\n    static new_script_any(script_any) {\n        _assertClass(script_any, ScriptAny);\n        var ret = wasm.nativescript_new_script_any(script_any.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptNOfK} script_n_of_k\n    * @returns {NativeScript}\n    */\n    static new_script_n_of_k(script_n_of_k) {\n        _assertClass(script_n_of_k, ScriptNOfK);\n        var ret = wasm.nativescript_new_script_n_of_k(script_n_of_k.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {TimelockStart} timelock_start\n    * @returns {NativeScript}\n    */\n    static new_timelock_start(timelock_start) {\n        _assertClass(timelock_start, TimelockStart);\n        var ret = wasm.nativescript_new_timelock_start(timelock_start.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {TimelockExpiry} timelock_expiry\n    * @returns {NativeScript}\n    */\n    static new_timelock_expiry(timelock_expiry) {\n        _assertClass(timelock_expiry, TimelockExpiry);\n        var ret = wasm.nativescript_new_timelock_expiry(timelock_expiry.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.nativescript_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {ScriptPubkey | undefined}\n    */\n    as_script_pubkey() {\n        var ret = wasm.nativescript_as_script_pubkey(this.ptr);\n        return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptAll | undefined}\n    */\n    as_script_all() {\n        var ret = wasm.nativescript_as_script_all(this.ptr);\n        return ret === 0 ? undefined : ScriptAll.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptAny | undefined}\n    */\n    as_script_any() {\n        var ret = wasm.nativescript_as_script_any(this.ptr);\n        return ret === 0 ? undefined : ScriptAny.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptNOfK | undefined}\n    */\n    as_script_n_of_k() {\n        var ret = wasm.nativescript_as_script_n_of_k(this.ptr);\n        return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\n    }\n    /**\n    * @returns {TimelockStart | undefined}\n    */\n    as_timelock_start() {\n        var ret = wasm.nativescript_as_timelock_start(this.ptr);\n        return ret === 0 ? undefined : TimelockStart.__wrap(ret);\n    }\n    /**\n    * @returns {TimelockExpiry | undefined}\n    */\n    as_timelock_expiry() {\n        var ret = wasm.nativescript_as_timelock_expiry(this.ptr);\n        return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\n    }\n}\n/**\n*/\nexport class NativeScripts {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScripts.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nativescripts_free(ptr);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    static new() {\n        var ret = wasm.nativescripts_new();\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.nativescripts_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {NativeScript}\n    */\n    get(index) {\n        var ret = wasm.nativescripts_get(this.ptr, index);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {NativeScript} elem\n    */\n    add(elem) {\n        _assertClass(elem, NativeScript);\n        wasm.nativescripts_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class NetworkId {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkId.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_networkid_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.networkid_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {NetworkId}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.networkid_from_bytes(ptr0, len0);\n        return NetworkId.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkId}\n    */\n    static testnet() {\n        var ret = wasm.networkid_testnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkId}\n    */\n    static mainnet() {\n        var ret = wasm.networkid_mainnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.networkid_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nexport class NetworkInfo {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkInfo.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_networkinfo_free(ptr);\n    }\n    /**\n    * @param {number} network_id\n    * @param {number} protocol_magic\n    * @returns {NetworkInfo}\n    */\n    static new(network_id, protocol_magic) {\n        var ret = wasm.networkinfo_new(network_id, protocol_magic);\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        var ret = wasm.networkinfo_network_id(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    protocol_magic() {\n        var ret = wasm.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {NetworkInfo}\n    */\n    static testnet() {\n        var ret = wasm.networkinfo_testnet();\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkInfo}\n    */\n    static mainnet() {\n        var ret = wasm.networkinfo_mainnet();\n        return NetworkInfo.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Nonce {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Nonce.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nonce_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nonce_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Nonce}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nonce_from_bytes(ptr0, len0);\n        return Nonce.__wrap(ret);\n    }\n    /**\n    * @returns {Nonce}\n    */\n    static new_identity() {\n        var ret = wasm.nonce_new_identity();\n        return Nonce.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} hash\n    * @returns {Nonce}\n    */\n    static new_from_hash(hash) {\n        var ptr0 = passArray8ToWasm0(hash, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nonce_new_from_hash(ptr0, len0);\n        return Nonce.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    get_hash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nonce_get_hash(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class OperationalCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(OperationalCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_operationalcert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.operationalcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {OperationalCert}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.operationalcert_from_bytes(ptr0, len0);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n    * @returns {KESVKey}\n    */\n    hot_vkey() {\n        var ret = wasm.operationalcert_hot_vkey(this.ptr);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    sequence_number() {\n        var ret = wasm.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    kes_period() {\n        var ret = wasm.operationalcert_kes_period(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    sigma() {\n        var ret = wasm.operationalcert_sigma(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {KESVKey} hot_vkey\n    * @param {number} sequence_number\n    * @param {number} kes_period\n    * @param {Ed25519Signature} sigma\n    * @returns {OperationalCert}\n    */\n    static new(hot_vkey, sequence_number, kes_period, sigma) {\n        _assertClass(hot_vkey, KESVKey);\n        _assertClass(sigma, Ed25519Signature);\n        var ret = wasm.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PlutusData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusdata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusData}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusdata_from_bytes(ptr0, len0);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {ConstrPlutusData} constr_plutus_data\n    * @returns {PlutusData}\n    */\n    static new_constr_plutus_data(constr_plutus_data) {\n        _assertClass(constr_plutus_data, ConstrPlutusData);\n        var ret = wasm.plutusdata_new_constr_plutus_data(constr_plutus_data.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusMap} map\n    * @returns {PlutusData}\n    */\n    static new_map(map) {\n        _assertClass(map, PlutusMap);\n        var ret = wasm.plutusdata_new_map(map.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusList} list\n    * @returns {PlutusData}\n    */\n    static new_list(list) {\n        _assertClass(list, PlutusList);\n        var ret = wasm.plutusdata_new_list(list.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {BigInt} integer\n    * @returns {PlutusData}\n    */\n    static new_integer(integer) {\n        _assertClass(integer, BigInt);\n        var ret = wasm.plutusdata_new_integer(integer.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusData}\n    */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusdata_new_bytes(ptr0, len0);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.plutusdata_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {ConstrPlutusData | undefined}\n    */\n    as_constr_plutus_data() {\n        var ret = wasm.plutusdata_as_constr_plutus_data(this.ptr);\n        return ret === 0 ? undefined : ConstrPlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusMap | undefined}\n    */\n    as_map() {\n        var ret = wasm.plutusdata_as_map(this.ptr);\n        return ret === 0 ? undefined : PlutusMap.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList | undefined}\n    */\n    as_list() {\n        var ret = wasm.plutusdata_as_list(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n    * @returns {BigInt | undefined}\n    */\n    as_integer() {\n        var ret = wasm.plutusdata_as_integer(this.ptr);\n        return ret === 0 ? undefined : BigInt.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusdata_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class PlutusList {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusList.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutuslist_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutuslist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusList}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutuslist_from_bytes(ptr0, len0);\n        return PlutusList.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList}\n    */\n    static new() {\n        var ret = wasm.plutuslist_new();\n        return PlutusList.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.plutuslist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PlutusData}\n    */\n    get(index) {\n        var ret = wasm.plutuslist_get(this.ptr, index);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusData} elem\n    */\n    add(elem) {\n        _assertClass(elem, PlutusData);\n        wasm.plutuslist_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class PlutusMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusmap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusmap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusmap_from_bytes(ptr0, len0);\n        return PlutusMap.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusMap}\n    */\n    static new() {\n        var ret = wasm.plutusmap_new();\n        return PlutusMap.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.plutusmap_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {PlutusData} key\n    * @param {PlutusData} value\n    * @returns {PlutusData | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, PlutusData);\n        _assertClass(value, PlutusData);\n        var ret = wasm.plutusmap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusData} key\n    * @returns {PlutusData | undefined}\n    */\n    get(key) {\n        _assertClass(key, PlutusData);\n        var ret = wasm.plutusmap_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList}\n    */\n    keys() {\n        var ret = wasm.plutusmap_keys(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PlutusScript {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScript.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusscript_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScript}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusscript_from_bytes(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScript}\n    */\n    static new(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusscript_new(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscript_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class PlutusScripts {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScripts.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusscripts_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscripts_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScripts}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusscripts_from_bytes(ptr0, len0);\n        return PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusScripts}\n    */\n    static new() {\n        var ret = wasm.plutusscripts_new();\n        return PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.plutusscripts_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PlutusScript}\n    */\n    get(index) {\n        var ret = wasm.plutusscripts_get(this.ptr, index);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScript} elem\n    */\n    add(elem) {\n        _assertClass(elem, PlutusScript);\n        wasm.plutusscripts_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class Pointer {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Pointer.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pointer_free(ptr);\n    }\n    /**\n    * @param {number} slot\n    * @param {number} tx_index\n    * @param {number} cert_index\n    * @returns {Pointer}\n    */\n    static new(slot, tx_index, cert_index) {\n        var ret = wasm.pointer_new(slot, tx_index, cert_index);\n        return Pointer.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = wasm.pointer_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    tx_index() {\n        var ret = wasm.pointer_tx_index(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    cert_index() {\n        var ret = wasm.pointer_cert_index(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nexport class PointerAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PointerAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pointeraddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @param {Pointer} stake\n    * @returns {PointerAddress}\n    */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, Pointer);\n        var ret = wasm.pointeraddress_new(network, payment.ptr, stake.ptr);\n        return PointerAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = wasm.pointeraddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Pointer}\n    */\n    stake_pointer() {\n        var ret = wasm.pointeraddress_stake_pointer(this.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = wasm.pointeraddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {PointerAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.pointeraddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PoolMetadata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadata.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolmetadata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolMetadata}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadata_from_bytes(ptr0, len0);\n        return PoolMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {URL}\n    */\n    url() {\n        var ret = wasm.poolmetadata_url(this.ptr);\n        return URL.__wrap(ret);\n    }\n    /**\n    * @returns {PoolMetadataHash}\n    */\n    pool_metadata_hash() {\n        var ret = wasm.poolmetadata_pool_metadata_hash(this.ptr);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n    * @param {URL} url\n    * @param {PoolMetadataHash} pool_metadata_hash\n    * @returns {PoolMetadata}\n    */\n    static new(url, pool_metadata_hash) {\n        _assertClass(url, URL);\n        _assertClass(pool_metadata_hash, PoolMetadataHash);\n        var ret = wasm.poolmetadata_new(url.ptr, pool_metadata_hash.ptr);\n        return PoolMetadata.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PoolMetadataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolmetadatahash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {PoolMetadataHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadatahash_from_bech32(ptr0, len0);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolMetadataHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadatahash_from_bytes(ptr0, len0);\n        return PoolMetadataHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PoolParams {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolParams.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolparams_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolparams_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolParams}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolparams_from_bytes(ptr0, len0);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    operator() {\n        var ret = wasm.poolparams_operator(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {VRFKeyHash}\n    */\n    vrf_keyhash() {\n        var ret = wasm.poolparams_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    pledge() {\n        var ret = wasm.poolparams_pledge(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    cost() {\n        var ret = wasm.poolparams_cost(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n    margin() {\n        var ret = wasm.poolparams_margin(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddress}\n    */\n    reward_account() {\n        var ret = wasm.poolparams_reward_account(this.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHashes}\n    */\n    pool_owners() {\n        var ret = wasm.poolparams_pool_owners(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {Relays}\n    */\n    relays() {\n        var ret = wasm.poolparams_relays(this.ptr);\n        return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {PoolMetadata | undefined}\n    */\n    pool_metadata() {\n        var ret = wasm.poolparams_pool_metadata(this.ptr);\n        return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} operator\n    * @param {VRFKeyHash} vrf_keyhash\n    * @param {BigNum} pledge\n    * @param {BigNum} cost\n    * @param {UnitInterval} margin\n    * @param {RewardAddress} reward_account\n    * @param {Ed25519KeyHashes} pool_owners\n    * @param {Relays} relays\n    * @param {PoolMetadata | undefined} pool_metadata\n    * @returns {PoolParams}\n    */\n    static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\n        _assertClass(operator, Ed25519KeyHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        _assertClass(pledge, BigNum);\n        _assertClass(cost, BigNum);\n        _assertClass(margin, UnitInterval);\n        _assertClass(reward_account, RewardAddress);\n        _assertClass(pool_owners, Ed25519KeyHashes);\n        _assertClass(relays, Relays);\n        let ptr0 = 0;\n        if (!isLikeNone(pool_metadata)) {\n            _assertClass(pool_metadata, PoolMetadata);\n            ptr0 = pool_metadata.ptr;\n            pool_metadata.ptr = 0;\n        }\n        var ret = wasm.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\n        return PoolParams.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PoolRegistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRegistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolregistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolRegistration}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolregistration_from_bytes(ptr0, len0);\n        return PoolRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {PoolParams}\n    */\n    pool_params() {\n        var ret = wasm.poolregistration_pool_params(this.ptr);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n    * @param {PoolParams} pool_params\n    * @returns {PoolRegistration}\n    */\n    static new(pool_params) {\n        _assertClass(pool_params, PoolParams);\n        var ret = wasm.poolregistration_new(pool_params.ptr);\n        return PoolRegistration.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PoolRetirement {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRetirement.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolretirement_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolretirement_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolRetirement}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolretirement_from_bytes(ptr0, len0);\n        return PoolRetirement.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    pool_keyhash() {\n        var ret = wasm.poolretirement_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    epoch() {\n        var ret = wasm.poolretirement_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {Ed25519KeyHash} pool_keyhash\n    * @param {number} epoch\n    * @returns {PoolRetirement}\n    */\n    static new(pool_keyhash, epoch) {\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        var ret = wasm.poolretirement_new(pool_keyhash.ptr, epoch);\n        return PoolRetirement.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    to_public() {\n        var ret = wasm.privatekey_to_public(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    static generate_ed25519() {\n        var ret = wasm.privatekey_generate_ed25519();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    static generate_ed25519extended() {\n        var ret = wasm.privatekey_generate_ed25519extended();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PrivateKey}\n    */\n    static from_extended_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_extended_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PrivateKey}\n    */\n    static from_normal_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_normal_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} message\n    * @returns {Ed25519Signature}\n    */\n    sign(message) {\n        var ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_sign(this.ptr, ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ProposedProtocolParameterUpdates {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProposedProtocolParameterUpdates.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_proposedprotocolparameterupdates_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proposedprotocolparameterupdates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.proposedprotocolparameterupdates_from_bytes(ptr0, len0);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    static new() {\n        var ret = wasm.proposedprotocolparameterupdates_new();\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.proposedprotocolparameterupdates_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {GenesisHash} key\n    * @param {ProtocolParamUpdate} value\n    * @returns {ProtocolParamUpdate | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, GenesisHash);\n        _assertClass(value, ProtocolParamUpdate);\n        var ret = wasm.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} key\n    * @returns {ProtocolParamUpdate | undefined}\n    */\n    get(key) {\n        _assertClass(key, GenesisHash);\n        var ret = wasm.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHashes}\n    */\n    keys() {\n        var ret = wasm.proposedprotocolparameterupdates_keys(this.ptr);\n        return GenesisHashes.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ProtocolParamUpdate {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolParamUpdate.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protocolparamupdate_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolParamUpdate}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolparamupdate_from_bytes(ptr0, len0);\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} minfee_a\n    */\n    set_minfee_a(minfee_a) {\n        _assertClass(minfee_a, BigNum);\n        wasm.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    minfee_a() {\n        var ret = wasm.protocolparamupdate_minfee_a(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} minfee_b\n    */\n    set_minfee_b(minfee_b) {\n        _assertClass(minfee_b, BigNum);\n        wasm.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    minfee_b() {\n        var ret = wasm.protocolparamupdate_minfee_b(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {number} max_block_body_size\n    */\n    set_max_block_body_size(max_block_body_size) {\n        wasm.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_block_body_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_block_body_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} max_tx_size\n    */\n    set_max_tx_size(max_tx_size) {\n        wasm.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_tx_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_tx_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} max_block_header_size\n    */\n    set_max_block_header_size(max_block_header_size) {\n        wasm.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_block_header_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_block_header_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {BigNum} key_deposit\n    */\n    set_key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        wasm.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    key_deposit() {\n        var ret = wasm.protocolparamupdate_key_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} pool_deposit\n    */\n    set_pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        wasm.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    pool_deposit() {\n        var ret = wasm.protocolparamupdate_pool_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {number} max_epoch\n    */\n    set_max_epoch(max_epoch) {\n        wasm.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_epoch() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_epoch(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} n_opt\n    */\n    set_n_opt(n_opt) {\n        wasm.protocolparamupdate_set_n_opt(this.ptr, n_opt);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    n_opt() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_n_opt(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {UnitInterval} pool_pledge_influence\n    */\n    set_pool_pledge_influence(pool_pledge_influence) {\n        _assertClass(pool_pledge_influence, UnitInterval);\n        wasm.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    pool_pledge_influence() {\n        var ret = wasm.protocolparamupdate_pool_pledge_influence(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} expansion_rate\n    */\n    set_expansion_rate(expansion_rate) {\n        _assertClass(expansion_rate, UnitInterval);\n        wasm.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    expansion_rate() {\n        var ret = wasm.protocolparamupdate_expansion_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} treasury_growth_rate\n    */\n    set_treasury_growth_rate(treasury_growth_rate) {\n        _assertClass(treasury_growth_rate, UnitInterval);\n        wasm.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    treasury_growth_rate() {\n        var ret = wasm.protocolparamupdate_treasury_growth_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} d\n    */\n    set_d(d) {\n        _assertClass(d, UnitInterval);\n        wasm.protocolparamupdate_set_d(this.ptr, d.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    d() {\n        var ret = wasm.protocolparamupdate_d(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {Nonce} extra_entropy\n    */\n    set_extra_entropy(extra_entropy) {\n        _assertClass(extra_entropy, Nonce);\n        wasm.protocolparamupdate_set_extra_entropy(this.ptr, extra_entropy.ptr);\n    }\n    /**\n    * @returns {Nonce | undefined}\n    */\n    extra_entropy() {\n        var ret = wasm.protocolparamupdate_extra_entropy(this.ptr);\n        return ret === 0 ? undefined : Nonce.__wrap(ret);\n    }\n    /**\n    * @param {ProtocolVersions} protocol_version\n    */\n    set_protocol_version(protocol_version) {\n        _assertClass(protocol_version, ProtocolVersions);\n        wasm.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\n    }\n    /**\n    * @returns {ProtocolVersions | undefined}\n    */\n    protocol_version() {\n        var ret = wasm.protocolparamupdate_protocol_version(this.ptr);\n        return ret === 0 ? undefined : ProtocolVersions.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} min_pool_cost\n    */\n    set_min_pool_cost(min_pool_cost) {\n        _assertClass(min_pool_cost, BigNum);\n        wasm.protocolparamupdate_set_min_pool_cost(this.ptr, min_pool_cost.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    min_pool_cost() {\n        var ret = wasm.protocolparamupdate_min_pool_cost(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} ada_per_utxo_byte\n    */\n    set_ada_per_utxo_byte(ada_per_utxo_byte) {\n        _assertClass(ada_per_utxo_byte, BigNum);\n        wasm.protocolparamupdate_set_ada_per_utxo_byte(this.ptr, ada_per_utxo_byte.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    ada_per_utxo_byte() {\n        var ret = wasm.protocolparamupdate_ada_per_utxo_byte(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {Costmdls} cost_models\n    */\n    set_cost_models(cost_models) {\n        _assertClass(cost_models, Costmdls);\n        wasm.protocolparamupdate_set_cost_models(this.ptr, cost_models.ptr);\n    }\n    /**\n    * @returns {Costmdls | undefined}\n    */\n    cost_models() {\n        var ret = wasm.protocolparamupdate_cost_models(this.ptr);\n        return ret === 0 ? undefined : Costmdls.__wrap(ret);\n    }\n    /**\n    * @param {ExUnitPrices} execution_costs\n    */\n    set_execution_costs(execution_costs) {\n        _assertClass(execution_costs, ExUnitPrices);\n        wasm.protocolparamupdate_set_execution_costs(this.ptr, execution_costs.ptr);\n    }\n    /**\n    * @returns {ExUnitPrices | undefined}\n    */\n    execution_costs() {\n        var ret = wasm.protocolparamupdate_execution_costs(this.ptr);\n        return ret === 0 ? undefined : ExUnitPrices.__wrap(ret);\n    }\n    /**\n    * @param {ExUnits} max_tx_ex_units\n    */\n    set_max_tx_ex_units(max_tx_ex_units) {\n        _assertClass(max_tx_ex_units, ExUnits);\n        wasm.protocolparamupdate_set_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n    }\n    /**\n    * @returns {ExUnits | undefined}\n    */\n    max_tx_ex_units() {\n        var ret = wasm.protocolparamupdate_max_tx_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {ExUnits} max_block_ex_units\n    */\n    set_max_block_ex_units(max_block_ex_units) {\n        _assertClass(max_block_ex_units, ExUnits);\n        wasm.protocolparamupdate_set_max_block_ex_units(this.ptr, max_block_ex_units.ptr);\n    }\n    /**\n    * @returns {ExUnits | undefined}\n    */\n    max_block_ex_units() {\n        var ret = wasm.protocolparamupdate_max_block_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {number} max_value_size\n    */\n    set_max_value_size(max_value_size) {\n        wasm.protocolparamupdate_set_max_value_size(this.ptr, max_value_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_value_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_value_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {ProtocolParamUpdate}\n    */\n    static new() {\n        var ret = wasm.protocolparamupdate_new();\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ProtocolVersion {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolVersion.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protocolversion_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversion_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolVersion}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolversion_from_bytes(ptr0, len0);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    major() {\n        var ret = wasm.protocolversion_major(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    minor() {\n        var ret = wasm.protocolversion_minor(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} major\n    * @param {number} minor\n    * @returns {ProtocolVersion}\n    */\n    static new(major, minor) {\n        var ret = wasm.protocolversion_new(major, minor);\n        return ProtocolVersion.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ProtocolVersions {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolVersions.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protocolversions_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversions_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolVersions}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolversions_from_bytes(ptr0, len0);\n        return ProtocolVersions.__wrap(ret);\n    }\n    /**\n    * @returns {ProtocolVersions}\n    */\n    static new() {\n        var ret = wasm.protocolversions_new();\n        return ProtocolVersions.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.protocolversions_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {ProtocolVersion}\n    */\n    get(index) {\n        var ret = wasm.protocolversions_get(this.ptr, index);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @param {ProtocolVersion} elem\n    */\n    add(elem) {\n        _assertClass(elem, ProtocolVersion);\n        wasm.protocolversions_add(this.ptr, elem.ptr);\n    }\n}\n/**\n* ED25519 key used as public key\n*/\nexport class PublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_publickey_free(ptr);\n    }\n    /**\n    * Get public key from its bech32 representation\n    * Example:\n    * ```javascript\n    * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\n    * ```\n    * @param {string} bech32_str\n    * @returns {PublicKey}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.publickey_from_bech32(ptr0, len0);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PublicKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.publickey_from_bytes(ptr0, len0);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @param {Ed25519Signature} signature\n    * @returns {boolean}\n    */\n    verify(data, signature) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Ed25519Signature);\n        var ret = wasm.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    hash() {\n        var ret = wasm.publickey_hash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PublicKeys {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKeys.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_publickeys_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        var ret = wasm.publickeys_new();\n        return PublicKeys.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    size() {\n        var ret = wasm.publickeys_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PublicKey}\n    */\n    get(index) {\n        var ret = wasm.publickeys_get(this.ptr, index);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {PublicKey} key\n    */\n    add(key) {\n        _assertClass(key, PublicKey);\n        wasm.publickeys_add(this.ptr, key.ptr);\n    }\n}\n/**\n*/\nexport class Redeemer {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemer.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemer_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemer_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Redeemer}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.redeemer_from_bytes(ptr0, len0);\n        return Redeemer.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    tag() {\n        var ret = wasm.redeemer_tag(this.ptr);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    index() {\n        var ret = wasm.redeemer_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusData}\n    */\n    data() {\n        var ret = wasm.redeemer_data(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {ExUnits}\n    */\n    ex_units() {\n        var ret = wasm.redeemer_ex_units(this.ptr);\n        return ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {RedeemerTag} tag\n    * @param {BigNum} index\n    * @param {PlutusData} data\n    * @param {ExUnits} ex_units\n    * @returns {Redeemer}\n    */\n    static new(tag, index, data, ex_units) {\n        _assertClass(tag, RedeemerTag);\n        _assertClass(index, BigNum);\n        _assertClass(data, PlutusData);\n        _assertClass(ex_units, ExUnits);\n        var ret = wasm.redeemer_new(tag.ptr, index.ptr, data.ptr, ex_units.ptr);\n        return Redeemer.__wrap(ret);\n    }\n}\n/**\n*/\nexport class RedeemerTag {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RedeemerTag.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemertag_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemertag_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {RedeemerTag}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.redeemertag_from_bytes(ptr0, len0);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_spend() {\n        var ret = wasm.redeemertag_new_spend();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_mint() {\n        var ret = wasm.redeemertag_new_mint();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_cert() {\n        var ret = wasm.redeemertag_new_cert();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_reward() {\n        var ret = wasm.redeemertag_new_reward();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.redeemertag_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nexport class Redeemers {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemers.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemers_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Redeemers}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.redeemers_from_bytes(ptr0, len0);\n        return Redeemers.__wrap(ret);\n    }\n    /**\n    * @returns {Redeemers}\n    */\n    static new() {\n        var ret = wasm.redeemers_new();\n        return Redeemers.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.redeemers_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Redeemer}\n    */\n    get(index) {\n        var ret = wasm.redeemers_get(this.ptr, index);\n        return Redeemer.__wrap(ret);\n    }\n    /**\n    * @param {Redeemer} elem\n    */\n    add(elem) {\n        _assertClass(elem, Redeemer);\n        wasm.redeemers_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class Relay {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Relay.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_relay_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relay_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Relay}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relay_from_bytes(ptr0, len0);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {SingleHostAddr} single_host_addr\n    * @returns {Relay}\n    */\n    static new_single_host_addr(single_host_addr) {\n        _assertClass(single_host_addr, SingleHostAddr);\n        var ret = wasm.relay_new_single_host_addr(single_host_addr.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {SingleHostName} single_host_name\n    * @returns {Relay}\n    */\n    static new_single_host_name(single_host_name) {\n        _assertClass(single_host_name, SingleHostName);\n        var ret = wasm.relay_new_single_host_name(single_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {MultiHostName} multi_host_name\n    * @returns {Relay}\n    */\n    static new_multi_host_name(multi_host_name) {\n        _assertClass(multi_host_name, MultiHostName);\n        var ret = wasm.relay_new_multi_host_name(multi_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.relay_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {SingleHostAddr | undefined}\n    */\n    as_single_host_addr() {\n        var ret = wasm.relay_as_single_host_addr(this.ptr);\n        return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\n    }\n    /**\n    * @returns {SingleHostName | undefined}\n    */\n    as_single_host_name() {\n        var ret = wasm.relay_as_single_host_name(this.ptr);\n        return ret === 0 ? undefined : SingleHostName.__wrap(ret);\n    }\n    /**\n    * @returns {MultiHostName | undefined}\n    */\n    as_multi_host_name() {\n        var ret = wasm.relay_as_multi_host_name(this.ptr);\n        return ret === 0 ? undefined : MultiHostName.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Relays {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Relays.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_relays_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relays_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Relays}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relays_from_bytes(ptr0, len0);\n        return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {Relays}\n    */\n    static new() {\n        var ret = wasm.relays_new();\n        return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.relays_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Relay}\n    */\n    get(index) {\n        var ret = wasm.relays_get(this.ptr, index);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {Relay} elem\n    */\n    add(elem) {\n        _assertClass(elem, Relay);\n        wasm.relays_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class RewardAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @returns {RewardAddress}\n    */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        var ret = wasm.rewardaddress_new(network, payment.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = wasm.rewardaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = wasm.rewardaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {RewardAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.rewardaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n}\n/**\n*/\nexport class RewardAddresses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddresses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardaddresses_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardaddresses_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {RewardAddresses}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.rewardaddresses_from_bytes(ptr0, len0);\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddresses}\n    */\n    static new() {\n        var ret = wasm.rewardaddresses_new();\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.rewardaddresses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {RewardAddress}\n    */\n    get(index) {\n        var ret = wasm.rewardaddresses_get(this.ptr, index);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @param {RewardAddress} elem\n    */\n    add(elem) {\n        _assertClass(elem, RewardAddress);\n        wasm.rewardaddresses_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class ScriptAll {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAll.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptall_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptAll}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptall_from_bytes(ptr0, len0);\n        return ScriptAll.__wrap(ret);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        var ret = wasm.scriptall_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptAll}\n    */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptall_new(native_scripts.ptr);\n        return ScriptAll.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ScriptAny {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAny.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptany_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptany_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptAny}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptany_from_bytes(ptr0, len0);\n        return ScriptAny.__wrap(ret);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        var ret = wasm.scriptany_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptAny}\n    */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptany_new(native_scripts.ptr);\n        return ScriptAny.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ScriptDataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptDataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptdatahash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptdatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.scriptdatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {ScriptDataHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptdatahash_from_bech32(ptr0, len0);\n        return ScriptDataHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptDataHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptdatahash_from_bytes(ptr0, len0);\n        return ScriptDataHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ScriptHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scripthash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.scripthash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {ScriptHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthash_from_bech32(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthash_from_bytes(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ScriptHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scripthashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptHashes}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthashes_from_bytes(ptr0, len0);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n    static new() {\n        var ret = wasm.scripthashes_new();\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.scripthashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {ScriptHash}\n    */\n    get(index) {\n        var ret = wasm.scripthashes_get(this.ptr, index);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, ScriptHash);\n        wasm.scripthashes_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class ScriptNOfK {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptNOfK.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptnofk_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptnofk_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptNOfK}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptnofk_from_bytes(ptr0, len0);\n        return ScriptNOfK.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    n() {\n        var ret = wasm.scriptnofk_n(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        var ret = wasm.scriptnofk_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {number} n\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptNOfK}\n    */\n    static new(n, native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptnofk_new(n, native_scripts.ptr);\n        return ScriptNOfK.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ScriptPubkey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptPubkey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptpubkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptpubkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptPubkey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptpubkey_from_bytes(ptr0, len0);\n        return ScriptPubkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    addr_keyhash() {\n        var ret = wasm.scriptpubkey_addr_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} addr_keyhash\n    * @returns {ScriptPubkey}\n    */\n    static new(addr_keyhash) {\n        _assertClass(addr_keyhash, Ed25519KeyHash);\n        var ret = wasm.scriptpubkey_new(addr_keyhash.ptr);\n        return ScriptPubkey.__wrap(ret);\n    }\n}\n/**\n*/\nexport class SingleHostAddr {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostAddr.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_singlehostaddr_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostaddr_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SingleHostAddr}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostaddr_from_bytes(ptr0, len0);\n        return SingleHostAddr.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    port() {\n        var ret = wasm.singlehostaddr_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @returns {Ipv4 | undefined}\n    */\n    ipv4() {\n        var ret = wasm.singlehostaddr_ipv4(this.ptr);\n        return ret === 0 ? undefined : Ipv4.__wrap(ret);\n    }\n    /**\n    * @returns {Ipv6 | undefined}\n    */\n    ipv6() {\n        var ret = wasm.singlehostaddr_ipv6(this.ptr);\n        return ret === 0 ? undefined : Ipv6.__wrap(ret);\n    }\n    /**\n    * @param {number | undefined} port\n    * @param {Ipv4 | undefined} ipv4\n    * @param {Ipv6 | undefined} ipv6\n    * @returns {SingleHostAddr}\n    */\n    static new(port, ipv4, ipv6) {\n        let ptr0 = 0;\n        if (!isLikeNone(ipv4)) {\n            _assertClass(ipv4, Ipv4);\n            ptr0 = ipv4.ptr;\n            ipv4.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(ipv6)) {\n            _assertClass(ipv6, Ipv6);\n            ptr1 = ipv6.ptr;\n            ipv6.ptr = 0;\n        }\n        var ret = wasm.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\n        return SingleHostAddr.__wrap(ret);\n    }\n}\n/**\n*/\nexport class SingleHostName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_singlehostname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SingleHostName}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostname_from_bytes(ptr0, len0);\n        return SingleHostName.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    port() {\n        var ret = wasm.singlehostname_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @returns {DNSRecordAorAAAA}\n    */\n    dns_name() {\n        var ret = wasm.singlehostname_dns_name(this.ptr);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @param {number | undefined} port\n    * @param {DNSRecordAorAAAA} dns_name\n    * @returns {SingleHostName}\n    */\n    static new(port, dns_name) {\n        _assertClass(dns_name, DNSRecordAorAAAA);\n        var ret = wasm.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\n        return SingleHostName.__wrap(ret);\n    }\n}\n/**\n*/\nexport class StakeCredential {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredential.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakecredential_free(ptr);\n    }\n    /**\n    * @param {Ed25519KeyHash} hash\n    * @returns {StakeCredential}\n    */\n    static from_keyhash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        var ret = wasm.stakecredential_from_keyhash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} hash\n    * @returns {StakeCredential}\n    */\n    static from_scripthash(hash) {\n        _assertClass(hash, ScriptHash);\n        var ret = wasm.stakecredential_from_scripthash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash | undefined}\n    */\n    to_keyhash() {\n        var ret = wasm.stakecredential_to_keyhash(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHash | undefined}\n    */\n    to_scripthash() {\n        var ret = wasm.stakecredential_to_scripthash(this.ptr);\n        return ret === 0 ? undefined : ScriptHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.stakecredential_kind(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredential_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeCredential}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredential_from_bytes(ptr0, len0);\n        return StakeCredential.__wrap(ret);\n    }\n}\n/**\n*/\nexport class StakeCredentials {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredentials.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakecredentials_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeCredentials}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredentials_from_bytes(ptr0, len0);\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredentials}\n    */\n    static new() {\n        var ret = wasm.stakecredentials_new();\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.stakecredentials_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {StakeCredential}\n    */\n    get(index) {\n        var ret = wasm.stakecredentials_get(this.ptr, index);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} elem\n    */\n    add(elem) {\n        _assertClass(elem, StakeCredential);\n        wasm.stakecredentials_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class StakeDelegation {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDelegation.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakedelegation_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakedelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeDelegation}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakedelegation_from_bytes(ptr0, len0);\n        return StakeDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        var ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    pool_keyhash() {\n        var ret = wasm.stakedelegation_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @param {Ed25519KeyHash} pool_keyhash\n    * @returns {StakeDelegation}\n    */\n    static new(stake_credential, pool_keyhash) {\n        _assertClass(stake_credential, StakeCredential);\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        var ret = wasm.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\n        return StakeDelegation.__wrap(ret);\n    }\n}\n/**\n*/\nexport class StakeDeregistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDeregistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakederegistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeDeregistration}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakederegistration_from_bytes(ptr0, len0);\n        return StakeDeregistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        var ret = wasm.stakederegistration_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @returns {StakeDeregistration}\n    */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        var ret = wasm.stakederegistration_new(stake_credential.ptr);\n        return StakeDeregistration.__wrap(ret);\n    }\n}\n/**\n*/\nexport class StakeRegistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeRegistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakeregistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakeregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeRegistration}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakeregistration_from_bytes(ptr0, len0);\n        return StakeRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        var ret = wasm.stakeregistration_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @returns {StakeRegistration}\n    */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        var ret = wasm.stakeregistration_new(stake_credential.ptr);\n        return StakeRegistration.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Strings {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Strings.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_strings_free(ptr);\n    }\n    /**\n    * @returns {Strings}\n    */\n    static new() {\n        var ret = wasm.strings_new();\n        return Strings.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.strings_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {string}\n    */\n    get(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.strings_get(retptr, this.ptr, index);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} elem\n    */\n    add(elem) {\n        var ptr0 = passStringToWasm0(elem, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.strings_add(this.ptr, ptr0, len0);\n    }\n}\n/**\n*/\nexport class TimelockExpiry {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockExpiry.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_timelockexpiry_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TimelockExpiry}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockexpiry_from_bytes(ptr0, len0);\n        return TimelockExpiry.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = wasm.timelockexpiry_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} slot\n    * @returns {TimelockExpiry}\n    */\n    static new(slot) {\n        var ret = wasm.timelockexpiry_new(slot);\n        return TimelockExpiry.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TimelockStart {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockStart.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_timelockstart_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockstart_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TimelockStart}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockstart_from_bytes(ptr0, len0);\n        return TimelockStart.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = wasm.timelockstart_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} slot\n    * @returns {TimelockStart}\n    */\n    static new(slot) {\n        var ret = wasm.timelockstart_new(slot);\n        return TimelockStart.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Transaction {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Transaction.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Transaction}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transaction_from_bytes(ptr0, len0);\n        return Transaction.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBody}\n    */\n    body() {\n        var ret = wasm.transaction_body(this.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSet}\n    */\n    witness_set() {\n        var ret = wasm.transaction_witness_set(this.ptr);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_valid() {\n        var ret = wasm.transaction_is_valid(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {AuxiliaryData | undefined}\n    */\n    auxiliary_data() {\n        var ret = wasm.transaction_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @param {boolean} valid\n    */\n    set_is_valid(valid) {\n        wasm.transaction_set_is_valid(this.ptr, valid);\n    }\n    /**\n    * @param {TransactionBody} body\n    * @param {TransactionWitnessSet} witness_set\n    * @param {AuxiliaryData | undefined} auxiliary_data\n    * @returns {Transaction}\n    */\n    static new(body, witness_set, auxiliary_data) {\n        _assertClass(body, TransactionBody);\n        _assertClass(witness_set, TransactionWitnessSet);\n        let ptr0 = 0;\n        if (!isLikeNone(auxiliary_data)) {\n            _assertClass(auxiliary_data, AuxiliaryData);\n            ptr0 = auxiliary_data.ptr;\n            auxiliary_data.ptr = 0;\n        }\n        var ret = wasm.transaction_new(body.ptr, witness_set.ptr, ptr0);\n        return Transaction.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TransactionBodies {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBodies.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbodies_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbodies_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionBodies}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbodies_from_bytes(ptr0, len0);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBodies}\n    */\n    static new() {\n        var ret = wasm.transactionbodies_new();\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.transactionbodies_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionBody}\n    */\n    get(index) {\n        var ret = wasm.transactionbodies_get(this.ptr, index);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @param {TransactionBody} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionBody);\n        wasm.transactionbodies_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class TransactionBody {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBody.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbody_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionBody}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbody_from_bytes(ptr0, len0);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n    inputs() {\n        var ret = wasm.transactionbody_inputs(this.ptr);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutputs}\n    */\n    outputs() {\n        var ret = wasm.transactionbody_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    fee() {\n        var ret = wasm.transactionbody_fee(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    ttl() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_ttl(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Certificates} certs\n    */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        wasm.transactionbody_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n    * @returns {Certificates | undefined}\n    */\n    certs() {\n        var ret = wasm.transactionbody_certs(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n    * @param {Withdrawals} withdrawals\n    */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        wasm.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n    * @returns {Withdrawals | undefined}\n    */\n    withdrawals() {\n        var ret = wasm.transactionbody_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n    * @param {Update} update\n    */\n    set_update(update) {\n        _assertClass(update, Update);\n        wasm.transactionbody_set_update(this.ptr, update.ptr);\n    }\n    /**\n    * @returns {Update | undefined}\n    */\n    update() {\n        var ret = wasm.transactionbody_update(this.ptr);\n        return ret === 0 ? undefined : Update.__wrap(ret);\n    }\n    /**\n    * @param {AuxiliaryDataHash} auxiliary_data_hash\n    */\n    set_auxiliary_data_hash(auxiliary_data_hash) {\n        _assertClass(auxiliary_data_hash, AuxiliaryDataHash);\n        wasm.transactionbody_set_auxiliary_data_hash(this.ptr, auxiliary_data_hash.ptr);\n    }\n    /**\n    * @returns {AuxiliaryDataHash | undefined}\n    */\n    auxiliary_data_hash() {\n        var ret = wasm.transactionbody_auxiliary_data_hash(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n    * @param {number} validity_start_interval\n    */\n    set_validity_start_interval(validity_start_interval) {\n        wasm.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    validity_start_interval() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_validity_start_interval(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Mint} mint\n    */\n    set_mint(mint) {\n        _assertClass(mint, Mint);\n        wasm.transactionbody_set_mint(this.ptr, mint.ptr);\n    }\n    /**\n    * @returns {Mint | undefined}\n    */\n    multiassets() {\n        var ret = wasm.transactionbody_multiassets(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n    * @param {ScriptDataHash} script_data_hash\n    */\n    set_script_data_hash(script_data_hash) {\n        _assertClass(script_data_hash, ScriptDataHash);\n        wasm.transactionbody_set_script_data_hash(this.ptr, script_data_hash.ptr);\n    }\n    /**\n    * @returns {ScriptDataHash | undefined}\n    */\n    script_data_hash() {\n        var ret = wasm.transactionbody_script_data_hash(this.ptr);\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInputs} collateral\n    */\n    set_collateral(collateral) {\n        _assertClass(collateral, TransactionInputs);\n        wasm.transactionbody_set_collateral(this.ptr, collateral.ptr);\n    }\n    /**\n    * @returns {TransactionInputs | undefined}\n    */\n    collateral() {\n        var ret = wasm.transactionbody_collateral(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHashes} required_signers\n    */\n    set_required_signers(required_signers) {\n        _assertClass(required_signers, Ed25519KeyHashes);\n        wasm.transactionbody_set_required_signers(this.ptr, required_signers.ptr);\n    }\n    /**\n    * @returns {Ed25519KeyHashes | undefined}\n    */\n    required_signers() {\n        var ret = wasm.transactionbody_required_signers(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @param {NetworkId} network_id\n    */\n    set_network_id(network_id) {\n        _assertClass(network_id, NetworkId);\n        wasm.transactionbody_set_network_id(this.ptr, network_id.ptr);\n    }\n    /**\n    * @returns {NetworkId | undefined}\n    */\n    network_id() {\n        var ret = wasm.transactionbody_network_id(this.ptr);\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInputs} inputs\n    * @param {TransactionOutputs} outputs\n    * @param {BigNum} fee\n    * @param {number | undefined} ttl\n    * @returns {TransactionBody}\n    */\n    static new(inputs, outputs, fee, ttl) {\n        _assertClass(inputs, TransactionInputs);\n        _assertClass(outputs, TransactionOutputs);\n        _assertClass(fee, BigNum);\n        var ret = wasm.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, !isLikeNone(ttl), isLikeNone(ttl) ? 0 : ttl);\n        return TransactionBody.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TransactionBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilder_free(ptr);\n    }\n    /**\n    * @param {Ed25519KeyHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_key_input(hash, input, amount) {\n        _assertClass(hash, Ed25519KeyHash);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        wasm.transactionbuilder_add_key_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {ScriptHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_script_input(hash, input, amount) {\n        _assertClass(hash, ScriptHash);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        wasm.transactionbuilder_add_script_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {ByronAddress} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_bootstrap_input(hash, input, amount) {\n        _assertClass(hash, ByronAddress);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        wasm.transactionbuilder_add_bootstrap_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {Address} address\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_input(address, input, amount) {\n        _assertClass(address, Address);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        wasm.transactionbuilder_add_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * calculates how much the fee would increase if you added a given output\n    * @param {Address} address\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    * @returns {BigNum}\n    */\n    fee_for_input(address, input, amount) {\n        _assertClass(address, Address);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        var ret = wasm.transactionbuilder_fee_for_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionOutput} output\n    */\n    add_output(output) {\n        _assertClass(output, TransactionOutput);\n        wasm.transactionbuilder_add_output(this.ptr, output.ptr);\n    }\n    /**\n    * calculates how much the fee would increase if you added a given output\n    * @param {TransactionOutput} output\n    * @returns {BigNum}\n    */\n    fee_for_output(output) {\n        _assertClass(output, TransactionOutput);\n        var ret = wasm.transactionbuilder_fee_for_output(this.ptr, output.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} fee\n    */\n    set_fee(fee) {\n        _assertClass(fee, BigNum);\n        wasm.transactionbuilder_set_fee(this.ptr, fee.ptr);\n    }\n    /**\n    * @param {number} ttl\n    */\n    set_ttl(ttl) {\n        wasm.transactionbuilder_set_ttl(this.ptr, ttl);\n    }\n    /**\n    * @param {number} validity_start_interval\n    */\n    set_validity_start_interval(validity_start_interval) {\n        wasm.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval);\n    }\n    /**\n    * @param {Certificates} certs\n    */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        wasm.transactionbuilder_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n    * @param {Withdrawals} withdrawals\n    */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        wasm.transactionbuilder_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n    * @param {AuxiliaryData} auxiliary_data\n    */\n    set_auxiliary_data(auxiliary_data) {\n        _assertClass(auxiliary_data, AuxiliaryData);\n        wasm.transactionbuilder_set_auxiliary_data(this.ptr, auxiliary_data.ptr);\n    }\n    /**\n    * @param {LinearFee} linear_fee\n    * @param {BigNum} minimum_utxo_val\n    * @param {BigNum} pool_deposit\n    * @param {BigNum} key_deposit\n    * @param {number} max_value_size\n    * @param {number} max_tx_size\n    * @returns {TransactionBuilder}\n    */\n    static new(linear_fee, minimum_utxo_val, pool_deposit, key_deposit, max_value_size, max_tx_size) {\n        _assertClass(linear_fee, LinearFee);\n        _assertClass(minimum_utxo_val, BigNum);\n        _assertClass(pool_deposit, BigNum);\n        _assertClass(key_deposit, BigNum);\n        var ret = wasm.transactionbuilder_new(linear_fee.ptr, minimum_utxo_val.ptr, pool_deposit.ptr, key_deposit.ptr, max_value_size, max_tx_size);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * does not include refunds or withdrawals\n    * @returns {Value}\n    */\n    get_explicit_input() {\n        var ret = wasm.transactionbuilder_get_explicit_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * withdrawals and refunds\n    * @returns {Value}\n    */\n    get_implicit_input() {\n        var ret = wasm.transactionbuilder_get_implicit_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * does not include fee\n    * @returns {Value}\n    */\n    get_explicit_output() {\n        var ret = wasm.transactionbuilder_get_explicit_output(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    get_deposit() {\n        var ret = wasm.transactionbuilder_get_deposit(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    get_fee_if_set() {\n        var ret = wasm.transactionbuilder_get_fee_if_set(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * Warning: this function will mutate the /fee/ field\n    * @param {Address} address\n    * @returns {boolean}\n    */\n    add_change_if_needed(address) {\n        _assertClass(address, Address);\n        var ret = wasm.transactionbuilder_add_change_if_needed(this.ptr, address.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {number}\n    */\n    full_size() {\n        var ret = wasm.transactionbuilder_full_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    output_sizes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_output_sizes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionBody}\n    */\n    build() {\n        var ret = wasm.transactionbuilder_build(this.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\n    * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\n    * this is done to simplify the library code, but can be fixed later\n    * @returns {BigNum}\n    */\n    min_fee() {\n        var ret = wasm.transactionbuilder_min_fee(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TransactionHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.transactionhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {TransactionHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionhash_from_bech32(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionhash_from_bytes(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TransactionInput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactioninput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionInput}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninput_from_bytes(ptr0, len0);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionHash}\n    */\n    transaction_id() {\n        var ret = wasm.transactioninput_transaction_id(this.ptr);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    index() {\n        var ret = wasm.transactioninput_index(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {TransactionHash} transaction_id\n    * @param {number} index\n    * @returns {TransactionInput}\n    */\n    static new(transaction_id, index) {\n        _assertClass(transaction_id, TransactionHash);\n        var ret = wasm.transactioninput_new(transaction_id.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TransactionInputs {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInputs.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactioninputs_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionInputs}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninputs_from_bytes(ptr0, len0);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n    static new() {\n        var ret = wasm.transactioninputs_new();\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.transactioninputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionInput}\n    */\n    get(index) {\n        var ret = wasm.transactioninputs_get(this.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInput} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionInput);\n        wasm.transactioninputs_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class TransactionMetadatum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionmetadatum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatum}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_from_bytes(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {MetadataMap} map\n    * @returns {TransactionMetadatum}\n    */\n    static new_map(map) {\n        _assertClass(map, MetadataMap);\n        var ret = wasm.transactionmetadatum_new_map(map.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {MetadataList} list\n    * @returns {TransactionMetadatum}\n    */\n    static new_list(list) {\n        _assertClass(list, MetadataList);\n        var ret = wasm.transactionmetadatum_new_list(list.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {TransactionMetadatum}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.transactionmetadatum_new_int(int.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatum}\n    */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_new_bytes(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {TransactionMetadatum}\n    */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_new_text(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.transactionmetadatum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {MetadataMap}\n    */\n    as_map() {\n        var ret = wasm.transactionmetadatum_as_map(this.ptr);\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    as_list() {\n        var ret = wasm.transactionmetadatum_as_list(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {Int}\n    */\n    as_int() {\n        var ret = wasm.transactionmetadatum_as_int(this.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nexport class TransactionMetadatumLabels {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatumLabels.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionmetadatumlabels_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatumlabels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatumLabels}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatumlabels_from_bytes(ptr0, len0);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionMetadatumLabels}\n    */\n    static new() {\n        var ret = wasm.transactionmetadatumlabels_new();\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.transactionmetadatumlabels_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {BigNum}\n    */\n    get(index) {\n        var ret = wasm.transactionmetadatumlabels_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} elem\n    */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        wasm.transactionmetadatumlabels_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class TransactionOutput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionOutput}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutput_from_bytes(ptr0, len0);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    address() {\n        var ret = wasm.transactionoutput_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {Value}\n    */\n    amount() {\n        var ret = wasm.transactionoutput_amount(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @returns {DataHash | undefined}\n    */\n    data_hash() {\n        var ret = wasm.transactionoutput_data_hash(this.ptr);\n        return ret === 0 ? undefined : DataHash.__wrap(ret);\n    }\n    /**\n    * @param {DataHash} data_hash\n    */\n    set_data_hash(data_hash) {\n        _assertClass(data_hash, DataHash);\n        wasm.transactionoutput_set_data_hash(this.ptr, data_hash.ptr);\n    }\n    /**\n    * @param {Address} address\n    * @param {Value} amount\n    * @returns {TransactionOutput}\n    */\n    static new(address, amount) {\n        _assertClass(address, Address);\n        _assertClass(amount, Value);\n        var ret = wasm.transactionoutput_new(address.ptr, amount.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TransactionOutputs {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputs.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputs_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionOutputs}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutputs_from_bytes(ptr0, len0);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutputs}\n    */\n    static new() {\n        var ret = wasm.transactionoutputs_new();\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.transactionoutputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionOutput}\n    */\n    get(index) {\n        var ret = wasm.transactionoutputs_get(this.ptr, index);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionOutput} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionOutput);\n        wasm.transactionoutputs_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class TransactionUnspentOutput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionunspentoutput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionunspentoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionUnspentOutput}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionunspentoutput_from_bytes(ptr0, len0);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInput} input\n    * @param {TransactionOutput} output\n    * @returns {TransactionUnspentOutput}\n    */\n    static new(input, output) {\n        _assertClass(input, TransactionInput);\n        _assertClass(output, TransactionOutput);\n        var ret = wasm.transactionunspentoutput_new(input.ptr, output.ptr);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInput}\n    */\n    input() {\n        var ret = wasm.transactionunspentoutput_input(this.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutput}\n    */\n    output() {\n        var ret = wasm.transactionunspentoutput_output(this.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TransactionWitnessSet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnessset_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnessset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionWitnessSet}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnessset_from_bytes(ptr0, len0);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @param {Vkeywitnesses} vkeys\n    */\n    set_vkeys(vkeys) {\n        _assertClass(vkeys, Vkeywitnesses);\n        wasm.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\n    }\n    /**\n    * @returns {Vkeywitnesses | undefined}\n    */\n    vkeys() {\n        var ret = wasm.transactionwitnessset_vkeys(this.ptr);\n        return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        wasm.transactionwitnessset_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n    * @returns {NativeScripts | undefined}\n    */\n    native_scripts() {\n        var ret = wasm.transactionwitnessset_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {BootstrapWitnesses} bootstraps\n    */\n    set_bootstraps(bootstraps) {\n        _assertClass(bootstraps, BootstrapWitnesses);\n        wasm.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\n    }\n    /**\n    * @returns {BootstrapWitnesses | undefined}\n    */\n    bootstraps() {\n        var ret = wasm.transactionwitnessset_bootstraps(this.ptr);\n        return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScripts} plutus_scripts\n    */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.transactionwitnessset_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n    * @returns {PlutusScripts | undefined}\n    */\n    plutus_scripts() {\n        var ret = wasm.transactionwitnessset_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @param {PlutusList} plutus_data\n    */\n    set_plutus_data(plutus_data) {\n        _assertClass(plutus_data, PlutusList);\n        wasm.transactionwitnessset_set_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n    * @returns {PlutusList | undefined}\n    */\n    plutus_data() {\n        var ret = wasm.transactionwitnessset_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n    * @param {Redeemers} redeemers\n    */\n    set_redeemers(redeemers) {\n        _assertClass(redeemers, Redeemers);\n        wasm.transactionwitnessset_set_redeemers(this.ptr, redeemers.ptr);\n    }\n    /**\n    * @returns {Redeemers | undefined}\n    */\n    redeemers() {\n        var ret = wasm.transactionwitnessset_redeemers(this.ptr);\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSet}\n    */\n    static new() {\n        var ret = wasm.transactionwitnessset_new();\n        return TransactionWitnessSet.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TransactionWitnessSets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnesssets_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionWitnessSets}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnesssets_from_bytes(ptr0, len0);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSets}\n    */\n    static new() {\n        var ret = wasm.transactionwitnesssets_new();\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.transactionwitnesssets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionWitnessSet}\n    */\n    get(index) {\n        var ret = wasm.transactionwitnesssets_get(this.ptr, index);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @param {TransactionWitnessSet} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionWitnessSet);\n        wasm.transactionwitnesssets_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class URL {\n\n    static __wrap(ptr) {\n        const obj = Object.create(URL.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_url_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.url_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {URL}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.url_from_bytes(ptr0, len0);\n        return URL.__wrap(ret);\n    }\n    /**\n    * @param {string} url\n    * @returns {URL}\n    */\n    static new(url) {\n        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.url_new(ptr0, len0);\n        return URL.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    url() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.url_url(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nexport class UnitInterval {\n\n    static __wrap(ptr) {\n        const obj = Object.create(UnitInterval.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_unitinterval_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unitinterval_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {UnitInterval}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.unitinterval_from_bytes(ptr0, len0);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    numerator() {\n        var ret = wasm.unitinterval_numerator(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    denominator() {\n        var ret = wasm.unitinterval_denominator(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} numerator\n    * @param {BigNum} denominator\n    * @returns {UnitInterval}\n    */\n    static new(numerator, denominator) {\n        _assertClass(numerator, BigNum);\n        _assertClass(denominator, BigNum);\n        var ret = wasm.unitinterval_new(numerator.ptr, denominator.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Update {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Update.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_update_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.update_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Update}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.update_from_bytes(ptr0, len0);\n        return Update.__wrap(ret);\n    }\n    /**\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    proposed_protocol_parameter_updates() {\n        var ret = wasm.update_proposed_protocol_parameter_updates(this.ptr);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    epoch() {\n        var ret = wasm.update_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\n    * @param {number} epoch\n    * @returns {Update}\n    */\n    static new(proposed_protocol_parameter_updates, epoch) {\n        _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\n        var ret = wasm.update_new(proposed_protocol_parameter_updates.ptr, epoch);\n        return Update.__wrap(ret);\n    }\n}\n/**\n*/\nexport class VRFCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfcert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFCert}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfcert_from_bytes(ptr0, len0);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    output() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_output(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    proof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_proof(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} output\n    * @param {Uint8Array} proof\n    * @returns {VRFCert}\n    */\n    static new(output, proof) {\n        var ptr0 = passArray8ToWasm0(output, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(proof, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfcert_new(ptr0, len0, ptr1, len1);\n        return VRFCert.__wrap(ret);\n    }\n}\n/**\n*/\nexport class VRFKeyHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFKeyHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfkeyhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfkeyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.vrfkeyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {VRFKeyHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfkeyhash_from_bech32(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFKeyHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfkeyhash_from_bytes(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n}\n/**\n*/\nexport class VRFVKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFVKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfvkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfvkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.vrfvkey_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {VRFVKey}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfvkey_from_bech32(ptr0, len0);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFVKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfvkey_from_bytes(ptr0, len0);\n        return VRFVKey.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Value {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Value.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_value_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.value_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Value}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.value_from_bytes(ptr0, len0);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    * @returns {Value}\n    */\n    static new(coin) {\n        _assertClass(coin, BigNum);\n        var ret = wasm.value_new(coin.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    coin() {\n        var ret = wasm.value_coin(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    */\n    set_coin(coin) {\n        _assertClass(coin, BigNum);\n        wasm.value_set_coin(this.ptr, coin.ptr);\n    }\n    /**\n    * @returns {MultiAsset | undefined}\n    */\n    multiasset() {\n        var ret = wasm.value_multiasset(this.ptr);\n        return ret === 0 ? undefined : MultiAsset.__wrap(ret);\n    }\n    /**\n    * @param {MultiAsset} multiasset\n    */\n    set_multiasset(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        wasm.value_set_multiasset(this.ptr, multiasset.ptr);\n    }\n    /**\n    * @param {Value} rhs\n    * @returns {Value}\n    */\n    checked_add(rhs) {\n        _assertClass(rhs, Value);\n        var ret = wasm.value_checked_add(this.ptr, rhs.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @param {Value} rhs_value\n    * @returns {Value}\n    */\n    checked_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_checked_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @param {Value} rhs_value\n    * @returns {Value}\n    */\n    clamped_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_clamped_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * note: values are only partially comparable\n    * @param {Value} rhs_value\n    * @returns {number | undefined}\n    */\n    compare(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_compare(this.ptr, rhs_value.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\n/**\n*/\nexport class Vkey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Vkey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vkey_from_bytes(ptr0, len0);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @param {PublicKey} pk\n    * @returns {Vkey}\n    */\n    static new(pk) {\n        _assertClass(pk, PublicKey);\n        var ret = wasm.vkey_new(pk.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    public_key() {\n        var ret = wasm.vkey_public_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Vkeys {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeys.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeys_free(ptr);\n    }\n    /**\n    * @returns {Vkeys}\n    */\n    static new() {\n        var ret = wasm.vkeys_new();\n        return Vkeys.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.vkeys_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Vkey}\n    */\n    get(index) {\n        var ret = wasm.vkeys_get(this.ptr, index);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @param {Vkey} elem\n    */\n    add(elem) {\n        _assertClass(elem, Vkey);\n        wasm.vkeys_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class Vkeywitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeywitness_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkeywitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Vkeywitness}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vkeywitness_from_bytes(ptr0, len0);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @param {Vkey} vkey\n    * @param {Ed25519Signature} signature\n    * @returns {Vkeywitness}\n    */\n    static new(vkey, signature) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        var ret = wasm.vkeywitness_new(vkey.ptr, signature.ptr);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n    vkey() {\n        var ret = wasm.vkeywitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    signature() {\n        var ret = wasm.vkeywitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Vkeywitnesses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitnesses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeywitnesses_free(ptr);\n    }\n    /**\n    * @returns {Vkeywitnesses}\n    */\n    static new() {\n        var ret = wasm.vkeywitnesses_new();\n        return Vkeywitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.vkeywitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Vkeywitness}\n    */\n    get(index) {\n        var ret = wasm.vkeywitnesses_get(this.ptr, index);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @param {Vkeywitness} elem\n    */\n    add(elem) {\n        _assertClass(elem, Vkeywitness);\n        wasm.vkeywitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class Withdrawals {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Withdrawals.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_withdrawals_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.withdrawals_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Withdrawals}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.withdrawals_from_bytes(ptr0, len0);\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n    * @returns {Withdrawals}\n    */\n    static new() {\n        var ret = wasm.withdrawals_new();\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.withdrawals_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {RewardAddress} key\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, RewardAddress);\n        _assertClass(value, BigNum);\n        var ret = wasm.withdrawals_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {RewardAddress} key\n    * @returns {BigNum | undefined}\n    */\n    get(key) {\n        _assertClass(key, RewardAddress);\n        var ret = wasm.withdrawals_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddresses}\n    */\n    keys() {\n        var ret = wasm.withdrawals_keys(this.ptr);\n        return RewardAddresses.__wrap(ret);\n    }\n}\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_3a746f2619705add(arg0, arg1) {\n    var ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_call_f54d3a6dadb199ca(arg0, arg1) {\n    var ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    var ret = getObject(arg0) === getObject(arg1);\n    return ret;\n};\n\nexport function __wbg_self_ac379e780a0d8b94(arg0) {\n    var ret = getObject(arg0).self;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_crypto_1e4302b85d4f64a2(arg0) {\n    var ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    var ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nexport function __wbg_getRandomValues_1b4ba144162a5c9e(arg0) {\n    var ret = getObject(arg0).getRandomValues;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_require_6461b1e9a0d7c34a(arg0, arg1) {\n    var ret = require(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_randomFillSync_1b52c8482374c55b(arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n};\n\nexport function __wbg_getRandomValues_1ef11e888e5228e9(arg0, arg1, arg2) {\n    getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    var ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_rethrow(arg0) {\n    throw takeObject(arg0);\n};\n\n"]},"metadata":{},"sourceType":"module"}