{"ast":null,"code":"import { Buffer } from \"buffer\";\nexport const fromHex = hex => Buffer.from(hex, \"hex\"); // async load() {\n//     await Loader.load();\n//     const p = await this.blockfrostRequest(`/epochs/latest/parameters`);\n//     this.protocolParameters = {\n//       linearFee: {\n//         minFeeA: p.min_fee_a.toString(),\n//         minFeeB: p.min_fee_b.toString(),\n//       },\n//       minUtxo: \"1000000\",\n//       poolDeposit: \"500000000\",\n//       keyDeposit: \"2000000\",\n//       maxValSize: \"5000\",\n//       maxTxSize: 16384,\n//       priceMem: 5.77e-2,\n//       priceStep: 7.21e-5,\n//     };\n//     this.hopperContractInfo = {\n//       policy:\n//         \"a53096f46350b8555bb9d36b403875805029180a56bd667b6c08d0fb\"\n//     };\n//     this.ramanujamContractInfo = {\n//       policy:\n//         \"0c8f4228d02dfaa4e2dcc33a87e25db30f34d238268f6ad57709db1c\"\n//     };\n// }\n// // /**\n// // *@private\n// // */\n// // async initTx() {\n// //     const txBuilder = Loader.Cardano.TransactionBuilder.new(\n// //         Loader.Cardano.LinearFee.new(\n// //         Loader.Cardano.BigNum.from_str(\n// //             this.protocolParameters.linearFee.minFeeA\n// //         ),\n// //         Loader.Cardano.BigNum.from_str(\n// //             this.protocolParameters.linearFee.minFeeB\n// //         )\n// //         ),\n// //         Loader.Cardano.BigNum.from_str(this.protocolParameters.minUtxo),\n// //         Loader.Cardano.BigNum.from_str(this.protocolParameters.poolDeposit),\n// //         Loader.Cardano.BigNum.from_str(this.protocolParameters.keyDeposit),\n// //         this.protocolParameters.maxValSize,\n// //         this.protocolParameters.maxTxSize,\n// //         this.protocolParameters.priceMem,\n// //         this.protocolParameters.priceStep,\n// //         Loader.Cardano.LanguageViews.new(Buffer.from(languageViews, \"hex\"))\n// //     );\n// //     const datums = Loader.Cardano.PlutusList.new();\n// //     const metadata = { [DATUM_LABEL]: {}, [ADDRESS_LABEL]: {} };\n// //     const outputs = Loader.Cardano.TransactionOutputs.new();\n// //     return { txBuilder, datums, metadata, outputs };\n// // }\n// //  /**\n// //    * @private\n// //    */\n// // createOutput(\n// //     address,\n// //     value,\n// // ) {\n// //     const v = value;\n// //     const minAda = Loader.Cardano.min_ada_required(\n// //                         v,\n// //                         false,\n// //                         Loader.Cardano.BigNum.from_str(this.protocolParameters.minUtxo)\n// //                     );\n// //     const output = Loader.Cardano.TransactionOutput.new(address, v);\n// //     return output;\n// // }\n// export async function send() {\n// //   const { txBuilder, datums, metadata, outputs } = await this.initTx();\n//   const walletAddress = Loader.Cardano.BaseAddress.from_address(\n//     Loader.Cardano.Address.from_bytes(\n//       fromHex((await window.cardano.getUsedAddresses())[0])\n//     )\n//   );\n//   const utxos = (await window.cardano.getUtxos()).map((utxo) =>\n//     Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n//   );\n// }\n// //   const value = bidUtxo.utxo.output().amount();\n// //   outputs.add(\n// //     this.createOutput(\n// //       CONTRACT_ADDRESS(),\n// //       assetsToValue([\n// //         {\n// //           unit:\n// //             this.contractInfo.policyBid +\n// //             fromAscii(this.contractInfo.prefixSpaceBudBid + budId),\n// //           quantity: \"1\",\n// //         },\n// //       ])\n// //     )\n// //   );\n// //   this.splitAmount(value.coin(), walletAddress.to_address(), outputs);\n// //   outputs.add(\n// //     this.createOutput(\n// //       bidUtxo.tradeOwnerAddress,\n// //       assetsToValue([\n// //         {\n// //           unit:\n// //             this.contractInfo.policySpaceBudz +\n// //             fromAscii(this.contractInfo.prefixSpaceBud + budId),\n// //           quantity: \"1\",\n// //         },\n// //       ])\n// //     )\n// //   ); // bidder receiving SpaceBud\n// //   const requiredSigners = Loader.Cardano.Ed25519KeyHashes.new();\n// //   requiredSigners.add(walletAddress.payment_cred().to_keyhash());\n// //   txBuilder.set_required_signers(requiredSigners);\n// //   const txHash = await this.finalizeTx({\n// //     txBuilder,\n// //     changeAddress: walletAddress,\n// //     utxos,\n// //     outputs,\n// //     datums,\n// //     metadata,\n// //     scriptUtxo: bidUtxo.utxo,\n// //     action: SELL,\n// //   });\n// //   return txHash;\n// }","map":{"version":3,"sources":["/Users/vyasartix/workspace/AceLayrBridgeDemo/src/core.js"],"names":["Buffer","fromHex","hex","from"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,OAAO,MAAMC,OAAO,GAAIC,GAAD,IAASF,MAAM,CAACG,IAAP,CAAYD,GAAZ,EAAiB,KAAjB,CAAzB,C,CAEP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Buffer } from \"buffer\";\n\nexport const fromHex = (hex) => Buffer.from(hex, \"hex\");\n\n// async load() {\n//     await Loader.load();\n//     const p = await this.blockfrostRequest(`/epochs/latest/parameters`);\n\n//     this.protocolParameters = {\n//       linearFee: {\n//         minFeeA: p.min_fee_a.toString(),\n//         minFeeB: p.min_fee_b.toString(),\n//       },\n//       minUtxo: \"1000000\",\n//       poolDeposit: \"500000000\",\n//       keyDeposit: \"2000000\",\n//       maxValSize: \"5000\",\n//       maxTxSize: 16384,\n//       priceMem: 5.77e-2,\n//       priceStep: 7.21e-5,\n//     };\n\n//     this.hopperContractInfo = {\n//       policy:\n//         \"a53096f46350b8555bb9d36b403875805029180a56bd667b6c08d0fb\"\n//     };\n\n//     this.ramanujamContractInfo = {\n//       policy:\n//         \"0c8f4228d02dfaa4e2dcc33a87e25db30f34d238268f6ad57709db1c\"\n//     };\n\n\n// }\n\n\n\n\n// // /**\n// // *@private\n// // */\n// // async initTx() {\n// //     const txBuilder = Loader.Cardano.TransactionBuilder.new(\n// //         Loader.Cardano.LinearFee.new(\n// //         Loader.Cardano.BigNum.from_str(\n// //             this.protocolParameters.linearFee.minFeeA\n// //         ),\n// //         Loader.Cardano.BigNum.from_str(\n// //             this.protocolParameters.linearFee.minFeeB\n// //         )\n// //         ),\n// //         Loader.Cardano.BigNum.from_str(this.protocolParameters.minUtxo),\n// //         Loader.Cardano.BigNum.from_str(this.protocolParameters.poolDeposit),\n// //         Loader.Cardano.BigNum.from_str(this.protocolParameters.keyDeposit),\n// //         this.protocolParameters.maxValSize,\n// //         this.protocolParameters.maxTxSize,\n// //         this.protocolParameters.priceMem,\n// //         this.protocolParameters.priceStep,\n// //         Loader.Cardano.LanguageViews.new(Buffer.from(languageViews, \"hex\"))\n// //     );\n// //     const datums = Loader.Cardano.PlutusList.new();\n// //     const metadata = { [DATUM_LABEL]: {}, [ADDRESS_LABEL]: {} };\n// //     const outputs = Loader.Cardano.TransactionOutputs.new();\n// //     return { txBuilder, datums, metadata, outputs };\n// // }\n\n\n\n// //  /**\n// //    * @private\n// //    */\n// // createOutput(\n// //     address,\n// //     value,\n// // ) {\n// //     const v = value;\n// //     const minAda = Loader.Cardano.min_ada_required(\n// //                         v,\n// //                         false,\n// //                         Loader.Cardano.BigNum.from_str(this.protocolParameters.minUtxo)\n// //                     );\n// //     const output = Loader.Cardano.TransactionOutput.new(address, v);\n// //     return output;\n// // }\n\n\n\n// export async function send() {\n\n\n// //   const { txBuilder, datums, metadata, outputs } = await this.initTx();\n\n//   const walletAddress = Loader.Cardano.BaseAddress.from_address(\n//     Loader.Cardano.Address.from_bytes(\n//       fromHex((await window.cardano.getUsedAddresses())[0])\n//     )\n//   );\n\n//   const utxos = (await window.cardano.getUtxos()).map((utxo) =>\n//     Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n//   );\n// }\n\n\n\n// //   const value = bidUtxo.utxo.output().amount();\n// //   outputs.add(\n// //     this.createOutput(\n// //       CONTRACT_ADDRESS(),\n// //       assetsToValue([\n// //         {\n// //           unit:\n// //             this.contractInfo.policyBid +\n// //             fromAscii(this.contractInfo.prefixSpaceBudBid + budId),\n// //           quantity: \"1\",\n// //         },\n// //       ])\n// //     )\n// //   );\n// //   this.splitAmount(value.coin(), walletAddress.to_address(), outputs);\n// //   outputs.add(\n// //     this.createOutput(\n// //       bidUtxo.tradeOwnerAddress,\n// //       assetsToValue([\n// //         {\n// //           unit:\n// //             this.contractInfo.policySpaceBudz +\n// //             fromAscii(this.contractInfo.prefixSpaceBud + budId),\n// //           quantity: \"1\",\n// //         },\n// //       ])\n// //     )\n// //   ); // bidder receiving SpaceBud\n\n// //   const requiredSigners = Loader.Cardano.Ed25519KeyHashes.new();\n// //   requiredSigners.add(walletAddress.payment_cred().to_keyhash());\n// //   txBuilder.set_required_signers(requiredSigners);\n\n// //   const txHash = await this.finalizeTx({\n// //     txBuilder,\n// //     changeAddress: walletAddress,\n// //     utxos,\n// //     outputs,\n// //     datums,\n// //     metadata,\n// //     scriptUtxo: bidUtxo.utxo,\n// //     action: SELL,\n// //   });\n// //   return txHash;\n// }\n"]},"metadata":{},"sourceType":"module"}